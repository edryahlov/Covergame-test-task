!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=48)}([function(e,t,n){e.exports=n(35)()},function(e,t,n){"use strict";e.exports=n(46)},function(e,t,n){"use strict";n.r(t);var r=n(9),o=n(8),a={INIT:"@@redux/INIT"};function i(e,t,n){var u;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(i)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,s=[],f=s,p=!1;function d(){f===s&&(f=s.slice())}function h(){return c}function m(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var t=!0;return d(),f.push(e),function(){if(t){t=!1,d();var n=f.indexOf(e);f.splice(n,1)}}}function v(e){if(!Object(r.a)(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=l(c,e)}finally{p=!1}for(var t=s=f,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:a.INIT}),(u={dispatch:v,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:a.INIT})}})[o.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[o.a]=function(){return this},e},u}function u(e,t){var n=t&&t.type;return"Given action "+(n&&'"'+n.toString()+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i=Object.keys(n);var l=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){l=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(l)throw l;for(var r=!1,o={},a=0;a<i.length;a++){var c=i[a],s=n[c],f=e[c],p=s(f,t);if(void 0===p){var d=u(c,t);throw new Error(d)}o[c]=p,r=r||p!==f}return r?o:e}}function c(e,t){return function(){return t(e.apply(void 0,arguments))}}function s(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],i=e[a];"function"==typeof i&&(r[a]=c(i,t))}return r}function f(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(n,r,o){var a,i=e(n,r,o),u=i.dispatch,l={getState:i.getState,dispatch:function(e){return u(e)}};return a=t.map(function(e){return e(l)}),u=f.apply(void 0,a)(i.dispatch),p({},i,{dispatch:u})}}}n.d(t,"createStore",function(){return i}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return s}),n.d(t,"applyMiddleware",function(){return d}),n.d(t,"compose",function(){return f})},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(0),a=n.n(o),i=a.a.shape({trySubscribe:a.a.func.isRequired,tryUnsubscribe:a.a.func.isRequired,notifyNestedSubs:a.a.func.isRequired,isSubscribed:a.a.func.isRequired}),u=a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired});function l(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return a[t]=n.store,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:a.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=i,e),o}var c=l(),s=n(15),f=n.n(s),p=n(5),d=n.n(p);var h=null,m={notify:function(){}};var v=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=m}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=m)},e}(),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var g=0,b={};function C(){}function w(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.getDisplayName,l=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,c=o.methodName,s=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,m=o.shouldHandleStateChanges,w=void 0===m||m,E=o.storeKey,x=void 0===E?"store":E,k=o.withRef,O=void 0!==k&&k,T=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),S=x+"Subscription",P=g++,_=((t={})[x]=u,t[S]=i,t),N=((n={})[S]=i,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+s+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),a=y({},T,{getDisplayName:l,methodName:s,renderCountProp:h,shouldHandleStateChanges:w,storeKey:x,withRef:O,displayName:o,wrappedComponentName:n,WrappedComponent:t}),i=function(n){function i(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=P,r.state={},r.renderCount=0,r.store=e[x]||t[x],r.propsMode=Boolean(e[x]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+x+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+x+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[S]=t||this.context[S],e},i.prototype.componentDidMount=function(){w&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},i.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},i.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},i.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=C,this.store=null,this.selector.run=C,this.selector.shouldComponentUpdate=!1},i.prototype.getWrappedInstance=function(){return d()(O,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+s+"() call."),this.wrappedInstance},i.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},i.prototype.initSelector=function(){var t=e(this.store.dispatch,a);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},i.prototype.initSubscription=function(){if(w){var e=(this.propsMode?this.props:this.context)[S];this.subscription=new v(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},i.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},i.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},i.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},i.prototype.addExtraProps=function(e){if(!(O||h||this.propsMode&&this.subscription))return e;var t=y({},e);return O&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[S]=this.subscription),t},i.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},i}(r.Component);return i.WrappedComponent=t,i.displayName=o,i.childContextTypes=N,i.contextTypes=_,i.propTypes=_,f()(i,t)}}var E=Object.prototype.hasOwnProperty;function x(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(x(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!E.call(t,n[o])||!x(e[n[o]],t[n[o]]))return!1;return!0}var O=n(2);n(9);function T(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function S(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function P(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=S(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=S(o),o=r(t,n)),o},r}}var _=[function(e){return"function"==typeof e?P(e):void 0},function(e){return e?void 0:T(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?T(function(t){return Object(O.bindActionCreators)(e,t)}):void 0}];var N=[function(e){return"function"==typeof e?P(e):void 0},function(e){return e?void 0:T(function(){return{}})}],M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function I(e,t,n){return M({},n,e,t)}var R=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,a=!1,i=void 0;return function(t,n,u){var l=e(t,n,u);return a?r&&o(l,i)||(i=l):(a=!0,i=l),i}}}(e):void 0},function(e){return e?void 0:function(){return I}}];function j(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function D(e,t,n,r,o){var a=o.areStatesEqual,i=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,c=void 0,s=void 0,f=void 0,p=void 0,d=void 0;function h(o,l){var h,m,v=!i(l,s),y=!a(o,c);return c=o,s=l,v&&y?(f=e(c,s),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):v?(e.dependsOnOwnProps&&(f=e(c,s)),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):y?(h=e(c,s),m=!u(h,f),f=h,m&&(d=n(f,p,s)),d):d}return function(o,a){return l?h(o,a):(f=e(c=o,s=a),p=t(r,s),d=n(f,p,s),l=!0,d)}}function A(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?D:j)(i,u,l,e,a)}var L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function U(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function F(e,t){return e===t}var H=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?w:t,r=e.mapStateToPropsFactories,o=void 0===r?N:r,a=e.mapDispatchToPropsFactories,i=void 0===a?_:a,u=e.mergePropsFactories,l=void 0===u?R:u,c=e.selectorFactory,s=void 0===c?A:c;return function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=a.pure,c=void 0===u||u,f=a.areStatesEqual,p=void 0===f?F:f,d=a.areOwnPropsEqual,h=void 0===d?k:d,m=a.areStatePropsEqual,v=void 0===m?k:m,y=a.areMergedPropsEqual,g=void 0===y?k:y,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),C=U(e,o,"mapStateToProps"),w=U(t,i,"mapDispatchToProps"),E=U(r,l,"mergeProps");return n(s,L({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:C,initMapDispatchToProps:w,initMergeProps:E,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:v,areMergedPropsEqual:g},b))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return w}),n.d(t,"connect",function(){return H})},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,a,i,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.COMP_MOVE="COMP_MOVE",t.PLAYER_MOVE="PLAYER_MOVE",t.PLAYER_STEP="PLAYER_STEP",t.GAME_OVER="GAME_OVER",t.GAME_OVER_REMOVE="GAME_OVER_REMOVE",t.CHANGE_DIFFICULTY="CHANGE_DIFFICULTY",t.LVL=[1500,1e3,400]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.changeDifficulty=t.gameOverRemove=t.gameOver=t.playerStep=t.playerMove=t.compMove=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(6));t.compMove=function(){return{type:r.COMP_MOVE}},t.playerMove=function(){return{type:r.PLAYER_MOVE}},t.playerStep=function(){return{type:r.PLAYER_STEP}},t.gameOver=function(){return{type:r.GAME_OVER}},t.gameOverRemove=function(){return{type:r.GAME_OVER_REMOVE}},t.changeDifficulty=function(e){return{type:r.CHANGE_DIFFICULTY,lvl:e}}},function(e,t,n){"use strict";(function(e,r){var o,a=n(14);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(11),n(32)(e))},function(e,t,n){"use strict";var r=n(49),o="object"==typeof self&&self&&self.Object===Object&&self,a=(r.a||o||Function("return this")()).Symbol,i=Object.prototype,u=i.hasOwnProperty,l=i.toString,c=a?a.toStringTag:void 0;var s=function(e){var t=u.call(e,c),n=e[c];try{e[c]=void 0;var r=!0}catch(e){}var o=l.call(e);return r&&(t?e[c]=n:delete e[c]),o},f=Object.prototype.toString;var p=function(e){return f.call(e)},d="[object Null]",h="[object Undefined]",m=a?a.toStringTag:void 0;var v=function(e){return null==e?void 0===e?h:d:m&&m in Object(e)?s(e):p(e)};var y=function(e,t){return function(n){return e(t(n))}}(Object.getPrototypeOf,Object);var g=function(e){return null!=e&&"object"==typeof e},b="[object Object]",C=Function.prototype,w=Object.prototype,E=C.toString,x=w.hasOwnProperty,k=E.call(Object);t.a=function(e){if(!g(e)||v(e)!=b)return!1;var t=y(e);if(null===t)return!0;var n=x.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&E.call(n)==k}},function(e,t){var n=9007199254740991,r="[object Arguments]",o="[object Function]",a="[object GeneratorFunction]",i=Object.prototype,u=i.hasOwnProperty,l=i.toString,c=i.propertyIsEnumerable;e.exports=function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&function(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)?l.call(e):"";return t==o||t==a}(e)}(e)}(e)&&u.call(e,"callee")&&(!c.call(e,"callee")||l.call(e)==r)}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){i=r(n);for(var s=0;s<i.length;s++)a.call(n,i[s])&&(u[i[s]]=n[i[s]])}}return u}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,u=i&&i(Object);return function l(c,s,f){if("string"!=typeof s){if(u){var p=i(s);p&&p!==u&&l(c,p,f)}var d=r(s);o&&(d=d.concat(o(s)));for(var h=0;h<d.length;++h){var m=d[h];if(!(e[m]||t[m]||f&&f[m])){var v=a(s,m);try{n(c,m,v)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,t=arguments[1],n=JSON.parse(JSON.stringify(e));switch(t.type){case o.COMP_MOVE:var i=e.sequence;0===i[i.length-1]&&i.pop(),i.push(Math.floor(4*Math.random())+1),i.push(0);var u=e.round+1;return n=r({},n,{playersStep:0,round:u,sequence:i,playersTurn:!1,compTurn:!0});case o.PLAYER_MOVE:return n=r({},n,{playersTurn:!0,compTurn:!1});case o.PLAYER_STEP:return n.playersStep=e.playersStep+1,n;case o.GAME_OVER:return n=r({},n,{round:0,playersStep:0,playersTurn:!1,compTurn:!0,sequence:[],status:"gameOver"});case o.GAME_OVER_REMOVE:return n.status="start",n;case o.CHANGE_DIFFICULTY:return n.lvl=t.lvl,n;default:return e}return e};var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(6));var a={round:0,lvl:0,playersStep:0,playersTurn:!1,compTurn:!0,sequence:[],status:"stop"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(2),a=n(16),i=(r=a)&&r.__esModule?r:{default:r};var u=(0,o.combineReducers)({data:i.default});t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=(r=a)&&r.__esModule?r:{default:r},u=n(3),l=n(2),c=n(7),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(6));var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.showCompsMoves=function(){for(var e=n.props.gameData.sequence,t=n.props.gameData,r=t.sequence,o=t.lvl,a=function(e){setTimeout(function(t){if(0!==r[e]){var o=document.querySelector(".active");null!==o&&o.classList.remove("active"),document.getElementById("box"+r[e]).classList.add("active"),new Audio("./sounds/"+r[e]+".mp3").play()}else{for(var a=document.querySelectorAll(".field-box"),i=0;i<a.length;i++)a[i].classList.add("players-turn");null!==(a=document.querySelector(".active"))&&a.classList.remove("active"),n.props.playerMove()}},e*s.LVL[o],e)},i=0;i<e.length;i++)a(i)},n.handleBoxClick=function(e){if(n.props.gameData.playersTurn){var t=+e.target.getAttribute("data-box"),r=n.props.gameData,o=r.round,a=r.playersStep,i=r.sequence;if(t===i[a])if(new Audio("./sounds/"+i[a]+".mp3").play(),a===o-1){for(var u=document.querySelectorAll(".field-box"),l=0;l<u.length;l++)u[l].classList.remove("players-turn");setTimeout(function(){return n.props.compMove()},2e3)}else n.props.playerStep();else n.props.gameOver()}},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){}},{key:"componentDidUpdate",value:function(){this.props.gameData.compTurn&&this.showCompsMoves()}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("div",{id:"box1",className:"field-box","data-box":"1",onClick:this.handleBoxClick}),i.default.createElement("div",{id:"box2",className:"field-box","data-box":"2",onClick:this.handleBoxClick}),i.default.createElement("br",null),i.default.createElement("div",{id:"box3",className:"field-box","data-box":"3",onClick:this.handleBoxClick}),i.default.createElement("div",{id:"box4",className:"field-box","data-box":"4",onClick:this.handleBoxClick}))}}]),t}();t.default=(0,u.connect)(function(e){return{gameData:e.data}},function(e){return(0,l.bindActionCreators)({compMove:c.compMove,playerMove:c.playerMove,playerStep:c.playerStep,gameOver:c.gameOver},e)})(f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=(r=a)&&r.__esModule?r:{default:r},u=n(3),l=n(2),c=n(7);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.changeLvl=function(e){n.props.changeDifficulty(e.target.value)},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("h1",null,"Simon the Game"),i.default.createElement("h3",null,"Round: ",this.props.gameData.round),i.default.createElement("p",null,"Level:",i.default.createElement("select",{name:"game_level",id:"gamelevel",defaultValue:this.props.gameData.lvl,onChange:this.changeLvl},i.default.createElement("option",{value:"0"},"Easy"),i.default.createElement("option",{value:"1"},"Medium"),i.default.createElement("option",{value:"2"},"Hard"))))}}]),t}();t.default=(0,u.connect)(function(e){return{gameData:e.data}},function(e){return(0,l.bindActionCreators)({changeDifficulty:c.changeDifficulty},e)})(s)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,c=0,s=[],f=n(20);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(g(r.parts[i],t))}else{var u=[];for(i=0;i<r.parts.length;i++)u.push(g(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:u}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],u={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(u):n.push(r[i]={id:i,parts:[u]})}return n}function h(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=c++;n=l||(l=v(t)),r=w.bind(null,n,i,!1),o=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(i),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(u=a[i.id]).refs--,r.push(u)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete a[u.id]}}}};var b,C=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=C(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(t=e.exports=n(22)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto);",""]),t.push([e.i,'body {\n  font-family: "Roboto", sans-serif;\n  font-size: 16px;\n  color: #333;\n  text-align: center; }\n\n.field-box {\n  border: solid 1px;\n  width: 200px;\n  height: 200px;\n  display: inline-block;\n  margin: 0 2px; }\n\n.players-turn {\n  cursor: pointer; }\n\nbutton {\n  margin-top: 20px;\n  font-size: 16px; }\n\nselect {\n  margin-left: 5px;\n  font-size: 16px; }\n\n#game-over {\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.5);\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  z-index: 1; }\n  #game-over__box {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: #fff;\n    z-index: 2;\n    padding: 100px 50px;\n    border-radius: 6px;\n    font-size: 26px;\n    font-weight: bold; }\n\n#box {\n  transition: all 1s; }\n  #box1 {\n    background-color: #EB5757; }\n    #box1.active {\n      background-color: #c51717; }\n  #box2 {\n    background-color: #BB6BD9; }\n    #box2.active {\n      background-color: #8d2db1; }\n  #box3 {\n    background-color: #F2C94C; }\n    #box3.active {\n      background-color: #c99b0f; }\n  #box4 {\n    background-color: #6FCF97; }\n    #box4.active {\n      background-color: #36a263; }\n',""])},function(e,t,n){var r=n(23);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=f(o),i=n(3),u=n(2),l=n(7);n(24);var c=f(n(19)),s=f(n(18));function f(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.modal=function(e){"game-over"!==e.target.id&&"game-over__box"!==e.target.id||(n.props.gameOverRemove(),document.body.removeEventListener("click",n.modal))},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){document.body.addEventListener("click",this.modal)}},{key:"componentDidUpdate",value:function(){}},{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement(c.default,null),a.default.createElement(s.default,null),this.props.gameData.round>0?"":a.default.createElement("button",{onClick:this.props.compMove},"Start Game"),"gameOver"===this.props.gameData.status?a.default.createElement("div",{id:"game-over"},a.default.createElement("div",{id:"game-over__box"},"GAME OVER")):null)}}]),t}();t.default=(0,i.connect)(function(e){return{gameData:e.data}},function(e){return(0,u.bindActionCreators)({compMove:l.compMove,gameOverRemove:l.gameOverRemove},e)})(p)},function(e,t){var n="[object Function]",r=/^\[object .+?Constructor\]$/;function o(e){return!!e&&"object"==typeof e}var a,i,u=Object.prototype,l=Function.prototype.toString,c=u.hasOwnProperty,s=u.toString,f=RegExp("^"+l.call(c).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),p=9007199254740991;var d=(a=Array,function(e){return null!=e&&(function(e){return function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)&&s.call(e)==n}(e)?f.test(l.call(e)):o(e)&&r.test(e))}(i=null==a?void 0:a["isArray"])?i:void 0)||function(e){return o(e)&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=p}(e.length)&&"[object Array]"==s.call(e)};e.exports=d},function(e,t,n){var r=n(10),o=n(26),a=/^\d+$/,i=Object.prototype.hasOwnProperty,u=9007199254740991;function l(e,t){return e="number"==typeof e||a.test(e)?+e:-1,t=null==t?u:t,e>-1&&e%1==0&&e<t}e.exports=function(e){if(null==e)return[];var t,n;n=typeof(t=e),(!t||"object"!=n&&"function"!=n)&&(e=Object(e));var a=e.length;a=a&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=u}(a)&&(o(e)||r(e))&&a||0;for(var c=e.constructor,s=-1,f="function"==typeof c&&c.prototype===e,p=Array(a),d=a>0;++s<a;)p[s]=s+"";for(var h in e)d&&l(h,a)||"constructor"==h&&(f||!i.call(e,h))||p.push(h);return p}},function(e,t){var n,r=function(e,t,r){for(var o=-1,a=Object(e),i=r(e),u=i.length;u--;){var l=i[n?u:++o];if(!1===t(a[l],l,a))break}return e};e.exports=r},function(e,t,n){var r=n(28),o=n(10),a=n(27),i="[object Object]";var u=Object.prototype,l=u.hasOwnProperty,c=u.toString;e.exports=function(e){var t,n;return!(!function(e){return!!e&&"object"==typeof e}(e)||c.call(e)!=i||o(e)||!(l.call(e,"constructor")||"function"!=typeof(t=e.constructor)||t instanceof t))&&(r(e,function(e,t){n=t},a),void 0===n||l.call(e,n))}},function(e,t,n){"use strict";t.__esModule=!0,t.isFSA=function(e){return a.default(e)&&void 0!==e.type&&Object.keys(e).every(u)},t.isError=function(e){return!0===e.error};var r,o=n(29),a=(r=o)&&r.__esModule?r:{default:r},i=["type","payload","error","meta"];function u(e){return i.indexOf(e)>-1}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e){var t=e.dispatch;return function(e){return function(n){return o.isFSA(n)?a(n.payload)?n.payload.then(function(e){return t(r({},n,{payload:e}))},function(e){return t(r({},n,{payload:e,error:!0}))}):e(n):a(n)?n.then(t):e(n)}}};var o=n(30);function a(e){return e&&"function"==typeof e.then}e.exports=t.default},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,u,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,o,a,i,u,l],f=0;(c=new Error(t.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";var r=n(4),o=n(34),a=n(33);e.exports=function(){function e(e,t,n,r,i,u){u!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e){try{e.focus()}catch(e){}}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(37);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(38);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=n(4),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:r}},registerDefault:function(){}};e.exports=o},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";var r=n(1),o=n(43),a=n(13),i=n(4),u=n(42),l=n(41),c=n(40),s=n(39),f=n(36),p=n(12);function d(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||d("227");var h={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0};function m(e,t){return(e&t)===t}var v={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=v,n=e.Properties||{},r=e.DOMAttributeNamespaces||{},o=e.DOMAttributeNames||{};for(var a in e=e.DOMMutationMethods||{},n){y.hasOwnProperty(a)&&d("48",a);var i=a.toLowerCase(),u=n[a];1>=(i={attributeName:i,attributeNamespace:null,propertyName:a,mutationMethod:null,mustUseProperty:m(u,t.MUST_USE_PROPERTY),hasBooleanValue:m(u,t.HAS_BOOLEAN_VALUE),hasNumericValue:m(u,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:m(u,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:m(u,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:m(u,t.HAS_STRING_BOOLEAN_VALUE)}).hasBooleanValue+i.hasNumericValue+i.hasOverloadedBooleanValue||d("50",a),o.hasOwnProperty(a)&&(i.attributeName=o[a]),r.hasOwnProperty(a)&&(i.attributeNamespace=r[a]),e.hasOwnProperty(a)&&(i.mutationMethod=e[a]),y[a]=i}}},y={};function g(e,t){if(h.hasOwnProperty(e)||2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return h.hasOwnProperty(e)?e=!0:(t=b(e))?e=t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:e="data-"===(e=e.toLowerCase().slice(0,5))||"aria-"===e,e;case"undefined":case"number":case"string":case"object":return!0;default:return!1}}function b(e){return y.hasOwnProperty(e)?y[e]:null}var C=v,w=C.MUST_USE_PROPERTY,E=C.HAS_BOOLEAN_VALUE,x=C.HAS_NUMERIC_VALUE,k=C.HAS_POSITIVE_NUMERIC_VALUE,O=C.HAS_OVERLOADED_BOOLEAN_VALUE,T=C.HAS_STRING_BOOLEAN_VALUE,S={Properties:{allowFullScreen:E,async:E,autoFocus:E,autoPlay:E,capture:O,checked:w|E,cols:k,contentEditable:T,controls:E,default:E,defer:E,disabled:E,download:O,draggable:T,formNoValidate:E,hidden:E,loop:E,multiple:w|E,muted:w|E,noValidate:E,open:E,playsInline:E,readOnly:E,required:E,reversed:E,rows:k,rowSpan:x,scoped:E,seamless:E,selected:w|E,size:k,start:x,span:k,spellCheck:T,style:0,tabIndex:0,itemScope:E,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:T},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}},P=C.HAS_STRING_BOOLEAN_VALUE,_="http://www.w3.org/1999/xlink",N="http://www.w3.org/XML/1998/namespace",M={Properties:{autoReverse:P,externalResourcesRequired:P,preserveAlpha:P},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:_,xlinkArcrole:_,xlinkHref:_,xlinkRole:_,xlinkShow:_,xlinkTitle:_,xlinkType:_,xmlBase:N,xmlLang:N,xmlSpace:N}},I=/[\-\:]([a-z])/g;function R(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(e){var t=e.replace(I,R);M.Properties[t]=0,M.DOMAttributeNames[t]=e}),C.injectDOMPropertyConfig(S),C.injectDOMPropertyConfig(M);var j={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback&&d("197"),D=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,t,n,r,o,a,i,u,l){D.apply(j,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,u,l){if(j.invokeGuardedCallback.apply(this,arguments),j.hasCaughtError()){var c=j.clearCaughtError();j._hasRethrowError||(j._hasRethrowError=!0,j._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(j._hasRethrowError){var e=j._rethrowError;throw j._rethrowError=null,j._hasRethrowError=!1,e}}.apply(j,arguments)},hasCaughtError:function(){return j._hasCaughtError},clearCaughtError:function(){if(j._hasCaughtError){var e=j._caughtError;return j._caughtError=null,j._hasCaughtError=!1,e}d("198")}};function D(e,t,n,r,o,a,i,u,l){j._hasCaughtError=!1,j._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){j._caughtError=e,j._hasCaughtError=!0}}var A=null,L={};function U(){if(A)for(var e in L){var t=L[e],n=A.indexOf(e);if(-1<n||d("96",e),!H[n])for(var r in t.extractEvents||d("97",e),H[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,u=r;V.hasOwnProperty(u)&&d("99",u),V[u]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&F(l[o],i,u);o=!0}else a.registrationName?(F(a.registrationName,i,u),o=!0):o=!1;o||d("98",r,e)}}}function F(e,t,n){z[e]&&d("100",e),z[e]=t,B[e]=t.eventTypes[n].dependencies}var H=[],V={},z={},B={};function q(e){A&&d("101"),A=Array.prototype.slice.call(e),U()}function W(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];L.hasOwnProperty(t)&&L[t]===r||(L[t]&&d("102",t),L[t]=r,n=!0)}n&&U()}var K=Object.freeze({plugins:H,eventNameDispatchConfigs:V,registrationNameModules:z,registrationNameDependencies:B,possibleRegistrationNames:null,injectEventPluginOrder:q,injectEventPluginsByName:W}),$=null,G=null,Y=null;function Q(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=Y(r),j.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function X(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function J(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var Z=null;function ee(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)Q(e,t,n[o],r[o]);else n&&Q(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function te(e){return ee(e,!0)}function ne(e){return ee(e,!1)}var re={injectEventPluginOrder:q,injectEventPluginsByName:W};function oe(e,t){var n=e.stateNode;if(!n)return null;var r=$(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,typeof n),n)}function ae(e,t,n,r){for(var o,a=0;a<H.length;a++){var i=H[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=X(o,i))}return o}function ie(e){e&&(Z=X(Z,e))}function ue(e){var t=Z;Z=null,t&&(J(t,e?te:ne),Z&&d("95"),j.rethrowCaughtError())}var le=Object.freeze({injection:re,getListener:oe,extractEvents:ae,enqueueEvents:ie,processEventQueue:ue}),ce=Math.random().toString(36).slice(2),se="__reactInternalInstance$"+ce,fe="__reactEventHandlers$"+ce;function pe(e){if(e[se])return e[se];for(var t=[];!e[se];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}var n=void 0,r=e[se];if(5===r.tag||6===r.tag)return r;for(;e&&(r=e[se]);e=t.pop())n=r;return n}function de(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function he(e){return e[fe]||null}var me=Object.freeze({precacheFiberNode:function(e,t){t[se]=e},getClosestInstanceFromNode:pe,getInstanceFromNode:function(e){return!(e=e[se])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:de,getFiberCurrentPropsFromNode:he,updateFiberProps:function(e,t){e[fe]=t}});function ve(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function ye(e,t,n){for(var r=[];e;)r.push(e),e=ve(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function ge(e,t,n){(t=oe(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=X(n._dispatchListeners,t),n._dispatchInstances=X(n._dispatchInstances,e))}function be(e){e&&e.dispatchConfig.phasedRegistrationNames&&ye(e._targetInst,ge,e)}function Ce(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;ye(t=t?ve(t):null,ge,e)}}function we(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=oe(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=X(n._dispatchListeners,t),n._dispatchInstances=X(n._dispatchInstances,e))}function Ee(e){e&&e.dispatchConfig.registrationName&&we(e._targetInst,null,e)}function xe(e){J(e,be)}function ke(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,u=o;u;u=ve(u))i++;u=0;for(var l=a;l;l=ve(l))u++;for(;0<i-u;)o=ve(o),i--;for(;0<u-i;)a=ve(a),u--;for(;i--;){if(o===a||o===a.alternate)break e;o=ve(o),a=ve(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=ve(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=ve(r);for(r=0;r<o.length;r++)we(o[r],"bubbled",e);for(e=n.length;0<e--;)we(n[e],"captured",t)}var Oe=Object.freeze({accumulateTwoPhaseDispatches:xe,accumulateTwoPhaseDispatchesSkipTarget:function(e){J(e,Ce)},accumulateEnterLeaveDispatches:ke,accumulateDirectDispatches:function(e){J(e,Ee)}}),Te=null;function Se(){return!Te&&o.canUseDOM&&(Te="textContent"in document.documentElement?"textContent":"innerText"),Te}var Pe={_root:null,_startText:null,_fallbackText:null};function _e(){if(Pe._fallbackText)return Pe._fallbackText;var e,t,n=Pe._startText,r=n.length,o=Ne(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Pe._fallbackText=o.slice(e,1<t?1-t:void 0),Pe._fallbackText}function Ne(){return"value"in Pe._root?Pe._root.value:Pe._root[Se()]}var Me="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ie={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Re(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}function je(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function De(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ae(e){e.eventPool=[],e.getPooled=je,e.release=De}function Le(e,t,n,r){return Re.call(this,e,t,n,r)}function Ue(e,t,n,r){return Re.call(this,e,t,n,r)}a(Re.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<Me.length;t++)this[Me[t]]=null}}),Re.Interface=Ie,Re.augmentClass=function(e,t){function n(){}n.prototype=this.prototype;var r=new n;a(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=a({},this.Interface,t),e.augmentClass=this.augmentClass,Ae(e)},Ae(Re),Re.augmentClass(Le,{data:null}),Re.augmentClass(Ue,{data:null});var Fe,He=[9,13,27,32],Ve=o.canUseDOM&&"CompositionEvent"in window,ze=null;if(o.canUseDOM&&"documentMode"in document&&(ze=document.documentMode),Fe=o.canUseDOM&&"TextEvent"in window&&!ze){var Be=window.opera;Fe=!("object"==typeof Be&&"function"==typeof Be.version&&12>=parseInt(Be.version(),10))}var qe=Fe,We=o.canUseDOM&&(!Ve||ze&&8<ze&&11>=ze),Ke=String.fromCharCode(32),$e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Ge=!1;function Ye(e,t){switch(e){case"topKeyUp":return-1!==He.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Qe(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Xe=!1;var Je={eventTypes:$e,extractEvents:function(e,t,n,r){var o;if(Ve)e:{switch(e){case"topCompositionStart":var a=$e.compositionStart;break e;case"topCompositionEnd":a=$e.compositionEnd;break e;case"topCompositionUpdate":a=$e.compositionUpdate;break e}a=void 0}else Xe?Ye(e,n)&&(a=$e.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(a=$e.compositionStart);return a?(We&&(Xe||a!==$e.compositionStart?a===$e.compositionEnd&&Xe&&(o=_e()):(Pe._root=r,Pe._startText=Ne(),Xe=!0)),a=Le.getPooled(a,t,n,r),o?a.data=o:null!==(o=Qe(n))&&(a.data=o),xe(a),o=a):o=null,(e=qe?function(e,t){switch(e){case"topCompositionEnd":return Qe(t);case"topKeyPress":return 32!==t.which?null:(Ge=!0,Ke);case"topTextInput":return(e=t.data)===Ke&&Ge?null:e;default:return null}}(e,n):function(e,t){if(Xe)return"topCompositionEnd"===e||!Ve&&Ye(e,t)?(e=_e(),Pe._root=null,Pe._startText=null,Pe._fallbackText=null,Xe=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return We?null:t.data;default:return null}}(e,n))?((t=Ue.getPooled($e.beforeInput,t,n,r)).data=e,xe(t)):t=null,[o,t]}},Ze=null,et=null,tt=null;function nt(e){if(e=G(e)){Ze&&"function"==typeof Ze.restoreControlledState||d("194");var t=$(e.stateNode);Ze.restoreControlledState(e.stateNode,e.type,t)}}var rt={injectFiberControlledHostComponent:function(e){Ze=e}};function ot(e){et?tt?tt.push(e):tt=[e]:et=e}function at(){if(et){var e=et,t=tt;if(tt=et=null,nt(e),t)for(e=0;e<t.length;e++)nt(t[e])}}var it=Object.freeze({injection:rt,enqueueStateRestore:ot,restoreStateIfNeeded:at});function ut(e,t){return e(t)}var lt=!1;function ct(e,t){if(lt)return ut(e,t);lt=!0;try{return ut(e,t)}finally{lt=!1,at()}}var st,ft={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function pt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ft[e.type]:"textarea"===t}function dt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ht(e,t){if(!o.canUseDOM||t&&!("addEventListener"in document))return!1;var n=(t="on"+e)in document;return n||((n=document.createElement("div")).setAttribute(t,"return;"),n="function"==typeof n[t]),!n&&st&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}function mt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function vt(e){e._valueTracker||(e._valueTracker=function(e){var t=mt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function yt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=mt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}o.canUseDOM&&(st=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var gt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function bt(e,t,n){return(e=Re.getPooled(gt.change,e,t,n)).type="change",ot(n),xe(e),e}var Ct=null,wt=null;function Et(e){ie(e),ue(!1)}function xt(e){if(yt(de(e)))return e}function kt(e,t){if("topChange"===e)return t}var Ot=!1;function Tt(){Ct&&(Ct.detachEvent("onpropertychange",St),wt=Ct=null)}function St(e){"value"===e.propertyName&&xt(wt)&&ct(Et,e=bt(wt,e,dt(e)))}function Pt(e,t,n){"topFocus"===e?(Tt(),wt=n,(Ct=t).attachEvent("onpropertychange",St)):"topBlur"===e&&Tt()}function _t(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return xt(wt)}function Nt(e,t){if("topClick"===e)return xt(t)}function Mt(e,t){if("topInput"===e||"topChange"===e)return xt(t)}o.canUseDOM&&(Ot=ht("input")&&(!document.documentMode||9<document.documentMode));var It={eventTypes:gt,_isInputEventSupported:Ot,extractEvents:function(e,t,n,r){var o=t?de(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=kt;else if(pt(o))if(Ot)i=Mt;else{i=_t;var u=Pt}else!(a=o.nodeName)||"input"!==a.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(i=Nt);if(i&&(i=i(e,t)))return bt(i,n,r);u&&u(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&(e=""+o.value,o.getAttribute("value")!==e&&o.setAttribute("value",e))}};function Rt(e,t,n,r){return Re.call(this,e,t,n,r)}Re.augmentClass(Rt,{view:null,detail:null});var jt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Dt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=jt[e])&&!!t[e]}function At(){return Dt}function Lt(e,t,n,r){return Re.call(this,e,t,n,r)}Rt.augmentClass(Lt,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:At,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}});var Ut={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Ft={eventTypes:Ut,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?pe(t):null):e=null,e===t)return null;var a=null==e?o:de(e);o=null==t?o:de(t);var i=Lt.getPooled(Ut.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,(n=Lt.getPooled(Ut.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=a,ke(i,n,e,t),[i,n]}},Ht=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;function Vt(e){return"string"==typeof(e=e.type)?e:"function"==typeof e?e.displayName||e.name:null}function zt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Bt(e){return!!(e=e._reactInternalFiber)&&2===zt(e)}function qt(e){2!==zt(e)&&d("188")}function Wt(e){var t=e.alternate;if(!t)return 3===(t=zt(e))&&d("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return qt(o),e;if(i===r)return qt(o),t;i=i.sibling}d("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}i||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}var Kt=[];function $t(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=pe(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],Yt(e.topLevelType,t,e.nativeEvent,dt(e.nativeEvent))}var Gt=!0,Yt=void 0;function Qt(e){Gt=!!e}function Xt(e,t,n){return n?u.listen(n,t,Zt.bind(null,e)):null}function Jt(e,t,n){return n?u.capture(n,t,Zt.bind(null,e)):null}function Zt(e,t){if(Gt){var n=dt(t);if(null===(n=pe(n))||"number"!=typeof n.tag||2===zt(n)||(n=null),Kt.length){var r=Kt.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ct($t,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Kt.length&&Kt.push(e)}}}var en=Object.freeze({get _enabled(){return Gt},get _handleTopLevel(){return Yt},setHandleTopLevel:function(e){Yt=e},setEnabled:Qt,isEnabled:function(){return Gt},trapBubbledEvent:Xt,trapCapturedEvent:Jt,dispatchEvent:Zt});function tn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var nn={animationend:tn("Animation","AnimationEnd"),animationiteration:tn("Animation","AnimationIteration"),animationstart:tn("Animation","AnimationStart"),transitionend:tn("Transition","TransitionEnd")},rn={},on={};function an(e){if(rn[e])return rn[e];if(!nn[e])return e;var t,n=nn[e];for(t in n)if(n.hasOwnProperty(t)&&t in on)return rn[e]=n[t];return""}o.canUseDOM&&(on=document.createElement("div").style,"AnimationEvent"in window||(delete nn.animationend.animation,delete nn.animationiteration.animation,delete nn.animationstart.animation),"TransitionEvent"in window||delete nn.transitionend.transition);var un={topAbort:"abort",topAnimationEnd:an("animationend")||"animationend",topAnimationIteration:an("animationiteration")||"animationiteration",topAnimationStart:an("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:an("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},ln={},cn=0,sn="_reactListenersID"+(""+Math.random()).slice(2);function fn(e){return Object.prototype.hasOwnProperty.call(e,sn)||(e[sn]=cn++,ln[e[sn]]={}),ln[e[sn]]}function pn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=pn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pn(r)}}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var mn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,vn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},yn=null,gn=null,bn=null,Cn=!1;function wn(e,t){if(Cn||null==yn||yn!==l())return null;var n=yn;return"selectionStart"in n&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,bn&&c(bn,n)?null:(bn=n,(e=Re.getPooled(vn.select,gn,e,t)).type="select",e.target=yn,xe(e),e)}var En={eventTypes:vn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=fn(a),o=B.onSelect;for(var i=0;i<o.length;i++){var u=o[i];if(!a.hasOwnProperty(u)||!a[u]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?de(t):window,e){case"topFocus":(pt(a)||"true"===a.contentEditable)&&(yn=a,gn=t,bn=null);break;case"topBlur":bn=gn=yn=null;break;case"topMouseDown":Cn=!0;break;case"topContextMenu":case"topMouseUp":return Cn=!1,wn(n,r);case"topSelectionChange":if(mn)break;case"topKeyDown":case"topKeyUp":return wn(n,r)}return null}};function xn(e,t,n,r){return Re.call(this,e,t,n,r)}function kn(e,t,n,r){return Re.call(this,e,t,n,r)}function On(e,t,n,r){return Re.call(this,e,t,n,r)}function Tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,32<=e||13===e?e:0}Re.augmentClass(xn,{animationName:null,elapsedTime:null,pseudoElement:null}),Re.augmentClass(kn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Rt.augmentClass(On,{relatedTarget:null});var Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Pn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function _n(e,t,n,r){return Re.call(this,e,t,n,r)}function Nn(e,t,n,r){return Re.call(this,e,t,n,r)}function Mn(e,t,n,r){return Re.call(this,e,t,n,r)}function In(e,t,n,r){return Re.call(this,e,t,n,r)}function Rn(e,t,n,r){return Re.call(this,e,t,n,r)}Rt.augmentClass(_n,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Pn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:At,charCode:function(e){return"keypress"===e.type?Tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Lt.augmentClass(Nn,{dataTransfer:null}),Rt.augmentClass(Mn,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:At}),Re.augmentClass(In,{propertyName:null,elapsedTime:null,pseudoElement:null}),Lt.augmentClass(Rn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null});var jn={},Dn={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t;n={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[t="top"+t]},jn[e]=n,Dn[t]=n});var An={eventTypes:jn,extractEvents:function(e,t,n,r){var o=Dn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===Tn(n))return null;case"topKeyDown":case"topKeyUp":e=_n;break;case"topBlur":case"topFocus":e=On;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Lt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=Nn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=Mn;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=xn;break;case"topTransitionEnd":e=In;break;case"topScroll":e=Rt;break;case"topWheel":e=Rn;break;case"topCopy":case"topCut":case"topPaste":e=kn;break;default:e=Re}return xe(t=e.getPooled(o,t,n,r)),t}};Yt=function(e,t,n,r){ie(e=ae(e,t,n,r)),ue(!1)},re.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),$=me.getFiberCurrentPropsFromNode,G=me.getInstanceFromNode,Y=me.getNodeFromInstance,re.injectEventPluginsByName({SimpleEventPlugin:An,EnterLeaveEventPlugin:Ft,ChangeEventPlugin:It,SelectEventPlugin:En,BeforeInputEventPlugin:Je});var Ln=[],Un=-1;function Fn(e){0>Un||(e.current=Ln[Un],Ln[Un]=null,Un--)}function Hn(e,t){Ln[++Un]=e.current,e.current=t}new Set;var Vn={current:p},zn={current:!1},Bn=p;function qn(e){return Kn(e)?Bn:Vn.current}function Wn(e,t){var n=e.type.contextTypes;if(!n)return p;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Kn(e){return 2===e.tag&&null!=e.type.childContextTypes}function $n(e){Kn(e)&&(Fn(zn),Fn(Vn))}function Gn(e,t,n){null!=Vn.cursor&&d("168"),Hn(Vn,t),Hn(zn,n)}function Yn(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||d("108",Vt(e)||"Unknown",o);return a({},t,n)}function Qn(e){if(!Kn(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||p,Bn=Vn.current,Hn(Vn,t),Hn(zn,zn.current),!0}function Xn(e,t){var n=e.stateNode;if(n||d("169"),t){var r=Yn(e,Bn);n.__reactInternalMemoizedMergedChildContext=r,Fn(zn),Fn(Vn),Hn(Vn,r)}else Fn(zn);Hn(zn,t)}function Jn(e,t,n){this.tag=e,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Zn(e,t,n){var r=e.alternate;return null===r?((r=new Jn(e.tag,e.key,e.internalContextTag)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.pendingProps=t,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function er(e,t,n){var r=void 0,o=e.type,a=e.key;return"function"==typeof o?((r=o.prototype&&o.prototype.isReactComponent?new Jn(2,a,t):new Jn(0,a,t)).type=o,r.pendingProps=e.props):"string"==typeof o?((r=new Jn(5,a,t)).type=o,r.pendingProps=e.props):"object"==typeof o&&null!==o&&"number"==typeof o.tag?(r=o).pendingProps=e.props:d("130",null==o?o:typeof o,""),r.expirationTime=n,r}function tr(e,t,n,r){return(t=new Jn(10,r,t)).pendingProps=e,t.expirationTime=n,t}function nr(e,t,n){return(t=new Jn(6,null,t)).pendingProps=e,t.expirationTime=n,t}function rr(e,t,n){return(t=new Jn(7,e.key,t)).type=e.handler,t.pendingProps=e,t.expirationTime=n,t}function or(e,t,n){return(e=new Jn(9,null,t)).expirationTime=n,e}function ar(e,t,n){return(t=new Jn(4,e.key,t)).pendingProps=e.children||[],t.expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var ir=null,ur=null;function lr(e){return function(t){try{return e(t)}catch(e){}}}function cr(e){"function"==typeof ir&&ir(e)}function sr(e){"function"==typeof ur&&ur(e)}function fr(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function pr(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}function dr(e,t){var n=e.alternate,r=e.updateQueue;null===r&&(r=e.updateQueue=fr(null)),null!==n?null===(e=n.updateQueue)&&(e=n.updateQueue=fr(null)):e=null,null===(e=e!==r?e:null)?pr(r,t):null===r.last||null===e.last?(pr(r,t),pr(e,t)):(pr(r,t),e.last=t)}function hr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function mr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,l=n.first,c=!1;null!==l;){var s=l.expirationTime;if(s>i){var f=n.expirationTime;(0===f||f>s)&&(n.expirationTime=s),c||(c=!0,n.baseState=e)}else c||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=hr(l,r,e,o),u=!0):(s=hr(l,r,e,o))&&(e=u?a({},e,s):a(e,s),u=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(s=n.callbackList)&&(s=n.callbackList=[]),s.push(l));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||(t.updateQueue=null),c||(n.baseState=e),e}function vr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(t)}}var yr="function"==typeof Symbol&&Symbol.for,gr=yr?Symbol.for("react.element"):60103,br=yr?Symbol.for("react.call"):60104,Cr=yr?Symbol.for("react.return"):60105,wr=yr?Symbol.for("react.portal"):60106,Er=yr?Symbol.for("react.fragment"):60107,xr="function"==typeof Symbol&&Symbol.iterator;function kr(e){return null===e||void 0===e?null:"function"==typeof(e=xr&&e[xr]||e["@@iterator"])?e:null}var Or=Array.isArray;function Tr(e,t){var n=t.ref;if(null!==n&&"function"!=typeof n){if(t._owner){var r=void 0;(t=t._owner)&&(2!==t.tag&&d("110"),r=t.stateNode),r||d("147",n);var o=""+n;return null!==e&&null!==e.ref&&e.ref._stringRef===o?e.ref:((e=function(e){var t=r.refs===p?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,e)}"string"!=typeof n&&d("148"),t._owner||d("149",n)}return n}function Sr(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Pr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Zn(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=nr(n,e.internalContextTag,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=Tr(t,n),r.return=e,r):((r=er(n,e.internalContextTag,r)).ref=Tr(t,n),r.return=e,r)}function c(e,t,n,r){return null===t||7!==t.tag?((t=rr(n,e.internalContextTag,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function s(e,t,n,r){return null===t||9!==t.tag?((t=or(n,e.internalContextTag,r)).type=n.value,t.return=e,t):((t=o(t,null,r)).type=n.value,t.return=e,t)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ar(n,e.internalContextTag,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function p(e,t,n,r,a){return null===t||10!==t.tag?((t=tr(n,e.internalContextTag,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=nr(""+t,e.internalContextTag,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case gr:return t.type===Er?((t=tr(t.props.children,e.internalContextTag,n,t.key)).return=e,t):((n=er(t,e.internalContextTag,n)).ref=Tr(null,t),n.return=e,n);case br:return(t=rr(t,e.internalContextTag,n)).return=e,t;case Cr:return(n=or(t,e.internalContextTag,n)).type=t.value,n.return=e,n;case wr:return(t=ar(t,e.internalContextTag,n)).return=e,t}if(Or(t)||kr(t))return(t=tr(t,e.internalContextTag,n,null)).return=e,t;Sr(e,t)}return null}function m(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case gr:return n.key===o?n.type===Er?p(e,t,n.props.children,r,o):l(e,t,n,r):null;case br:return n.key===o?c(e,t,n,r):null;case Cr:return null===o?s(e,t,n,r):null;case wr:return n.key===o?f(e,t,n,r):null}if(Or(n)||kr(n))return null!==o?null:p(e,t,n,r,null);Sr(e,n)}return null}function v(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case gr:return e=e.get(null===r.key?n:r.key)||null,r.type===Er?p(t,e,r.props.children,o,r.key):l(t,e,r,o);case br:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case Cr:return s(t,e=e.get(n)||null,r,o);case wr:return f(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Or(r)||kr(r))return p(t,e=e.get(n)||null,r,o,null);Sr(t,r)}return null}function y(o,i,u,l){for(var c=null,s=null,f=i,p=i=0,d=null;null!==f&&p<u.length;p++){f.index>p?(d=f,f=null):d=f.sibling;var y=m(o,f,u[p],l);if(null===y){null===f&&(f=d);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,p),null===s?c=y:s.sibling=y,s=y,f=d}if(p===u.length)return n(o,f),c;if(null===f){for(;p<u.length;p++)(f=h(o,u[p],l))&&(i=a(f,i,p),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);p<u.length;p++)(d=v(f,o,p,u[p],l))&&(e&&null!==d.alternate&&f.delete(null===d.key?p:d.key),i=a(d,i,p),null===s?c=d:s.sibling=d,s=d);return e&&f.forEach(function(e){return t(o,e)}),c}function g(o,i,u,l){var c=kr(u);"function"!=typeof c&&d("150"),null==(u=c.call(u))&&d("151");for(var s=c=null,f=i,p=i=0,y=null,g=u.next();null!==f&&!g.done;p++,g=u.next()){f.index>p?(y=f,f=null):y=f.sibling;var b=m(o,f,g.value,l);if(null===b){f||(f=y);break}e&&f&&null===b.alternate&&t(o,f),i=a(b,i,p),null===s?c=b:s.sibling=b,s=b,f=y}if(g.done)return n(o,f),c;if(null===f){for(;!g.done;p++,g=u.next())null!==(g=h(o,g.value,l))&&(i=a(g,i,p),null===s?c=g:s.sibling=g,s=g);return c}for(f=r(o,f);!g.done;p++,g=u.next())null!==(g=v(f,o,p,g.value,l))&&(e&&null!==g.alternate&&f.delete(null===g.key?p:g.key),i=a(g,i,p),null===s?c=g:s.sibling=g,s=g);return e&&f.forEach(function(e){return t(o,e)}),c}return function(e,r,a,u){"object"==typeof a&&null!==a&&a.type===Er&&null===a.key&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case gr:e:{var c=a.key;for(l=r;null!==l;){if(l.key===c){if(10===l.tag?a.type===Er:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===Er?a.props.children:a.props,u)).ref=Tr(l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===Er?((r=tr(a.props.children,e.internalContextTag,u,a.key)).return=e,e=r):((u=er(a,e.internalContextTag,u)).ref=Tr(r,a),u.return=e,e=u)}return i(e);case br:e:{for(l=a.key;null!==r;){if(r.key===l){if(7===r.tag){n(e,r.sibling),(r=o(r,a,u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=rr(a,e.internalContextTag,u)).return=e,e=r}return i(e);case Cr:e:{if(null!==r){if(9===r.tag){n(e,r.sibling),(r=o(r,null,u)).type=a.value,r.return=e,e=r;break e}n(e,r)}(r=or(a,e.internalContextTag,u)).type=a.value,r.return=e,e=r}return i(e);case wr:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ar(a,e.internalContextTag,u)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),r=o(r,a,u)):(n(e,r),r=nr(a,e.internalContextTag,u)),r.return=e,i(e=r);if(Or(a))return y(e,r,a,u);if(kr(a))return g(e,r,a,u);if(l&&Sr(e,a),void 0===a)switch(e.tag){case 2:case 1:d("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var _r=Pr(!0),Nr=Pr(!1);function Mr(e,t,n,r,o){function a(e,t,n){var r=t.expirationTime;t.child=null===e?Nr(t,null,n,r):_r(t,e.child,n,r)}function i(e,t){var n=t.ref;null===n||e&&e.ref===n||(t.effectTag|=128)}function u(e,t,n,r){if(i(e,t),!n)return r&&Xn(t,!1),s(e,t);n=t.stateNode,Ht.current=t;var o=n.render();return t.effectTag|=1,a(e,t,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&Xn(t,!0),t.child}function l(e){var t=e.stateNode;t.pendingContext?Gn(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Gn(0,t.context,!1),g(e,t.containerInfo)}function s(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=Zn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Zn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function f(e,t){switch(t.tag){case 3:l(t);break;case 2:Qn(t);break;case 4:g(t,t.stateNode.containerInfo)}return null}var h=e.shouldSetTextContent,m=e.useSyncScheduling,v=e.shouldDeprioritizeSubtree,y=t.pushHostContext,g=t.pushHostContainer,b=n.enterHydrationState,C=n.resetHydrationState,w=n.tryToClaimNextHydratableInstance,E=(e=function(e,t,n,r){function o(e,t){t.updater=a,e.stateNode=t,t._reactInternalFiber=e}var a={isMounted:Bt,enqueueSetState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var a=t(n);dr(n,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,nextCallback:null,next:null}),e(n,a)},enqueueReplaceState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var a=t(n);dr(n,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,nextCallback:null,next:null}),e(n,a)},enqueueForceUpdate:function(n,r){n=n._reactInternalFiber,r=void 0===r?null:r;var o=t(n);dr(n,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,nextCallback:null,next:null}),e(n,o)}};return{adoptClassInstance:o,constructClassInstance:function(e,t){var n=e.type,r=qn(e),a=2===e.tag&&null!=e.type.contextTypes,i=a?Wn(e,r):p;return o(e,t=new n(t,i)),a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t},mountClassInstance:function(e,t){var n=e.alternate,r=e.stateNode,o=r.state||null,i=e.pendingProps;i||d("158");var u=qn(e);r.props=i,r.state=e.memoizedState=o,r.refs=p,r.context=Wn(e,u),null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=1),"function"==typeof r.componentWillMount&&(o=r.state,r.componentWillMount(),o!==r.state&&a.enqueueReplaceState(r,r.state,null),null!==(o=e.updateQueue)&&(r.state=mr(n,e,o,r,i,t))),"function"==typeof r.componentDidMount&&(e.effectTag|=4)},updateClassInstance:function(e,t,o){var i=t.stateNode;i.props=t.memoizedProps,i.state=t.memoizedState;var u=t.memoizedProps,l=t.pendingProps;l||null==(l=u)&&d("159");var s=i.context,f=qn(t);if(f=Wn(t,f),"function"!=typeof i.componentWillReceiveProps||u===l&&s===f||(s=i.state,i.componentWillReceiveProps(l,f),i.state!==s&&a.enqueueReplaceState(i,i.state,null)),s=t.memoizedState,o=null!==t.updateQueue?mr(e,t,t.updateQueue,i,l,o):s,!(u!==l||s!==o||zn.current||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),!1;var p=l;if(null===u||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)p=!0;else{var h=t.stateNode,m=t.type;p="function"==typeof h.shouldComponentUpdate?h.shouldComponentUpdate(p,o,f):!(m.prototype&&m.prototype.isPureReactComponent&&c(u,p)&&c(s,o))}return p?("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(l,o,f),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),n(t,l),r(t,o)),i.props=l,i.state=o,i.context=f,p}}}(r,o,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,x=e.constructClassInstance,k=e.mountClassInstance,O=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n)return f(0,t);switch(t.tag){case 0:null!==e&&d("155");var r=t.type,o=t.pendingProps,c=qn(t);return r=r(o,c=Wn(t,c)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render?(t.tag=2,o=Qn(t),E(t,r),k(t,n),t=u(e,t,!0,o)):(t.tag=1,a(e,t,r),t.memoizedProps=o,t=t.child),t;case 1:e:{if(o=t.type,n=t.pendingProps,r=t.memoizedProps,zn.current)null===n&&(n=r);else if(null===n||r===n){t=s(e,t);break e}o=o(n,r=Wn(t,r=qn(t))),t.effectTag|=1,a(e,t,o),t.memoizedProps=n,t=t.child}return t;case 2:return o=Qn(t),r=void 0,null===e?t.stateNode?d("153"):(x(t,t.pendingProps),k(t,n),r=!0):r=O(e,t,n),u(e,t,r,o);case 3:return l(t),null!==(o=t.updateQueue)?(r=t.memoizedState)===(o=mr(e,t,o,null,null,n))?(C(),t=s(e,t)):(r=o.element,c=t.stateNode,(null===e||null===e.child)&&c.hydrate&&b(t)?(t.effectTag|=2,t.child=Nr(t,null,r,n)):(C(),a(e,t,r)),t.memoizedState=o,t=t.child):(C(),t=s(e,t)),t;case 5:y(t),null===e&&w(t),o=t.type;var p=t.memoizedProps;return null===(r=t.pendingProps)&&(null===(r=p)&&d("154")),c=null!==e?e.memoizedProps:null,zn.current||null!==r&&p!==r?(p=r.children,h(o,r)?p=null:c&&h(o,c)&&(t.effectTag|=16),i(e,t),2147483647!==n&&!m&&v(o,r)?(t.expirationTime=2147483647,t=null):(a(e,t,p),t.memoizedProps=r,t=t.child)):t=s(e,t),t;case 6:return null===e&&w(t),null===(e=t.pendingProps)&&(e=t.memoizedProps),t.memoizedProps=e,null;case 8:t.tag=7;case 7:return o=t.pendingProps,zn.current?null===o&&(null===(o=e&&e.memoizedProps)&&d("154")):null!==o&&t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?Nr(t,t.stateNode,r,n):_r(t,t.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:e:{if(g(t,t.stateNode.containerInfo),o=t.pendingProps,zn.current)null===o&&(null==(o=e&&e.memoizedProps)&&d("154"));else if(null===o||t.memoizedProps===o){t=s(e,t);break e}null===e?t.child=_r(t,null,o,n):a(e,t,o),t.memoizedProps=o,t=t.child}return t;case 10:e:{if(n=t.pendingProps,zn.current)null===n&&(n=t.memoizedProps);else if(null===n||t.memoizedProps===n){t=s(e,t);break e}a(e,t,n),t.memoizedProps=n,t=t.child}return t;default:d("156")}},beginFailedWork:function(e,t,n){switch(t.tag){case 2:Qn(t);break;case 3:l(t);break;default:d("157")}return t.effectTag|=64,null===e?t.child=null:t.child!==e.child&&(t.child=e.child),0===t.expirationTime||t.expirationTime>n?f(0,t):(t.firstEffect=null,t.lastEffect=null,t.child=null===e?Nr(t,null,null,n):_r(t,e.child,null,n),2===t.tag&&(e=t.stateNode,t.memoizedProps=e.props,t.memoizedState=e.state),t.child)}}}var Ir={};function Rr(e){function t(e){ie=Q=!0;var t=e.stateNode;if(t.current===e&&d("177"),t.isReadyForCommit=!1,Ht.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var n=e.firstEffect}else n=e;else n=e.firstEffect;for(W(),ee=n;null!==ee;){var r=!1,o=void 0;try{for(;null!==ee;){var a=ee.effectTag;if(16&a&&j(ee),128&a){var i=ee.alternate;null!==i&&H(i)}switch(-242&a){case 2:D(ee),ee.effectTag&=-3;break;case 6:D(ee),ee.effectTag&=-3,L(ee.alternate,ee);break;case 4:L(ee.alternate,ee);break;case 8:ue=!0,A(ee),ue=!1}ee=ee.nextEffect}}catch(e){r=!0,o=e}r&&(null===ee&&d("178"),u(ee,o),null!==ee&&(ee=ee.nextEffect))}for(K(),t.current=e,ee=n;null!==ee;){n=!1,r=void 0;try{for(;null!==ee;){var l=ee.effectTag;if(36&l&&U(ee.alternate,ee),128&l&&F(ee),64&l)switch(o=ee,a=void 0,null!==te&&(a=te.get(o),te.delete(o),null==a&&null!==o.alternate&&(o=o.alternate,a=te.get(o),te.delete(o))),null==a&&d("184"),o.tag){case 2:o.stateNode.componentDidCatch(a.error,{componentStack:a.componentStack});break;case 3:null===oe&&(oe=a.error);break;default:d("157")}var c=ee.nextEffect;ee.nextEffect=null,ee=c}}catch(e){n=!0,r=e}n&&(null===ee&&d("178"),u(ee,r),null!==ee&&(ee=ee.nextEffect))}return Q=ie=!1,cr(e.stateNode),re&&(re.forEach(v),re=null),null!==oe&&(e=oe,oe=null,k(e)),0===(t=t.current.expirationTime)&&(ne=te=null),t}function n(e){for(;;){var t=R(e.alternate,e,Z),n=e.return,r=e.sibling,o=e;if(2147483647===Z||2147483647!==o.expirationTime){if(2!==o.tag&&3!==o.tag)var a=0;else a=null===(a=o.updateQueue)?0:a.expirationTime;for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){e.stateNode.isReadyForCommit=!0;break}e=n}return null}function r(e){var t=M(e.alternate,e,Z);return null===t&&(t=n(e)),Ht.current=null,t}function o(e){var t=I(e.alternate,e,Z);return null===t&&(t=n(e)),Ht.current=null,t}function a(e){if(null!==te){if(!(0===Z||Z>e))if(Z<=G)for(;null!==X;)X=l(X)?o(X):r(X);else for(;null!==X&&!x();)X=l(X)?o(X):r(X)}else if(!(0===Z||Z>e))if(Z<=G)for(;null!==X;)X=r(X);else for(;null!==X&&!x();)X=r(X)}function i(e,t){if(Q&&d("243"),Q=!0,e.isReadyForCommit=!1,e!==J||t!==Z||null===X){for(;-1<Un;)Ln[Un]=null,Un--;Bn=p,Vn.current=p,zn.current=!1,_(),Z=t,X=Zn((J=e).current,null,t)}var n=!1,r=null;try{a(t)}catch(e){n=!0,r=e}for(;n;){if(ae){oe=r;break}var i=X;if(null===i)ae=!0;else{var l=u(i,r);if(null===l&&d("183"),!ae){try{for(r=t,l=n=l;null!==i;){switch(i.tag){case 2:$n(i);break;case 5:P(i);break;case 3:S(i);break;case 4:S(i)}if(i===l||i.alternate===l)break;i=i.return}X=o(n),a(r)}catch(e){n=!0,r=e;continue}break}}}return t=oe,ae=Q=!1,oe=null,null!==t&&k(t),e.isReadyForCommit?e.current.alternate:null}function u(e,t){var n=Ht.current=null,r=!1,o=!1,a=null;if(3===e.tag)n=e,c(e)&&(ae=!0);else for(var i=e.return;null!==i&&null===n;){if(2===i.tag?"function"==typeof i.stateNode.componentDidCatch&&(r=!0,a=Vt(i),n=i,o=!0):3===i.tag&&(n=i),c(i)){if(ue||null!==re&&(re.has(i)||null!==i.alternate&&re.has(i.alternate)))return null;n=null,o=!1}i=i.return}if(null!==n){null===ne&&(ne=new Set),ne.add(n);var u="";i=e;do{e:switch(i.tag){case 0:case 1:case 2:case 5:var l=i._debugOwner,s=i._debugSource,f=Vt(i),p=null;l&&(p=Vt(l)),l=s,f="\n    in "+(f||"Unknown")+(l?" (at "+l.fileName.replace(/^.*[\\\/]/,"")+":"+l.lineNumber+")":p?" (created by "+p+")":"");break e;default:f=""}u+=f,i=i.return}while(i);i=u,e=Vt(e),null===te&&(te=new Map),t={componentName:e,componentStack:i,error:t,errorBoundary:r?n.stateNode:null,errorBoundaryFound:r,errorBoundaryName:a,willRetry:o},te.set(n,t);try{var d=t.error;d&&d.suppressReactErrorLogging||console.error(d)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}return ie?(null===re&&(re=new Set),re.add(n)):v(n),n}return null===oe&&(oe=t),null}function l(e){return null!==te&&(te.has(e)||null!==e.alternate&&te.has(e.alternate))}function c(e){return null!==ne&&(ne.has(e)||null!==e.alternate&&ne.has(e.alternate))}function s(){return 20*(1+((y()+100)/20|0))}function f(e){return 0!==Y?Y:Q?ie?1:Z:!q||1&e.internalContextTag?s():1}function h(e,t){return m(e,t)}function m(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!Q&&n===J&&t<Z&&(X=J=null,Z=0);var r=n,o=t;if(Ee>we&&d("185"),null===r.nextScheduledRoot)r.remainingExpirationTime=o,null===ce?(le=ce=r,r.nextScheduledRoot=r):(ce=ce.nextScheduledRoot=r).nextScheduledRoot=le;else{var a=r.remainingExpirationTime;(0===a||o<a)&&(r.remainingExpirationTime=o)}pe||(be?Ce&&E(de=r,he=1):1===o?w(1,null):g(o)),!Q&&n===J&&t<Z&&(X=J=null,Z=0)}e=e.return}}function v(e){m(e,1)}function y(){return G=2+((V()-$)/10|0)}function g(e){if(0!==se){if(e>se)return;B(fe)}var t=V()-$;se=e,fe=z(C,{timeout:10*(e-2)-t})}function b(){var e=0,t=null;if(null!==ce)for(var n=ce,r=le;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ce)&&d("244"),r===r.nextScheduledRoot){le=ce=r.nextScheduledRoot=null;break}if(r===le)le=o=r.nextScheduledRoot,ce.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ce){(ce=n).nextScheduledRoot=le,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ce)break;n=r,r=r.nextScheduledRoot}}null!==(n=de)&&n===t?Ee++:Ee=0,de=t,he=e}function C(e){w(0,e)}function w(e,t){for(ge=t,b();null!==de&&0!==he&&(0===e||he<=e)&&!me;)E(de,he),b();if(null!==ge&&(se=0,fe=-1),0!==he&&g(he),ge=null,me=!1,Ee=0,ve)throw e=ye,ye=null,ve=!1,e}function E(e,n){if(pe&&d("245"),pe=!0,n<=y()){var r=e.finishedWork;null!==r?(e.finishedWork=null,e.remainingExpirationTime=t(r)):(e.finishedWork=null,null!==(r=i(e,n))&&(e.remainingExpirationTime=t(r)))}else null!==(r=e.finishedWork)?(e.finishedWork=null,e.remainingExpirationTime=t(r)):(e.finishedWork=null,null!==(r=i(e,n))&&(x()?e.finishedWork=r:e.remainingExpirationTime=t(r)));pe=!1}function x(){return!(null===ge||ge.timeRemaining()>xe)&&(me=!0)}function k(e){null===de&&d("246"),de.remainingExpirationTime=0,ve||(ve=!0,ye=e)}var O=function(e){function t(e){return e===Ir&&d("174"),e}var n=e.getChildHostContext,r=e.getRootHostContext,o={current:Ir},a={current:Ir},i={current:Ir};return{getHostContext:function(){return t(o.current)},getRootHostContainer:function(){return t(i.current)},popHostContainer:function(e){Fn(o),Fn(a),Fn(i)},popHostContext:function(e){a.current===e&&(Fn(o),Fn(a))},pushHostContainer:function(e,t){Hn(i,t),t=r(t),Hn(a,e),Hn(o,t)},pushHostContext:function(e){var r=t(i.current),u=t(o.current);u!==(r=n(u,e.type,r))&&(Hn(a,e),Hn(o,r))},resetHostContainer:function(){o.current=Ir,i.current=Ir}}}(e),T=function(e){function t(e,t){var n=new Jn(5,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=i(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,i=e.canHydrateTextInstance,u=e.getNextHydratableSibling,l=e.getFirstHydratableChild,c=e.hydrateInstance,s=e.hydrateTextInstance,f=null,p=null,h=!1;return{enterHydrationState:function(e){return p=l(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){p=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=p;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,p)}f=e,p=l(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return s(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=p;n;)t(e,n),n=u(n);return r(e),p=f?u(e.stateNode):null,!0}}}(e),S=O.popHostContainer,P=O.popHostContext,_=O.resetHostContainer,N=Mr(e,O,T,h,f),M=N.beginWork,I=N.beginFailedWork,R=function(e,t,n){function r(e){e.effectTag|=4}var o=e.createInstance,a=e.createTextInstance,i=e.appendInitialChild,u=e.finalizeInitialChildren,l=e.prepareUpdate,c=e.persistence,s=t.getRootHostContainer,f=t.popHostContext,p=t.getHostContext,h=t.popHostContainer,m=n.prepareToHydrateHostInstance,v=n.prepareToHydrateHostTextInstance,y=n.popHydrationState,g=void 0,b=void 0,C=void 0;return e.mutation?(g=function(){},b=function(e,t,n){(t.updateQueue=n)&&r(t)},C=function(e,t,n,o){n!==o&&r(t)}):d(c?"235":"236"),{completeWork:function(e,t,n){var c=t.pendingProps;switch(null===c?c=t.memoizedProps:2147483647===t.expirationTime&&2147483647!==n||(t.pendingProps=null),t.tag){case 1:return null;case 2:return $n(t),null;case 3:return h(t),Fn(zn),Fn(Vn),(c=t.stateNode).pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==e&&null!==e.child||(y(t),t.effectTag&=-3),g(t),null;case 5:f(t),n=s();var w=t.type;if(null!==e&&null!=t.stateNode){var E=e.memoizedProps,x=t.stateNode,k=p();x=l(x,w,E,c,n,k),b(e,t,x,w,E,c,n),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!c)return null===t.stateNode&&d("166"),null;if(e=p(),y(t))m(t,n,e)&&r(t);else{e=o(w,c,n,e,t);e:for(E=t.child;null!==E;){if(5===E.tag||6===E.tag)i(e,E.stateNode);else if(4!==E.tag&&null!==E.child){E.child.return=E,E=E.child;continue}if(E===t)break;for(;null===E.sibling;){if(null===E.return||E.return===t)break e;E=E.return}E.sibling.return=E.return,E=E.sibling}u(e,w,c,n)&&r(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)C(e,t,e.memoizedProps,c);else{if("string"!=typeof c)return null===t.stateNode&&d("166"),null;e=s(),n=p(),y(t)?v(t)&&r(t):t.stateNode=a(c,e,n,t)}return null;case 7:(c=t.memoizedProps)||d("165"),t.tag=8,w=[];e:for((E=t.stateNode)&&(E.return=t);null!==E;){if(5===E.tag||6===E.tag||4===E.tag)d("247");else if(9===E.tag)w.push(E.type);else if(null!==E.child){E.child.return=E,E=E.child;continue}for(;null===E.sibling;){if(null===E.return||E.return===t)break e;E=E.return}E.sibling.return=E.return,E=E.sibling}return c=(E=c.handler)(c.props,w),t.child=_r(t,null!==e?e.child:null,c,n),t.child;case 8:return t.tag=7,null;case 9:case 10:return null;case 4:return h(t),g(t),null;case 0:d("167");default:d("156")}}}}(e,O,T).completeWork,j=(O=function(e,t){function n(e){var n=e.ref;if(null!==n)try{n(null)}catch(n){t(e,n)}}function r(e){switch(sr(e),e.tag){case 2:n(e);var r=e.stateNode;if("function"==typeof r.componentWillUnmount)try{r.props=e.memoizedProps,r.state=e.memoizedState,r.componentWillUnmount()}catch(n){t(e,n)}break;case 5:n(e);break;case 7:o(e.stateNode);break;case 4:l&&i(e)}}function o(e){for(var t=e;;)if(r(t),null===t.child||l&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function a(e){return 5===e.tag||3===e.tag||4===e.tag}function i(e){for(var t=e,n=!1,a=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:a=n.stateNode,i=!1;break e;case 3:case 4:a=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)o(t),i?b(a,t.stateNode):g(a,t.stateNode);else if(4===t.tag?a=t.stateNode.containerInfo:r(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var u=e.getPublicInstance,l=e.mutation;e=e.persistence,l||d(e?"235":"236");var c=l.commitMount,s=l.commitUpdate,f=l.resetTextContent,p=l.commitTextUpdate,h=l.appendChild,m=l.appendChildToContainer,v=l.insertBefore,y=l.insertInContainerBefore,g=l.removeChild,b=l.removeChildFromContainer;return{commitResetTextContent:function(e){f(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(a(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(f(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||a(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?y(t,o.stateNode,n):v(t,o.stateNode,n):r?m(t,o.stateNode):h(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){i(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&s(n,a,o,e,r,t)}break;case 6:null===t.stateNode&&d("162"),n=t.memoizedProps,p(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(e,t){switch(t.tag){case 2:var n=t.stateNode;if(4&t.effectTag)if(null===e)n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidMount();else{var r=e.memoizedProps;e=e.memoizedState,n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidUpdate(r,e)}null!==(t=t.updateQueue)&&vr(t,n);break;case 3:null!==(n=t.updateQueue)&&vr(n,null!==t.child?t.child.stateNode:null);break;case 5:n=t.stateNode,null===e&&4&t.effectTag&&c(n,t.type,t.memoizedProps,t);break;case 6:case 4:break;default:d("163")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:t(u(n));break;default:t(n)}}},commitDetachRef:function(e){null!==(e=e.ref)&&e(null)}}}(e,u)).commitResetTextContent,D=O.commitPlacement,A=O.commitDeletion,L=O.commitWork,U=O.commitLifeCycles,F=O.commitAttachRef,H=O.commitDetachRef,V=e.now,z=e.scheduleDeferredCallback,B=e.cancelDeferredCallback,q=e.useSyncScheduling,W=e.prepareForCommit,K=e.resetAfterCommit,$=V(),G=2,Y=0,Q=!1,X=null,J=null,Z=0,ee=null,te=null,ne=null,re=null,oe=null,ae=!1,ie=!1,ue=!1,le=null,ce=null,se=0,fe=-1,pe=!1,de=null,he=0,me=!1,ve=!1,ye=null,ge=null,be=!1,Ce=!1,we=1e3,Ee=0,xe=1;return{computeAsyncExpiration:s,computeExpirationForFiber:f,scheduleWork:h,batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||pe||w(1,null)}},unbatchedUpdates:function(e){if(be&&!Ce){Ce=!0;try{return e()}finally{Ce=!1}}return e()},flushSync:function(e){var t=be;be=!0;try{e:{var n=Y;Y=1;try{var r=e();break e}finally{Y=n}r=void 0}return r}finally{be=t,pe&&d("187"),w(1,null)}},deferredUpdates:function(e){var t=Y;Y=s();try{return e()}finally{Y=t}}}}function jr(e){function t(e){return null===(e=function(e){if(!(e=Wt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode}var n=e.getPublicInstance,r=(e=Rr(e)).computeAsyncExpiration,o=e.computeExpirationForFiber,i=e.scheduleWork;return{createContainer:function(e,t){var n=new Jn(3,null,0);return e={current:n,containerInfo:e,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:t,nextScheduledRoot:null},n.stateNode=e},updateContainer:function(e,t,n,a){var u=t.current;if(n){var l;n=n._reactInternalFiber;e:{for(2===zt(n)&&2===n.tag||d("170"),l=n;3!==l.tag;){if(Kn(l)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}(l=l.return)||d("171")}l=l.stateNode.context}n=Kn(n)?Yn(n,l):l}else n=p;null===t.context?t.context=n:t.pendingContext=n,t=void 0===(t=a)?null:t,dr(u,{expirationTime:a=null!=e&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent?r():o(u),partialState:{element:e},callback:t,isReplace:!1,isForced:!1,nextCallback:null,next:null}),i(u,a)},batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:t,findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Wt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var n=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);ir=lr(function(e){return t.onCommitFiberRoot(n,e)}),ur=lr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return t(e)},findFiberByHostInstance:function(e){return n?n(e):null}}))}}}var Dr=Object.freeze({default:jr}),Ar=Dr&&jr||Dr,Lr=Ar.default?Ar.default:Ar;var Ur="object"==typeof performance&&"function"==typeof performance.now,Fr=void 0;Fr=Ur?function(){return performance.now()}:function(){return Date.now()};var Hr=void 0,Vr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var zr,Br=null,qr=!1,Wr=-1,Kr=!1,$r=0,Gr=33,Yr=33;zr=Ur?{didTimeout:!1,timeRemaining:function(){var e=$r-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=$r-Date.now();return 0<e?e:0}};var Qr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Qr){if(qr=!1,e=Fr(),0>=$r-e){if(!(-1!==Wr&&Wr<=e))return void(Kr||(Kr=!0,requestAnimationFrame(Xr)));zr.didTimeout=!0}else zr.didTimeout=!1;Wr=-1,e=Br,Br=null,null!==e&&e(zr)}},!1);var Xr=function(e){Kr=!1;var t=e-$r+Yr;t<Yr&&Gr<Yr?(8>t&&(t=8),Yr=t<Gr?Gr:t):Gr=t,$r=e+Yr,qr||(qr=!0,window.postMessage(Qr,"*"))};Hr=function(e,t){return Br=e,null!=t&&"number"==typeof t.timeout&&(Wr=Fr()+t.timeout),Kr||(Kr=!0,requestAnimationFrame(Xr)),0},Vr=function(){Br=null,qr=!1,Wr=-1}}else Hr=window.requestIdleCallback,Vr=window.cancelIdleCallback;else Hr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0}})})},Vr=function(e){clearTimeout(e)};var Jr=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Zr={},eo={};function to(e,t,n){var r=b(t);if(r&&g(t,n)){var o=r.mutationMethod;o?o(e,n):null==n||r.hasBooleanValue&&!n||r.hasNumericValue&&isNaN(n)||r.hasPositiveNumericValue&&1>n||r.hasOverloadedBooleanValue&&!1===n?ro(e,t):r.mustUseProperty?e[r.propertyName]=n:(t=r.attributeName,(o=r.attributeNamespace)?e.setAttributeNS(o,t,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===n?e.setAttribute(t,""):e.setAttribute(t,""+n))}else no(e,t,g(t,n)?n:null)}function no(e,t,n){(function(e){return!!eo.hasOwnProperty(e)||!Zr.hasOwnProperty(e)&&(Jr.test(e)?eo[e]=!0:(Zr[e]=!0,!1))})(t)&&(null==n?e.removeAttribute(t):e.setAttribute(t,""+n))}function ro(e,t){var n=b(t);n?(t=n.mutationMethod)?t(e,void 0):n.mustUseProperty?e[n.propertyName]=!n.hasBooleanValue&&"":e.removeAttribute(n.attributeName):e.removeAttribute(t)}function oo(e,t){var n=t.value,r=t.checked;return a({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked})}function ao(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function io(e,t){null!=(t=t.checked)&&to(e,"checked",t)}function uo(e,t){io(e,t);var n=t.value;null!=n?0===n&&""===e.value?e.value="0":"number"===t.type?(n!=(t=parseFloat(e.value)||0)||n==t&&e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n):(null==t.value&&null!=t.defaultValue&&e.defaultValue!==""+t.defaultValue&&(e.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked))}function lo(e,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":e.value="",e.value=e.defaultValue;break;default:e.value=e.value}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function co(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function so(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function fo(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function po(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ho(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function mo(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function vo(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var yo="http://www.w3.org/1999/xhtml",go="http://www.w3.org/2000/svg";function bo(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Co(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?bo(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var wo,Eo=void 0,xo=(wo=function(e,t){if(e.namespaceURI!==go||"innerHTML"in e)e.innerHTML=t;else{for((Eo=Eo||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Eo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return wo(e,t)})}:wo);function ko(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Oo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},To=["Webkit","ms","Moz","O"];function So(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||Oo.hasOwnProperty(o)&&Oo[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Oo).forEach(function(e){To.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Oo[t]=Oo[e]})});var Po=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function _o(e,t,n){t&&(Po[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",n()))}function No(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Mo=yo,Io=i.thatReturns("");function Ro(e,t){var n=fn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=B[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Jt("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Jt("topFocus","focus",e),Jt("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(ht("cancel",!0)&&Jt("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(ht("close",!0)&&Jt("topClose","close",e),n.topClose=!0):un.hasOwnProperty(o)&&Xt(o,un[o],e),n[o]=!0)}}var jo={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function Do(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Mo&&(r=bo(e)),r===Mo?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Ao(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Lo(e,t,n,r){var o=No(t,n);switch(t){case"iframe":case"object":Xt("topLoad","load",e);var u=n;break;case"video":case"audio":for(u in jo)jo.hasOwnProperty(u)&&Xt(u,jo[u],e);u=n;break;case"source":Xt("topError","error",e),u=n;break;case"img":case"image":Xt("topError","error",e),Xt("topLoad","load",e),u=n;break;case"form":Xt("topReset","reset",e),Xt("topSubmit","submit",e),u=n;break;case"details":Xt("topToggle","toggle",e),u=n;break;case"input":ao(e,n),u=oo(e,n),Xt("topInvalid","invalid",e),Ro(r,"onChange");break;case"option":u=co(e,n);break;case"select":fo(e,n),u=a({},n,{value:void 0}),Xt("topInvalid","invalid",e),Ro(r,"onChange");break;case"textarea":ho(e,n),u=po(e,n),Xt("topInvalid","invalid",e),Ro(r,"onChange");break;default:u=n}_o(t,u,Io);var l,c=u;for(l in c)if(c.hasOwnProperty(l)){var s=c[l];"style"===l?So(e,s):"dangerouslySetInnerHTML"===l?null!=(s=s?s.__html:void 0)&&xo(e,s):"children"===l?"string"==typeof s?("textarea"!==t||""!==s)&&ko(e,s):"number"==typeof s&&ko(e,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(z.hasOwnProperty(l)?null!=s&&Ro(r,l):o?no(e,l,s):null!=s&&to(e,l,s))}switch(t){case"input":vt(e),lo(e,n);break;case"textarea":vt(e),vo(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?so(e,!!n.multiple,t,!1):null!=n.defaultValue&&so(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=i)}}function Uo(e,t,n,r,o){var u,l,c=null;switch(t){case"input":n=oo(e,n),r=oo(e,r),c=[];break;case"option":n=co(e,n),r=co(e,r),c=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),c=[];break;case"textarea":n=po(e,n),r=po(e,r),c=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=i)}for(u in _o(t,r,Io),e=null,n)if(!r.hasOwnProperty(u)&&n.hasOwnProperty(u)&&null!=n[u])if("style"===u)for(l in t=n[u])t.hasOwnProperty(l)&&(e||(e={}),e[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(z.hasOwnProperty(u)?c||(c=[]):(c=c||[]).push(u,null));for(u in r){var s=r[u];if(t=null!=n?n[u]:void 0,r.hasOwnProperty(u)&&s!==t&&(null!=s||null!=t))if("style"===u)if(t){for(l in t)!t.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(e||(e={}),e[l]="");for(l in s)s.hasOwnProperty(l)&&t[l]!==s[l]&&(e||(e={}),e[l]=s[l])}else e||(c||(c=[]),c.push(u,e)),e=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,t=t?t.__html:void 0,null!=s&&t!==s&&(c=c||[]).push(u,""+s)):"children"===u?t===s||"string"!=typeof s&&"number"!=typeof s||(c=c||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(z.hasOwnProperty(u)?(null!=s&&Ro(o,u),c||t===s||(c=[])):(c=c||[]).push(u,s))}return e&&(c=c||[]).push("style",e),c}function Fo(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&io(e,o),No(n,r),r=No(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],u=t[a+1];"style"===i?So(e,u):"dangerouslySetInnerHTML"===i?xo(e,u):"children"===i?ko(e,u):r?null!=u?no(e,i,u):e.removeAttribute(i):null!=u?to(e,i,u):ro(e,i)}switch(n){case"input":uo(e,o);break;case"textarea":mo(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?so(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?so(e,!!o.multiple,o.defaultValue,!0):so(e,!!o.multiple,o.multiple?[]:"",!1))}}function Ho(e,t,n,r,o){switch(t){case"iframe":case"object":Xt("topLoad","load",e);break;case"video":case"audio":for(var a in jo)jo.hasOwnProperty(a)&&Xt(a,jo[a],e);break;case"source":Xt("topError","error",e);break;case"img":case"image":Xt("topError","error",e),Xt("topLoad","load",e);break;case"form":Xt("topReset","reset",e),Xt("topSubmit","submit",e);break;case"details":Xt("topToggle","toggle",e);break;case"input":ao(e,n),Xt("topInvalid","invalid",e),Ro(o,"onChange");break;case"select":fo(e,n),Xt("topInvalid","invalid",e),Ro(o,"onChange");break;case"textarea":ho(e,n),Xt("topInvalid","invalid",e),Ro(o,"onChange")}for(var u in _o(t,n,Io),r=null,n)n.hasOwnProperty(u)&&(a=n[u],"children"===u?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):z.hasOwnProperty(u)&&null!=a&&Ro(o,u));switch(t){case"input":vt(e),lo(e,n);break;case"textarea":vt(e),vo(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=i)}return r}function Vo(e,t){return e.nodeValue!==t}var zo=Object.freeze({createElement:Do,createTextNode:Ao,setInitialProperties:Lo,diffProperties:Uo,updateProperties:Fo,diffHydratedProperties:Ho,diffHydratedText:Vo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(uo(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=he(r);o||d("90"),yt(r),uo(r,o)}}}break;case"textarea":mo(e,n);break;case"select":null!=(t=n.value)&&so(e,!!n.multiple,t,!1)}}});rt.injectFiberControlledHostComponent(zo);var Bo=null,qo=null;function Wo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}var Ko=Lr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Co(null,"");break;default:e=Co(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Co(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){Bo=Gt;var e=l();if(hn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,u=-1,c=0,s=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(i=a+r),f!==o||0!==n&&3!==f.nodeType||(u=a+n),3===f.nodeType&&(a+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++c===r&&(i=a),p===o&&++s===n&&(u=a),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===i||-1===u?null:{start:i,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;qo={focusedElem:e,selectionRange:t},Qt(!1)},resetAfterCommit:function(){var e=qo,t=l(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&s(document.documentElement,n)){if(hn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[Se()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=dn(n,e);var a=dn(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(f(n),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}qo=null,Qt(Bo),Bo=null},createInstance:function(e,t,n,r,o){return(e=Do(e,t,n,r))[se]=o,e[fe]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){Lo(e,t,n,r);e:{switch(t){case"button":case"input":case"select":case"textarea":e=!!n.autoFocus;break e}e=!1}return e},prepareUpdate:function(e,t,n,r,o){return Uo(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=Ao(e,t))[se]=r,e},now:Fr,mutation:{commitMount:function(e){e.focus()},commitUpdate:function(e,t,n,r,o){e[fe]=o,Fo(e,t,n,r,o)},resetTextContent:function(e){e.textContent=""},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[se]=a,e[fe]=n,Ho(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[se]=n,Vo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Hr,cancelDeferredCallback:Vr,useSyncScheduling:!0});function $o(e,t,n,r,o){Wo(n)||d("200");var a=n._reactRootContainer;if(a)Ko.updateContainer(t,a,e,o);else{if(!(r=r||function(e){return!(!(e=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))}(n)))for(a=void 0;a=n.lastChild;)n.removeChild(a);var i=Ko.createContainer(n,r);a=n._reactRootContainer=i,Ko.unbatchedUpdates(function(){Ko.updateContainer(t,i,e,o)})}return Ko.getPublicRootInstance(a)}function Go(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Wo(t)||d("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wr,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}function Yo(e,t){this._reactRootContainer=Ko.createContainer(e,t)}ut=Ko.batchedUpdates,Yo.prototype.render=function(e,t){Ko.updateContainer(e,this._reactRootContainer,null,t)},Yo.prototype.unmount=function(e){Ko.updateContainer(null,this._reactRootContainer,null,e)};var Qo={createPortal:Go,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return Ko.findHostInstance(t);"function"==typeof e.render?d("188"):d("213",Object.keys(e))},hydrate:function(e,t,n){return $o(null,e,t,!0,n)},render:function(e,t,n){return $o(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&d("38"),$o(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Wo(e)||d("40"),!!e._reactRootContainer&&(Ko.unbatchedUpdates(function(){$o(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:Go,unstable_batchedUpdates:ct,unstable_deferredUpdates:Ko.deferredUpdates,flushSync:Ko.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:le,EventPluginRegistry:K,EventPropagators:Oe,ReactControlledComponent:it,ReactDOMComponentTree:me,ReactDOMEventListener:en}};Ko.injectIntoDevTools({findFiberByHostInstance:pe,bundleType:0,version:"16.2.0",rendererPackageName:"react-dom"});var Xo=Object.freeze({default:Qo}),Jo=Xo&&Qo||Xo;e.exports=Jo.default?Jo.default:Jo},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(44)},function(e,t,n){"use strict";var r=n(13),o=n(12),a=n(4),i="function"==typeof Symbol&&Symbol.for,u=i?Symbol.for("react.element"):60103,l=i?Symbol.for("react.call"):60104,c=i?Symbol.for("react.return"):60105,s=i?Symbol.for("react.portal"):60106,f=i?Symbol.for("react.fragment"):60107,p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function m(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}function v(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}function y(){}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&d("85"),this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=m.prototype;var g=v.prototype=new y;function b(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}g.constructor=v,r(g,m.prototype),g.isPureReactComponent=!0;var C=b.prototype=new y;C.constructor=b,r(C,m.prototype),C.unstable_isAsyncReactComponent=!0,C.render=function(){return this.props.children};var w={current:null},E=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:u,type:e,key:a,ref:i,props:o,_owner:w.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var T=/\/+/g,S=[];function P(e,t,n,r){if(S.length){var o=S.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function _(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>S.length&&S.push(e)}function N(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case u:case l:case c:case s:a=!0}}if(a)return n(r,e,""===t?"."+M(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var f=t+M(o=e[i],i);a+=N(o,f,n,r)}else if(null===e||void 0===e?f=null:f="function"==typeof(f=p&&e[p]||e["@@iterator"])?f:null,"function"==typeof f)for(e=f.call(e),i=0;!(o=e.next()).done;)a+=N(o=o.value,f=t+M(o,i++),n,r);else"object"===o&&d("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function R(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,a.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function j(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(T,"$&/")+"/"),t=P(t,a,r,o),null==e||N(e,"",R,t),_(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=P(null,null,t,n),null==e||N(e,"",I,t),_(t)},count:function(e){return null==e?0:N(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return j(e,t,null,a.thatReturnsArgument),t},only:function(e){return O(e)||d("143"),e}},Component:m,PureComponent:v,unstable_AsyncComponent:b,Fragment:f,createElement:k,cloneElement:function(e,t,n){var o=r({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)E.call(t,s)&&!x.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:u,type:e.type,key:a,ref:i,props:o,_owner:l}},createFactory:function(e){var t=k.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},A=Object.freeze({default:D}),L=A&&D||A;e.exports=L.default?L.default:L},function(e,t,n){"use strict";var r=s(n(1)),o=s(n(45)),a=n(3),i=n(2),u=s(n(31)),l=s(n(25)),c=s(n(17));function s(e){return e&&e.__esModule?e:{default:e}}var f=(0,i.applyMiddleware)(u.default)(i.createStore);o.default.render(r.default.createElement(a.Provider,{store:f(c.default)},r.default.createElement(l.default,null)),document.getElementById("app"))},function(e,t,n){e.exports=n(47)},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(11))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9jcmVhdGVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvY29tYmluZVJlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9iaW5kQWN0aW9uQ3JlYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL2FwcGx5TWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNhcmd1bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvcmVkdWNlcl9kYXRhLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvRmllbGQuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL0hlYWRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL21haW4uc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9tYWluLnNjc3M/OWQ0MiIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9BcHAuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmtleXNpbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLl9iYXNlZm9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNwbGFpbm9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmx1eC1zdGFuZGFyZC1hY3Rpb24vbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1wcm9taXNlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9mb2N1c05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjcmVhdGVTdG9yZV9BY3Rpb25UeXBlcyIsIklOSVQiLCJjcmVhdGVTdG9yZV9jcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJ1bmRlZmluZWQiLCJFcnJvciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInNsaWNlIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsInB1c2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkaXNwYXRjaCIsImFjdGlvbiIsImlzUGxhaW5PYmplY3QiLCJ0eXBlIiwibGlzdGVuZXJzIiwibGVuZ3RoIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsImVzIiwiX3JlZiIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJUeXBlRXJyb3IiLCJvYnNlcnZlU3RhdGUiLCJuZXh0IiwidW5zdWJzY3JpYmUiLCJ0aGlzIiwiY29tYmluZVJlZHVjZXJzX2dldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwia2V5IiwiYWN0aW9uVHlwZSIsInRvU3RyaW5nIiwiY29tYmluZVJlZHVjZXJzX2NvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJrZXlzIiwiZmluYWxSZWR1Y2VycyIsImZpbmFsUmVkdWNlcktleXMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZm9yRWFjaCIsIk1hdGgiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJzcGxpdCIsImpvaW4iLCJjb21iaW5lUmVkdWNlcnNfYXNzZXJ0UmVkdWNlclNoYXBlIiwiZSIsInN0YXRlIiwiYXJndW1lbnRzIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsIl9pIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJhcHBseSIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJBcnJheSIsImFyZyIsInJlZHVjZSIsImEiLCJiIiwiYXBwbHlNaWRkbGV3YXJlX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJhcHBseU1pZGRsZXdhcmVfYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJjcmVhdGVTdG9yZSIsImNoYWluIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwibWFwIiwibWlkZGxld2FyZSIsIlByb3BUeXBlc19zdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInNoYXBlIiwidHJ5U3Vic2NyaWJlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJQcm9wVHlwZXNfc3RvcmVTaGFwZSIsIlByb3ZpZGVyX2NyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJzdWJzY3JpcHRpb25LZXkiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJwcm9wcyIsImNvbnRleHQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiUHJvdmlkZXJfY2xhc3NDYWxsQ2hlY2siLCJfdGhpcyIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIlByb3ZpZGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJQcm92aWRlcl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsInJlbmRlciIsInJlYWN0Iiwib25seSIsImNoaWxkcmVuIiwicHJvcFR5cGVzIiwiZWxlbWVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29tcG9uZW50c19Qcm92aWRlciIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsIlN1YnNjcmlwdGlvbl9jbGFzc0NhbGxDaGVjayIsImFkZE5lc3RlZFN1YiIsIkJvb2xlYW4iLCJjdXJyZW50IiwiY2xlYXIiLCJjb25uZWN0QWR2YW5jZWRfZXh0ZW5kcyIsImNvbm5lY3RBZHZhbmNlZF9ob3RSZWxvYWRpbmdWZXJzaW9uIiwiY29ubmVjdEFkdmFuY2VkX2R1bW15U3RhdGUiLCJjb25uZWN0QWR2YW5jZWRfbm9vcCIsImNvbm5lY3RBZHZhbmNlZF9jb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfY29udGV4dFR5cGVzIiwiX2NoaWxkQ29udGV4dFR5cGVzIiwiX3JlZiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZiRzaG91bGRIYW5kbGVTdGF0Iiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZiRzdG9yZUtleSIsIl9yZWYkd2l0aFJlZiIsIndpdGhSZWYiLCJjb25uZWN0T3B0aW9ucyIsIm9iaiIsImNvbm5lY3RBZHZhbmNlZF9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInZlcnNpb24iLCJjb250ZXh0VHlwZXMiLCJXcmFwcGVkQ29tcG9uZW50IiwiYnJvd3Nlcl9kZWZhdWx0IiwiSlNPTiIsInN0cmluZ2lmeSIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsImNvbm5lY3RBZHZhbmNlZF9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3RBZHZhbmNlZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwicmVuZGVyQ291bnQiLCJwcm9wc01vZGUiLCJzZXRXcmFwcGVkSW5zdGFuY2UiLCJiaW5kIiwiaW5pdFNlbGVjdG9yIiwiaW5pdFN1YnNjcmlwdGlvbiIsImNvbm5lY3RBZHZhbmNlZF9pbmhlcml0cyIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudERpZE1vdW50Iiwic2VsZWN0b3IiLCJydW4iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJmb3JjZVVwZGF0ZSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldFdyYXBwZWRJbnN0YW5jZSIsIndyYXBwZWRJbnN0YW5jZSIsInJlZiIsInNvdXJjZVNlbGVjdG9yIiwiZXJyb3IiLCJjb25uZWN0QWR2YW5jZWRfbWFrZVNlbGVjdG9yU3RhdGVmdWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJzZXRTdGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfZGVmYXVsdCIsImhhc093biIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwiY29ubmVjdF9tYXBEaXNwYXRjaFRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInNlbGVjdG9yRmFjdG9yeV9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbm5lY3RfZXh0ZW5kcyIsImNvbm5lY3RfbWF0Y2giLCJmYWN0b3JpZXMiLCJyZXN1bHQiLCJjb25uZWN0X3N0cmljdEVxdWFsIiwiY29ubmVjdF9jb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJHB1cmUiLCJfcmVmMiRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYyJGFyZU93blByb3BzRXF1YSIsIl9yZWYyJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYyJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNvbm5lY3Rfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZiIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsIkNPTVBfTU9WRSIsIlBMQVlFUl9NT1ZFIiwiUExBWUVSX1NURVAiLCJHQU1FX09WRVIiLCJHQU1FX09WRVJfUkVNT1ZFIiwiQ0hBTkdFX0RJRkZJQ1VMVFkiLCJMVkwiLCJjb25mIiwiY29tcE1vdmUiLCJwbGF5ZXJNb3ZlIiwicGxheWVyU3RlcCIsImdhbWVPdmVyIiwiZ2FtZU92ZXJSZW1vdmUiLCJjaGFuZ2VEaWZmaWN1bHR5IiwibHZsIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwid2luZG93IiwiZ2xvYmFsIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9yb290X2ZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwiRnVuY3Rpb24iLCJTeW1ib2wiLCJfZ2V0UmF3VGFnX29iamVjdFByb3RvIiwiX2dldFJhd1RhZ19oYXNPd25Qcm9wZXJ0eSIsIl9nZXRSYXdUYWdfbmF0aXZlT2JqZWN0VG9TdHJpbmciLCJfZ2V0UmF3VGFnX3N5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJfZ2V0UmF3VGFnIiwiaXNPd24iLCJ0YWciLCJ1bm1hc2tlZCIsIl9vYmplY3RUb1N0cmluZ19uYXRpdmVPYmplY3RUb1N0cmluZyIsIl9vYmplY3RUb1N0cmluZyIsIl9iYXNlR2V0VGFnX251bGxUYWciLCJfYmFzZUdldFRhZ191bmRlZmluZWRUYWciLCJfYmFzZUdldFRhZ19zeW1Ub1N0cmluZ1RhZyIsIl9iYXNlR2V0VGFnIiwiX2dldFByb3RvdHlwZSIsInRyYW5zZm9ybSIsIl9vdmVyQXJnIiwiZ2V0UHJvdG90eXBlT2YiLCJsb2Rhc2hfZXNfaXNPYmplY3RMaWtlIiwiaXNQbGFpbk9iamVjdF9vYmplY3RUYWciLCJpc1BsYWluT2JqZWN0X2Z1bmNQcm90byIsImlzUGxhaW5PYmplY3Rfb2JqZWN0UHJvdG8iLCJpc1BsYWluT2JqZWN0X2Z1bmNUb1N0cmluZyIsImlzUGxhaW5PYmplY3RfaGFzT3duUHJvcGVydHkiLCJpc1BsYWluT2JqZWN0X29iamVjdEN0b3JTdHJpbmciLCJwcm90byIsIkN0b3IiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYXJnc1RhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJvYmplY3RQcm90byIsIm9iamVjdFRvU3RyaW5nIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpc09iamVjdExpa2UiLCJpc0xlbmd0aCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzQXJyYXlMaWtlIiwiaXNBcnJheUxpa2VPYmplY3QiLCJnIiwiZXZhbCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInZhbCIsInRvT2JqZWN0Iiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsIlJFQUNUX1NUQVRJQ1MiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImNvbmNhdCIsImRlc2NyaXB0b3IiLCJmYWN0b3J5IiwiZGVmYXVsdFN0YXRlIiwibmV3U3RhdGUiLCJwYXJzZSIsIm5ld1NlcSIsInNlcXVlbmNlIiwicG9wIiwiZmxvb3IiLCJuZXdSb3VuZCIsInJvdW5kIiwicGxheWVyc1N0ZXAiLCJwbGF5ZXJzVHVybiIsImNvbXBUdXJuIiwic3RhdHVzIiwiX3JlZHV4IiwiX3JlZHVjZXJfZGF0YSIsInJvb3RSZWR1Y2VyIiwiY29tYmluZVJlZHVjZXJzIiwiZGF0YSIsIl9yZWFjdCIsIl9yZWFjdFJlZHV4IiwiX2luZGV4IiwiQXBwIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzaG93Q29tcHNNb3ZlcyIsImxpc3QiLCJnYW1lRGF0YSIsIl90aGlzJHByb3BzJGdhbWVEYXRhIiwiX2xvb3AiLCJzZXRUaW1lb3V0IiwiZWxlbXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJnZXRFbGVtZW50QnlJZCIsImFkZCIsIkF1ZGlvIiwicGxheSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoYW5kbGVCb3hDbGljayIsImNsaWNrZWQiLCJnZXRBdHRyaWJ1dGUiLCJfdGhpcyRwcm9wcyRnYW1lRGF0YTIiLCJfcmVhY3QyIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImNsYXNzTmFtZSIsImRhdGEtYm94Iiwib25DbGljayIsImNvbm5lY3QiLCJjaGFuZ2VMdmwiLCJkZWZhdWx0VmFsdWUiLCJvbkNoYW5nZSIsImNzcyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJ0ZXN0IiwiZm4iLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiaXRlbSIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJlbCIsInNldEF0dHJpYnV0ZSIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImJ0b2EiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaG1yIiwibG9jYWxzIiwibW9kYWwiLCJib2R5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJfSGVhZGVyMiIsIl9GaWVsZDIiLCJyZUlzSG9zdEN0b3IiLCJmblRvU3RyaW5nIiwib2JqVG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwiaXNBcnJheSIsImlzTmF0aXZlIiwiaXNBcmd1bWVudHMiLCJyZUlzVWludCIsImlzSW5kZXgiLCJpc1Byb3RvIiwic2tpcEluZGV4ZXMiLCJmcm9tUmlnaHQiLCJiYXNlRm9yIiwiaXRlcmF0ZWUiLCJrZXlzRnVuYyIsIml0ZXJhYmxlIiwia2V5c0luIiwib2JqZWN0VGFnIiwic3ViVmFsdWUiLCJpc0ZTQSIsIl9sb2Rhc2hJc3BsYWlub2JqZWN0MiIsImV2ZXJ5IiwiaXNWYWxpZEtleSIsImlzRXJyb3IiLCJfbG9kYXNoSXNwbGFpbm9iamVjdCIsInZhbGlkS2V5cyIsIl9leHRlbmRzIiwiX2ZsdXhTdGFuZGFyZEFjdGlvbiIsImlzUHJvbWlzZSIsInBheWxvYWQiLCJ0aGVuIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJ2YWxpZGF0ZUZvcm1hdCIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsIm51bWJlciIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZm9jdXMiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzTm9kZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsIkV2ZW50TGlzdGVuZXIiLCJsaXN0ZW4iLCJldmVudFR5cGUiLCJjYWxsYmFjayIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJjYXB0dXJlIiwicmVnaXN0ZXJEZWZhdWx0IiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJhYSIsIkIiLCJDIiwiYmEiLCJkYSIsImVhIiwiZmEiLCJpYSIsIkQiLCJFIiwib2EiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImRlZmF1bHRDaGVja2VkIiwiaW5uZXJIVE1MIiwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwicGEiLCJ0YSIsIk1VU1RfVVNFX1BST1BFUlRZIiwiSEFTX0JPT0xFQU5fVkFMVUUiLCJIQVNfTlVNRVJJQ19WQUxVRSIsIkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFIiwiSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSIsIkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSIsImluamVjdERPTVByb3BlcnR5Q29uZmlnIiwiUHJvcGVydGllcyIsIkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMiLCJET01BdHRyaWJ1dGVOYW1lcyIsIkRPTU11dGF0aW9uTWV0aG9kcyIsInVhIiwidG9Mb3dlckNhc2UiLCJoIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsInByb3BlcnR5TmFtZSIsIm11dGF0aW9uTWV0aG9kIiwibXVzdFVzZVByb3BlcnR5IiwiaGFzQm9vbGVhblZhbHVlIiwiaGFzTnVtZXJpY1ZhbHVlIiwiaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUiLCJoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIiwiaGFzU3RyaW5nQm9vbGVhblZhbHVlIiwidmEiLCJ3YSIsInhhIiwieWEiLCJLIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsImFsbG93RnVsbFNjcmVlbiIsImFzeW5jIiwiYXV0b0ZvY3VzIiwiYXV0b1BsYXkiLCJjaGVja2VkIiwiY29scyIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRyb2xzIiwiZGVmZXIiLCJkaXNhYmxlZCIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZm9ybU5vVmFsaWRhdGUiLCJoaWRkZW4iLCJsb29wIiwibXVsdGlwbGUiLCJtdXRlZCIsIm5vVmFsaWRhdGUiLCJvcGVuIiwicGxheXNJbmxpbmUiLCJyZWFkT25seSIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb3dzIiwicm93U3BhbiIsInNjb3BlZCIsInNlYW1sZXNzIiwic2VsZWN0ZWQiLCJzaXplIiwic3RhcnQiLCJzcGFuIiwic3BlbGxDaGVjayIsInRhYkluZGV4IiwiaXRlbVNjb3BlIiwiYWNjZXB0Q2hhcnNldCIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJ2YWxpZGl0eSIsImJhZElucHV0IiwiRWEiLCJNIiwiR2EiLCJhdXRvUmV2ZXJzZSIsImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQiLCJwcmVzZXJ2ZUFscGhhIiwieGxpbmtBY3R1YXRlIiwieGxpbmtBcmNyb2xlIiwieGxpbmtIcmVmIiwieGxpbmtSb2xlIiwieGxpbmtTaG93IiwieGxpbmtUaXRsZSIsInhsaW5rVHlwZSIsInhtbEJhc2UiLCJ4bWxMYW5nIiwieG1sU3BhY2UiLCJIYSIsIklhIiwidG9VcHBlckNhc2UiLCJQIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbmplY3Rpb24iLCJpbmplY3RFcnJvclV0aWxzIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiSmEiLCJrIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJxIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsInYiLCJMYSIsIk1hIiwiTmEiLCJPYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwiUGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsIlFhIiwicmVnaXN0cmF0aW9uTmFtZSIsIlJhIiwiU2EiLCJkZXBlbmRlbmNpZXMiLCJUYSIsIlVhIiwiVmEiLCJmcmVlemUiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJXYSIsIlhhIiwiWWEiLCJaYSIsImN1cnJlbnRUYXJnZXQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsImRiIiwiZ2IiLCJoYiIsImliIiwic3RhdGVOb2RlIiwiamIiLCJrYiIsImxiIiwibWIiLCJnZXRMaXN0ZW5lciIsImVucXVldWVFdmVudHMiLCJwcm9jZXNzRXZlbnRRdWV1ZSIsIm5iIiwiUSIsIm9iIiwicGIiLCJxYiIsInJiIiwic2IiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwidXBkYXRlRmliZXJQcm9wcyIsInRiIiwidWIiLCJ2YiIsImRpc3BhdGNoQ29uZmlnIiwid2IiLCJfdGFyZ2V0SW5zdCIsInhiIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJhbHRlcm5hdGUiLCJDYiIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwiRGIiLCJFYiIsImRvY3VtZW50RWxlbWVudCIsIlMiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIlQiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiS2IiLCJldmVudFBvb2wiLCJMYiIsImRlc3RydWN0b3IiLCJKYiIsImdldFBvb2xlZCIsIk1iIiwiTmIiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJhdWdtZW50Q2xhc3MiLCJYYiIsIlBiIiwiVmIiLCJXYiIsImRvY3VtZW50TW9kZSIsIlliIiwib3BlcmEiLCJwYXJzZUludCIsIlpiIiwiJGIiLCJhYyIsImJjIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsImNjIiwiZGMiLCJrZXlDb2RlIiwiZWMiLCJkZXRhaWwiLCJmYyIsImljIiwid2hpY2giLCJnYyIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsImhjIiwiamMiLCJrYyIsImxjIiwibWMiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwibmMiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50Iiwib2MiLCJwYyIsInFjIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwicmMiLCJzYyIsInRjIiwieGMiLCJ1YyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsInZjIiwid2MiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YyIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsInpjIiwiQmMiLCJfdmFsdWVUcmFja2VyIiwic2V0IiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIkFjIiwiQ2MiLCJEYyIsImNoYW5nZSIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIiRjIiwiYWQiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiX3dyYXBwZXJTdGF0ZSIsImNvbnRyb2xsZWQiLCJiZCIsInZpZXciLCJjZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJkZCIsImdldE1vZGlmaWVyU3RhdGUiLCJlZCIsImZkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJnZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwiaGQiLCJwYXJlbnRXaW5kb3ciLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiamQiLCJrZCIsImVmZmVjdFRhZyIsImxkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIm1kIiwibmQiLCJjaGlsZCIsInNpYmxpbmciLCJxZCIsInJkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJzZCIsInRvcExldmVsVHlwZSIsInRkIiwidWQiLCJVIiwidmQiLCJ3ZCIsInhkIiwiX2VuYWJsZWQiLCJfaGFuZGxlVG9wTGV2ZWwiLCJzZXRIYW5kbGVUb3BMZXZlbCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwieWQiLCJ6ZCIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkFkIiwiQmQiLCJDZCIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJEZCIsInRvcEFib3J0IiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTY3JvbGwiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUZXh0SW5wdXQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsInRvcFdoZWVsIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwidGV4dENvbnRlbnQiLCJvZmZzZXQiLCJLZCIsIkxkIiwiTWQiLCJzZWxlY3QiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJTZCIsIm9uU2VsZWN0IiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJjaGFyQ29kZSIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJjbGlwYm9hcmREYXRhIiwiWGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiWWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsInJlcGVhdCIsImxvY2FsZSIsImRhdGFUcmFuc2ZlciIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsImRlIiwiZWUiLCJmZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJnZSIsImhlIiwiViIsIlciLCJTZXQiLCJpZSIsIlgiLCJqZSIsImtlIiwibGUiLCJtZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIm5lIiwib2UiLCJjdXJzb3IiLCJwZSIsInFlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJyZSIsIlkiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwicGVuZGluZ1Byb3BzIiwiaW50ZXJuYWxDb250ZXh0VGFnIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwic2UiLCJ0ZSIsImlzUmVhY3RDb21wb25lbnQiLCJ1ZSIsInZlIiwid2UiLCJoYW5kbGVyIiwieGUiLCJ5ZSIsInBlbmRpbmdDaGlsZHJlbiIsInplIiwiQWUiLCJCZSIsIkRlIiwiRWUiLCJGZSIsImJhc2VTdGF0ZSIsImZpcnN0IiwibGFzdCIsImNhbGxiYWNrTGlzdCIsImhhc0ZvcmNlVXBkYXRlIiwiaXNJbml0aWFsaXplZCIsIkdlIiwiSGUiLCJJZSIsInBhcnRpYWxTdGF0ZSIsIkplIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJLZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiaXRlcmF0b3IiLCJYZSIsIlllIiwiWmUiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiJGUiLCJhZiIsIk1hcCIsInUiLCJ6IiwiJCR0eXBlb2YiLCJHIiwiSSIsIkwiLCJBIiwidyIsIk4iLCJkb25lIiwiSiIsImJmIiwiY2YiLCJkZiIsInBlbmRpbmdDb250ZXh0Iiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJ1c2VTeW5jU2NoZWR1bGluZyIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJ1cGRhdGVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwibmV4dENhbGxiYWNrIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJ1bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiTGUiLCJPYiIsImJlZ2luV29yayIsImh5ZHJhdGUiLCJiZWdpbkZhaWxlZFdvcmsiLCJnZiIsImtmIiwiUWIiLCJqYSIsImlzUmVhZHlGb3JDb21taXQiLCJ5ZyIsInQiLCJ6ZyIsIkFnIiwiTmUiLCJPZSIsIlNjIiwiQmciLCJUYyIsIkNnIiwiRGciLCJFZyIsIlIiLCJjb21wb25lbnREaWRDYXRjaCIsImNvbXBvbmVudFN0YWNrIiwiY2EiLCJRYyIsImhhIiwicWEiLCJGZyIsIkgiLCJyZyIsIkdnIiwiVWMiLCJGIiwicmEiLCJSYyIsImViIiwicWciLCJoYXMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImVycm9yQm91bmRhcnkiLCJlcnJvckJvdW5kYXJ5Rm91bmQiLCJlcnJvckJvdW5kYXJ5TmFtZSIsIndpbGxSZXRyeSIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJjb25zb2xlIiwiVmMiLCJrYSIsIkhnIiwiUmIiLCJJZyIsIm5leHRTY2hlZHVsZWRSb290IiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJPIiwic2EiLCJGYSIsImxhIiwiU2IiLCJtYSIsIm5hIiwiV2MiLCJQZSIsIlRiIiwiSmciLCJYYyIsIktnIiwidGltZW91dCIsImZiIiwiWWMiLCJVYiIsIlpjIiwiZmluaXNoZWRXb3JrIiwidGltZVJlbWFpbmluZyIsIkxnIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGV4dCIsImdldEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRleHQiLCJyZXNldEhvc3RDb250YWluZXIiLCJoZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImpmIiwiTWUiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsInBlcnNpc3RlbmNlIiwibXV0YXRpb24iLCJjb21wbGV0ZVdvcmsiLCJlZiIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRQbGFjZW1lbnQiLCJjb21taXREZWxldGlvbiIsImNvbW1pdFdvcmsiLCJjb21taXRMaWZlQ3ljbGVzIiwiY29tbWl0QXR0YWNoUmVmIiwiY29tbWl0RGV0YWNoUmVmIiwiZmYiLCJzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2siLCJjYW5jZWxEZWZlcnJlZENhbGxiYWNrIiwicHJlcGFyZUZvckNvbW1pdCIsInJlc2V0QWZ0ZXJDb21taXQiLCJjb21wdXRlQXN5bmNFeHBpcmF0aW9uIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsImJhdGNoZWRVcGRhdGVzIiwidW5iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsImRlZmVycmVkVXBkYXRlcyIsImxmIiwib2QiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJwZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiQ2UiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm1mIiwibmYiLCJvZiIsInFmIiwicGVyZm9ybWFuY2UiLCJyZiIsInNmIiwidGYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiQmYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsImRpZFRpbWVvdXQiLCJDZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRmIiwicG9zdE1lc3NhZ2UiLCJJbmZpbml0eSIsImNsZWFyVGltZW91dCIsIkVmIiwiRmYiLCJHZiIsIklmIiwiaXNOYU4iLCJKZiIsInNldEF0dHJpYnV0ZU5TIiwiS2YiLCJIZiIsIkxmIiwic3RlcCIsIm1pbiIsIm1heCIsImluaXRpYWxWYWx1ZSIsImluaXRpYWxDaGVja2VkIiwiTWYiLCJOZiIsIk9mIiwicGFyc2VGbG9hdCIsIlBmIiwiUmYiLCJDaGlsZHJlbiIsIlFmIiwiU2YiLCJkZWZhdWx0U2VsZWN0ZWQiLCJUZiIsIndhc011bHRpcGxlIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwibmFtZXNwYWNlVVJJIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImNnIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiZGciLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJlZyIsImZnIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJnZyIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsImNyZWF0ZUVsZW1lbnROUyIsIm9nIiwicGciLCJfX2h0bWwiLCJvbmNsaWNrIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwiZm9ybSIsInhnIiwiTWciLCJOZyIsIloiLCJ0YWdOYW1lIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJleHRlbmQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiUGciLCJfcmVhY3RSb290Q29udGFpbmVyIiwiT2ciLCJRZyIsInBmIiwiUmciLCJ1bm1vdW50IiwiU2ciLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiVGciLCJVZyIsImNoZWNrRENFIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCJjb3VudCIsIj0iLCI6IiwiZXNjYXBlIiwidG9BcnJheSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJ1bnN0YWJsZV9Bc3luY0NvbXBvbmVudCIsIkZyYWdtZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwiY3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZSIsImFwcGx5TWlkZGxld2FyZSIsIl9yZWR1eFByb21pc2UyIiwiX3JlYWN0RG9tMiIsIl9BcHAyIiwiZnJlZUdsb2JhbCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBakIsR0FDQVksT0FBQUMsZUFBQWIsRUFBQSxjQUFpRGtCLE9BQUEsS0FJakRwQixFQUFBcUIsRUFBQSxTQUFBbEIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBbUIsV0FDQSxXQUEyQixPQUFBbkIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVUsRUFBQUMsR0FBc0QsT0FBQVYsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFnQixFQUFBQyxJQUd0RHhCLEVBQUEyQixF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QUFBQyxFQUFBL3dDLFFBQUEsQ0FBQWhDLEVBQUExVSxhQUVsQzBuRCxFQUFBaHhDLFFBQVNsVSxPQUFPaVUsRUFBQUMsUUFBQUMsY0FBQTNCLEVBQUE1VCxVQUFVbEIsTUFBU3FuRCxjQUFxQzl3QyxFQUFBQyxRQUFBQyxjQUFBZ3hDLEVBQUFqeEMsUUFBQSxPQUFvQmQsU0FBU0ksZUFBZSx3RUNYcEgsU0FBQTFILEdBQ0EsSUFBQXM1QyxFQUFBLGlCQUFBdDVDLFFBQUE5VSxpQkFBQThVLEVBRUFDLEVBQUEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDgpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICdsb2Rhc2gtZXMvaXNQbGFpbk9iamVjdCc7XG5pbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbmV4cG9ydCB2YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICAgKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAgICpcbiAgICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICAgKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gICAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICAgKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gICAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gICAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gICAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAgICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gICAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAgICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICAgKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICAgKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gICAqL1xufTtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHsgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfVxuXG4gIC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn0iLCJpbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4vY3JlYXRlU3RvcmUnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi91dGlscy93YXJuaW5nJztcblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25OYW1lID0gYWN0aW9uVHlwZSAmJiAnXCInICsgYWN0aW9uVHlwZS50b1N0cmluZygpICsgJ1wiJyB8fCAnYW4gYWN0aW9uJztcblxuICByZXR1cm4gJ0dpdmVuIGFjdGlvbiAnICsgYWN0aW9uTmFtZSArICcsIHJlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZC4gJyArICdUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuICcgKyAnSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJztcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuICdUaGUgJyArIGFyZ3VtZW50TmFtZSArICcgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcIicgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArICdcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyAnICsgKCdrZXlzOiBcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIicpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcblxuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufSIsImZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArICcuICcgKyAnRGlkIHlvdSB3cml0ZSBcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXCIgaW5zdGVhZCBvZiBcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cIj8nKTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpO1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufSIsIi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBzdG9yZS5kaXNwYXRjaDtcbiAgICAgIHZhciBjaGFpbiA9IFtdO1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodW5kZWZpbmVkLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IHZhciBzdWJzY3JpcHRpb25TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRyeVN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdHJ5VW5zdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vdGlmeU5lc3RlZFN1YnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzU3Vic2NyaWJlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5cbnZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IHRydWU7XG5cbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKCkge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4O1xuXG4gIHZhciBzdG9yZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3N0b3JlJztcbiAgdmFyIHN1YktleSA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3ViS2V5IHx8IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzW3N0b3JlS2V5XSAhPT0gbmV4dFByb3BzLnN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogc3RvcmVTaGFwZS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gIH07XG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3RvcmVLZXldID0gc3RvcmVTaGFwZS5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBvblN0YXRlQ2hhbmdlO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgfVxuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIGhvdFJlbG9hZGluZ1ZlcnNpb24gPSAwO1xudmFyIGR1bW15U3RhdGUgPSB7fTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHN0b3JlKSB7XG4gIC8vIHdyYXAgdGhlIHNlbGVjdG9yIGluIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBpdHMgcmVzdWx0cyBiZXR3ZWVuIHJ1bnMuXG4gIHZhciBzZWxlY3RvciA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bkNvbXBvbmVudFNlbGVjdG9yKHByb3BzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgICAgICBpZiAobmV4dFByb3BzICE9PSBzZWxlY3Rvci5wcm9wcyB8fCBzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2VsZWN0b3IucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBzZWxlY3Rvci5lcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5KSB7XG4gIHZhciBfY29udGV4dFR5cGVzLCBfY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRnZXREaXNwbGF5TmFtZSA9IF9yZWYuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYkZ2V0RGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICdDb25uZWN0QWR2YW5jZWQoJyArIG5hbWUgKyAnKSc7XG4gIH0gOiBfcmVmJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRtZXRob2ROYW1lID0gX3JlZi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYkbWV0aG9kTmFtZSA9PT0gdW5kZWZpbmVkID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmJHJlbmRlckNvdW50UHJvcCA9IF9yZWYucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZiRyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZiRzaG91bGRIYW5kbGVTdGF0ID0gX3JlZi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJHNob3VsZEhhbmRsZVN0YXQsXG4gICAgICBfcmVmJHN0b3JlS2V5ID0gX3JlZi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZiRzdG9yZUtleSA9PT0gdW5kZWZpbmVkID8gJ3N0b3JlJyA6IF9yZWYkc3RvcmVLZXksXG4gICAgICBfcmVmJHdpdGhSZWYgPSBfcmVmLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZiR3aXRoUmVmID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkd2l0aFJlZixcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnZ2V0RGlzcGxheU5hbWUnLCAnbWV0aG9kTmFtZScsICdyZW5kZXJDb3VudFByb3AnLCAnc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzJywgJ3N0b3JlS2V5JywgJ3dpdGhSZWYnXSk7XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG4gIHZhciB2ZXJzaW9uID0gaG90UmVsb2FkaW5nVmVyc2lvbisrO1xuXG4gIHZhciBjb250ZXh0VHlwZXMgPSAoX2NvbnRleHRUeXBlcyA9IHt9LCBfY29udGV4dFR5cGVzW3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUsIF9jb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY29udGV4dFR5cGVzKTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gKF9jaGlsZENvbnRleHRUeXBlcyA9IHt9LCBfY2hpbGRDb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY2hpbGRDb250ZXh0VHlwZXMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PSAnZnVuY3Rpb24nLCAnWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgJyArIChtZXRob2ROYW1lICsgJy4gSW5zdGVhZCByZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgd2l0aFJlZjogd2l0aFJlZixcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBDb25uZWN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wc1tzdG9yZUtleV0gfHwgY29udGV4dFtzdG9yZUtleV07XG4gICAgICAgIF90aGlzLnByb3BzTW9kZSA9IEJvb2xlYW4ocHJvcHNbc3RvcmVLZXldKTtcbiAgICAgICAgX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlID0gX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIGludmFyaWFudChfdGhpcy5zdG9yZSwgJ0NvdWxkIG5vdCBmaW5kIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiAnICsgKCdcIicgKyBkaXNwbGF5TmFtZSArICdcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgJykgKyAoJ29yIGV4cGxpY2l0bHkgcGFzcyBcIicgKyBzdG9yZUtleSArICdcIiBhcyBhIHByb3AgdG8gXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJykpO1xuXG4gICAgICAgIF90aGlzLmluaXRTZWxlY3RvcigpO1xuICAgICAgICBfdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjI7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX3JlZjJbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjI7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBmaXJlcyBkdXJpbmcgc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBidXQgY29tcG9uZW50RGlkTW91bnQgYW5kXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGRvIG5vdC4gQmVjYXVzZSBvZiB0aGlzLCB0cnlTdWJzY3JpYmUgaGFwcGVucyBkdXJpbmcgLi4uZGlkTW91bnQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdW5zdWJzY3JpcHRpb24gd291bGQgbmV2ZXIgdGFrZSBwbGFjZSBkdXJpbmcgU1NSLCBjYXVzaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNoaWxkIGNvbXBvbmVudCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYSBzdGF0ZSBjaGFuZ2UgYnlcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgYW4gYWN0aW9uIGluIGl0cyBjb21wb25lbnRXaWxsTW91bnQsIHdlIGhhdmUgdG8gcmUtcnVuIHRoZSBzZWxlY3QgYW5kIG1heWJlXG4gICAgICAgIC8vIHJlLXJlbmRlci5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5zdG9yZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuID0gbm9vcDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsICdUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgJyArICgneyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlICcgKyBtZXRob2ROYW1lICsgJygpIGNhbGwuJykpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFNlbGVjdG9yID0gZnVuY3Rpb24gaW5pdFNlbGVjdG9yKCkge1xuICAgICAgICB2YXIgc291cmNlU2VsZWN0b3IgPSBzZWxlY3RvckZhY3RvcnkodGhpcy5zdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3RvciwgdGhpcy5zdG9yZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQodGhpcy5zdWJzY3JpcHRpb24pO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuc3Vic2NyaXB0aW9uKSAmJiB0aGlzLnN1YnNjcmlwdGlvbi5pc1N1YnNjcmliZWQoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7XG4gICAgICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuICAgICAgICB2YXIgd2l0aEV4dHJhcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBzZWxlY3Rvci5lcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLmFkZEV4dHJhUHJvcHMoc2VsZWN0b3IucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENvbm5lY3Q7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTtcblxuICAgICAgICAgIC8vIElmIGFueSBjb25uZWN0ZWQgZGVzY2VuZGFudHMgZG9uJ3QgaG90IHJlbG9hZCAoYW5kIHJlc3Vic2NyaWJlIGluIHRoZSBwcm9jZXNzKSwgdGhlaXJcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMgd2lsbCBiZSBsb3N0IHdoZW4gd2UgdW5zdWJzY3JpYmUuIFVuZm9ydHVuYXRlbHksIGJ5IGNvcHlpbmcgb3ZlciBhbGxcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMsIHRoaXMgZG9lcyBtZWFuIHRoYXQgdGhlIG9sZCB2ZXJzaW9ucyBvZiBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd2lsbCBzdGlsbCBiZVxuICAgICAgICAgIC8vIG5vdGlmaWVkIG9mIHN0YXRlIGNoYW5nZXM7IGhvd2V2ZXIsIHRoZWlyIG9uU3RhdGVDaGFuZ2UgZnVuY3Rpb24gaXMgYSBuby1vcCBzbyB0aGlzXG4gICAgICAgICAgLy8gaXNuJ3QgYSBodWdlIGRlYWwuXG4gICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5cbi8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuXG4vLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9O1xuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHsgZGlzcGF0Y2g6IGRpc3BhdGNoIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcblxuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcblxuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICB2YXIgb3duUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBzdGF0ZVByb3BzID0gdm9pZCAwO1xuICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuXG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydpbml0TWFwU3RhdGVUb1Byb3BzJywgJ2luaXRNYXBEaXNwYXRjaFRvUHJvcHMnLCAnaW5pdE1lcmdlUHJvcHMnXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5JztcblxuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJyArIHR5cGVvZiBhcmcgKyAnIGZvciAnICsgbmFtZSArICcgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCAnICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArICcuJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHVuZGVmaW5lZCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcbiAgICAgICAgX3JlZjIkcHVyZSA9IF9yZWYyLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMiRwdXJlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkcHVyZSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9PT0gdW5kZWZpbmVkID8gc3RyaWN0RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjIkYXJlT3duUHJvcHNFcXVhID0gX3JlZjIuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU93blByb3BzRXF1YSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMi5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMi5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydwdXJlJywgJ2FyZVN0YXRlc0VxdWFsJywgJ2FyZU93blByb3BzRXF1YWwnLCAnYXJlU3RhdGVQcm9wc0VxdWFsJywgJ2FyZU1lcmdlZFByb3BzRXF1YWwnXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG5cbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcblxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdDb25uZWN0KCcgKyBuYW1lICsgJyknO1xuICAgICAgfSxcblxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG5cbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvLyBBQ1RJT05TXHJcbmV4cG9ydCBjb25zdCBDT01QX01PVkUgPSAnQ09NUF9NT1ZFJztcclxuZXhwb3J0IGNvbnN0IFBMQVlFUl9NT1ZFID0gJ1BMQVlFUl9NT1ZFJztcclxuZXhwb3J0IGNvbnN0IFBMQVlFUl9TVEVQID0gJ1BMQVlFUl9TVEVQJztcclxuZXhwb3J0IGNvbnN0IEdBTUVfT1ZFUiA9ICdHQU1FX09WRVInO1xyXG5leHBvcnQgY29uc3QgR0FNRV9PVkVSX1JFTU9WRSA9ICdHQU1FX09WRVJfUkVNT1ZFJztcclxuZXhwb3J0IGNvbnN0IENIQU5HRV9ESUZGSUNVTFRZID0gJ0NIQU5HRV9ESUZGSUNVTFRZJztcclxuXHJcbmV4cG9ydCBjb25zdCBMVkwgPSBbMTUwMCwgMTAwMCwgNDAwXTsiLCJpbXBvcnQgKiBhcyBjb25mIGZyb20gJ2NvbmYnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXBNb3ZlID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBjb25mLkNPTVBfTU9WRVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjb25zdCBwbGF5ZXJNb3ZlID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBjb25mLlBMQVlFUl9NT1ZFXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IHBsYXllclN0ZXAgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IGNvbmYuUExBWUVSX1NURVBcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgZ2FtZU92ZXIgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IGNvbmYuR0FNRV9PVkVSXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IGdhbWVPdmVyUmVtb3ZlID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBjb25mLkdBTUVfT1ZFUl9SRU1PVkVcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgY2hhbmdlRGlmZmljdWx0eSA9IChsdmwpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogY29uZi5DSEFOR0VfRElGRklDVUxUWSxcclxuICAgICAgICBsdmxcclxuICAgIH1cclxufSIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwiaW1wb3J0ICogYXMgY29uZiBmcm9tIFwiY29uZlwiO1xyXG5cclxuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xyXG4gICAgJ3JvdW5kJzogMCxcclxuICAgICdsdmwnOiAwLFxyXG4gICAgJ3BsYXllcnNTdGVwJzogMCxcclxuICAgICdwbGF5ZXJzVHVybic6IGZhbHNlLFxyXG4gICAgJ2NvbXBUdXJuJzogdHJ1ZSxcclxuICAgICdzZXF1ZW5jZSc6IFtdLFxyXG4gICAgJ3N0YXR1cyc6ICdzdG9wJ1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3RhdGUgPSBkZWZhdWx0U3RhdGUsIGFjdGlvbikge1xyXG4gICAgbGV0IHRlbXA7XHJcbiAgICBsZXQgbmV3U3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG5cclxuICAgICAgICBjYXNlIGNvbmYuQ09NUF9NT1ZFOlxyXG4gICAgICAgICAgICBsZXQgbmV3U2VxID0gc3RhdGUuc2VxdWVuY2VcclxuICAgICAgICAgICAgaWYgKG5ld1NlcVtuZXdTZXEubGVuZ3RoIC0gMV0gPT09IDApIG5ld1NlcS5wb3AoKVxyXG4gICAgICAgICAgICBuZXdTZXEucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqNCkrMSlcclxuICAgICAgICAgICAgbmV3U2VxLnB1c2goMClcclxuICAgICAgICAgICAgbGV0IG5ld1JvdW5kID0gc3RhdGUucm91bmQgKyAxXHJcbiAgICAgICAgICAgIG5ld1N0YXRlID0ge1xyXG4gICAgICAgICAgICAgICAgLi4ubmV3U3RhdGUsXHJcbiAgICAgICAgICAgICAgICAncGxheWVyc1N0ZXAnOiAwLFxyXG4gICAgICAgICAgICAgICAgJ3JvdW5kJzogbmV3Um91bmQsXHJcbiAgICAgICAgICAgICAgICAnc2VxdWVuY2UnOiBuZXdTZXEsXHJcbiAgICAgICAgICAgICAgICAncGxheWVyc1R1cm4nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICdjb21wVHVybic6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3U3RhdGVcclxuXHJcbiAgICAgICAgY2FzZSBjb25mLlBMQVlFUl9NT1ZFOlxyXG4gICAgICAgICAgICBuZXdTdGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgIC4uLm5ld1N0YXRlLFxyXG4gICAgICAgICAgICAgICAgJ3BsYXllcnNUdXJuJzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICdjb21wVHVybic6IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlXHJcblxyXG4gICAgICAgIGNhc2UgY29uZi5QTEFZRVJfU1RFUDpcclxuICAgICAgICAgICAgbmV3U3RhdGUucGxheWVyc1N0ZXAgPSBzdGF0ZS5wbGF5ZXJzU3RlcCArIDFcclxuICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlXHJcblxyXG4gICAgICAgIGNhc2UgY29uZi5HQU1FX09WRVI6XHJcbiAgICAgICAgICAgIG5ld1N0YXRlID0ge1xyXG4gICAgICAgICAgICAgICAgLi4ubmV3U3RhdGUsXHJcbiAgICAgICAgICAgICAgICAncm91bmQnOiAgMCxcclxuICAgICAgICAgICAgICAgICdwbGF5ZXJzU3RlcCc6IDAsXHJcbiAgICAgICAgICAgICAgICAncGxheWVyc1R1cm4nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICdjb21wVHVybic6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAnc2VxdWVuY2UnOiBbXSxcclxuICAgICAgICAgICAgICAgICdzdGF0dXMnOiAnZ2FtZU92ZXInXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlXHJcblxyXG4gICAgICAgIGNhc2UgY29uZi5HQU1FX09WRVJfUkVNT1ZFOlxyXG4gICAgICAgICAgICBuZXdTdGF0ZS5zdGF0dXMgPSAnc3RhcnQnXHJcbiAgICAgICAgICAgIHJldHVybiBuZXdTdGF0ZVxyXG5cclxuICAgICAgICBjYXNlIGNvbmYuQ0hBTkdFX0RJRkZJQ1VMVFk6XHJcbiAgICAgICAgICAgIG5ld1N0YXRlLmx2bCA9IGFjdGlvbi5sdmxcclxuICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlXHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCBEYXRhUmVkdWNlciBmcm9tICcuL3JlZHVjZXJfZGF0YSc7XHJcblxyXG5jb25zdCByb290UmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICBkYXRhOiBEYXRhUmVkdWNlclxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHsgY29tcE1vdmUsIHBsYXllck1vdmUsIHBsYXllclN0ZXAsIGdhbWVPdmVyIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XHJcblxyXG5pbXBvcnQgKiBhcyBjb25mIGZyb20gJ2NvbmYnO1xyXG5cclxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICB9XHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIH1cclxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5nYW1lRGF0YS5jb21wVHVybikgdGhpcy5zaG93Q29tcHNNb3ZlcygpXHJcblxyXG4gICAgfVxyXG4gICAgc2hvd0NvbXBzTW92ZXMgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IHRoaXMucHJvcHMuZ2FtZURhdGEuc2VxdWVuY2VcclxuICAgICAgICBsZXQgYXVkaW9cclxuICAgICAgICBjb25zdCB7c2VxdWVuY2UsIGx2bH0gPSB0aGlzLnByb3BzLmdhbWVEYXRhIFxyXG5cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGxpc3QubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCh5ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZVt4XSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtcyAhPT0gbnVsbCkgZWxlbXMuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JveCcgKyBzZXF1ZW5jZVt4XSkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICBhdWRpbyA9IG5ldyBBdWRpbygnLi9zb3VuZHMvJysoc2VxdWVuY2VbeF0pKycubXAzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW8ucGxheSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnPj4+Picsc2VxdWVuY2VbeF0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZmllbGQtYm94XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxlbGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtc1tpXS5jbGFzc0xpc3QuYWRkKCdwbGF5ZXJzLXR1cm4nKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbXMgIT09IG51bGwpIGVsZW1zLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucGxheWVyTW92ZSgpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCc+Pj4+Pj4+Pj5maW4nKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB4ICogY29uZi5MVkxbbHZsXSwgeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIGhhbmRsZUJveENsaWNrID0gKGUpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5nYW1lRGF0YS5wbGF5ZXJzVHVybikge1xyXG4gICAgICAgICAgICBsZXQgY2xpY2tlZCA9ICtlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJveFwiKVxyXG4gICAgICAgICAgICBjb25zdCB7cm91bmQsIHBsYXllcnNTdGVwLCBzZXF1ZW5jZX0gPSB0aGlzLnByb3BzLmdhbWVEYXRhXHJcblxyXG4gICAgICAgICAgICBpZiAoY2xpY2tlZCA9PT0gc2VxdWVuY2VbcGxheWVyc1N0ZXBdKSB7IC8vIHJpZ2h0IGNsaWNrXHJcbiAgICAgICAgICAgICAgICBsZXQgYXVkaW8gPSBuZXcgQXVkaW8oJy4vc291bmRzLycrKHNlcXVlbmNlW3BsYXllcnNTdGVwXSkrJy5tcDMnKTtcclxuICAgICAgICAgICAgICAgIGF1ZGlvLnBsYXkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGxheWVyc1N0ZXAgPT09IHJvdW5kLTEpIHsgLy8gZW5kIG9mIHRoZSBwbGF5ZXIgbW92ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZpZWxkLWJveFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8ZWxlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXNbaV0uY2xhc3NMaXN0LnJlbW92ZSgncGxheWVycy10dXJuJylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnByb3BzLmNvbXBNb3ZlKCksIDIwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIHBsYXllcidzIG5leHQgc3RlcFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucGxheWVyU3RlcCgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IC8vIHdyb25nIGNsaWNrIC0gZ2FtZSBvdmVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmdhbWVPdmVyKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4oXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYm94MVwiIGNsYXNzTmFtZT1cImZpZWxkLWJveFwiIGRhdGEtYm94PVwiMVwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQm94Q2xpY2t9PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImJveDJcIiBjbGFzc05hbWU9XCJmaWVsZC1ib3hcIiBkYXRhLWJveD1cIjJcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUJveENsaWNrfT48L2Rpdj48YnIvPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImJveDNcIiBjbGFzc05hbWU9XCJmaWVsZC1ib3hcIiBkYXRhLWJveD1cIjNcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUJveENsaWNrfT48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJib3g0XCIgY2xhc3NOYW1lPVwiZmllbGQtYm94XCIgZGF0YS1ib3g9XCI0XCIgb25DbGljaz17dGhpcy5oYW5kbGVCb3hDbGlja30+PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtyZXR1cm4geyBnYW1lRGF0YTogc3RhdGUuZGF0YSB9fTtcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4gYmluZEFjdGlvbkNyZWF0b3JzKHsgY29tcE1vdmUsIHBsYXllck1vdmUsIHBsYXllclN0ZXAsIGdhbWVPdmVyIH0sIGRpc3BhdGNoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEFwcCk7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHsgY2hhbmdlRGlmZmljdWx0eSB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xyXG5cclxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICB9XHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIH1cclxuICAgIGNoYW5nZUx2bCA9IChlKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5jaGFuZ2VEaWZmaWN1bHR5KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxoMT5TaW1vbiB0aGUgR2FtZTwvaDE+XHJcbiAgICAgICAgICAgICAgICA8aDM+Um91bmQ6IHt0aGlzLnByb3BzLmdhbWVEYXRhLnJvdW5kfTwvaDM+XHJcbiAgICAgICAgICAgICAgICA8cD5MZXZlbDogXHJcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwiZ2FtZV9sZXZlbFwiIGlkPVwiZ2FtZWxldmVsXCIgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmdhbWVEYXRhLmx2bH0gb25DaGFuZ2U9e3RoaXMuY2hhbmdlTHZsfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj5FYXN5PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCI+TWVkaXVtPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIyXCI+SGFyZDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7cmV0dXJuIHsgZ2FtZURhdGE6IHN0YXRlLmRhdGEgfX07XHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+IGJpbmRBY3Rpb25DcmVhdG9ycyh7IGNoYW5nZURpZmZpY3VsdHkgfSwgZGlzcGF0Y2gpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoQXBwKTtcclxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG8pO1wiLCBcIlwiXSk7XG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCIsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBjb2xvcjogIzMzMztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcblxcbi5maWVsZC1ib3gge1xcbiAgYm9yZGVyOiBzb2xpZCAxcHg7XFxuICB3aWR0aDogMjAwcHg7XFxuICBoZWlnaHQ6IDIwMHB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luOiAwIDJweDsgfVxcblxcbi5wbGF5ZXJzLXR1cm4ge1xcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxuXFxuYnV0dG9uIHtcXG4gIG1hcmdpbi10b3A6IDIwcHg7XFxuICBmb250LXNpemU6IDE2cHg7IH1cXG5cXG5zZWxlY3Qge1xcbiAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gIGZvbnQtc2l6ZTogMTZweDsgfVxcblxcbiNnYW1lLW92ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgei1pbmRleDogMTsgfVxcbiAgI2dhbWUtb3Zlcl9fYm94IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXG4gICAgei1pbmRleDogMjtcXG4gICAgcGFkZGluZzogMTAwcHggNTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgICBmb250LXNpemU6IDI2cHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkOyB9XFxuXFxuI2JveCB7XFxuICB0cmFuc2l0aW9uOiBhbGwgMXM7IH1cXG4gICNib3gxIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0VCNTc1NzsgfVxcbiAgICAjYm94MS5hY3RpdmUge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjNTE3MTc7IH1cXG4gICNib3gyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0JCNkJEOTsgfVxcbiAgICAjYm94Mi5hY3RpdmUge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM4ZDJkYjE7IH1cXG4gICNib3gzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0YyQzk0QzsgfVxcbiAgICAjYm94My5hY3RpdmUge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjOTliMGY7IH1cXG4gICNib3g0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzZGQ0Y5NzsgfVxcbiAgICAjYm94NC5hY3RpdmUge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzNmEyNjM7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNS0yIS4vbWFpbi5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS01LTIhLi9tYWluLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS01LTIhLi9tYWluLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7IGNvbXBNb3ZlLCBnYW1lT3ZlclJlbW92ZSB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xyXG5cclxuaW1wb3J0ICcuLi9zY3NzL21haW4uc2Nzcyc7XHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXInO1xyXG5pbXBvcnQgRmllbGQgZnJvbSAnLi9GaWVsZCc7XHJcblxyXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcylcclxuICAgIH1cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm1vZGFsKTtcclxuICAgIH1cclxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcclxuICAgIH1cclxuICAgIG1vZGFsID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoZS50YXJnZXQuaWQgPT09ICdnYW1lLW92ZXInIHx8IGUudGFyZ2V0LmlkID09PSAnZ2FtZS1vdmVyX19ib3gnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZ2FtZU92ZXJSZW1vdmUoKVxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5tb2RhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxIZWFkZXIvPlxyXG4gICAgICAgICAgICAgICAgPEZpZWxkLz5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmdhbWVEYXRhLnJvdW5kID4gMCA/ICcnIDogPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnByb3BzLmNvbXBNb3ZlfT5TdGFydCBHYW1lPC9idXR0b24+fVxyXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZ2FtZURhdGEuc3RhdHVzID09PSAnZ2FtZU92ZXInID8gPGRpdiBpZD1cImdhbWUtb3ZlclwiPjxkaXYgaWQ9XCJnYW1lLW92ZXJfX2JveFwiPkdBTUUgT1ZFUjwvZGl2PjwvZGl2PiA6IG51bGx9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtyZXR1cm4geyBnYW1lRGF0YTogc3RhdGUuZGF0YSB9fTtcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4gYmluZEFjdGlvbkNyZWF0b3JzKHsgY29tcE1vdmUsIGdhbWVPdmVyUmVtb3ZlIH0sIGRpc3BhdGNoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEFwcCk7XHJcbiIsIi8qKlxuICogbG9kYXNoIDMuMC40IChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kZXJuIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNSBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE1IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpID4gNSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKiogVXNlZCBmb3IgbmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZuVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZSBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9ialRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmblRvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UoL1tcXFxcXiQuKis/KClbXFxde318XS9nLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiBOYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQXJyYXkgPSBnZXROYXRpdmUoQXJyYXksICdpc0FycmF5Jyk7XG5cbi8qKlxuICogVXNlZCBhcyB0aGUgW21heGltdW0gbGVuZ3RoXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlcilcbiAqIG9mIGFuIGFycmF5LWxpa2UgdmFsdWUuXG4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIHJldHVybiBpc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIGlzIGJhc2VkIG9uIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJyYXlUYWc7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaSB3aGljaCByZXR1cm4gJ2Z1bmN0aW9uJyBmb3IgcmVnZXhlc1xuICAvLyBhbmQgU2FmYXJpIDggZXF1aXZhbGVudHMgd2hpY2ggcmV0dXJuICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvcnMuXG4gIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gZnVuY1RhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGUgW2xhbmd1YWdlIHR5cGVdKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDgpIG9mIGBPYmplY3RgLlxuICogKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdCgxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIC8vIEF2b2lkIGEgVjggSklUIGJ1ZyBpbiBDaHJvbWUgMTktMjAuXG4gIC8vIFNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MSBmb3IgbW9yZSBkZXRhaWxzLlxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc05hdGl2ZShfKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHJldHVybiByZUlzTmF0aXZlLnRlc3QoZm5Ub1N0cmluZy5jYWxsKHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgcmVJc0hvc3RDdG9yLnRlc3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCIvKipcbiAqIGxvZGFzaCAzLjAuOCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZGVybiBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCAyMDEyLTIwMTUgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqL1xudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnbG9kYXNoLmlzYXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJ2xvZGFzaC5pc2FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eXFxkKyQvO1xuXG4vKiogVXNlZCBmb3IgbmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIGFzIHRoZSBbbWF4aW11bSBsZW5ndGhdKGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlcilcbiAqIG9mIGFuIGFycmF5LWxpa2UgdmFsdWUuXG4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFsdWUgPSAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSA/ICt2YWx1ZSA6IC0xO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gaXMgYmFzZWQgb24gW2BUb0xlbmd0aGBdKGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlIFtsYW5ndWFnZSB0eXBlXShodHRwczovL2VzNS5naXRodWIuaW8vI3g4KSBvZiBgT2JqZWN0YC5cbiAqIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAvLyBBdm9pZCBhIFY4IEpJVCBidWcgaW4gQ2hyb21lIDE5LTIwLlxuICAvLyBTZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIyOTEgZm9yIG1vcmUgZGV0YWlscy5cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7XG4gIGxlbmd0aCA9IChsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSkgJiYgbGVuZ3RoKSB8fCAwO1xuXG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgaW5kZXggPSAtMSxcbiAgICAgIGlzUHJvdG8gPSB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlID09PSBvYmplY3QsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBsZW5ndGggPiAwO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IChpbmRleCArICcnKTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoc2tpcEluZGV4ZXMgJiYgaXNJbmRleChrZXksIGxlbmd0aCkpICYmXG4gICAgICAgICEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c0luO1xuIiwiLyoqXG4gKiBsb2Rhc2ggMy4wLjMgKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCAyMDEyLTIwMTYgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IDIwMDktMjAxNiBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqL1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9ySW5gIGFuZCBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXNcbiAqIG92ZXIgYG9iamVjdGAgcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGludm9raW5nIGBpdGVyYXRlZWAgZm9yXG4gKiBlYWNoIHByb3BlcnR5LiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHlcbiAqIHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvcjtcbiIsIi8qKlxuICogbG9kYXNoIDMuMi4wIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kZXJuIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNSBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE1IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG52YXIgYmFzZUZvciA9IHJlcXVpcmUoJ2xvZGFzaC5fYmFzZWZvcicpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnbG9kYXNoLmlzYXJndW1lbnRzJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnbG9kYXNoLmtleXNpbicpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZSBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9ialRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9ySW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNJbik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhc3N1bWVzIG9iamVjdHMgY3JlYXRlZCBieSB0aGUgYE9iamVjdGAgY29uc3RydWN0b3JcbiAqIGhhdmUgbm8gaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICB2YXIgQ3RvcjtcblxuICAvLyBFeGl0IGVhcmx5IGZvciBub24gYE9iamVjdGAgb2JqZWN0cy5cbiAgaWYgKCEoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBvYmplY3RUYWcgJiYgIWlzQXJndW1lbnRzKHZhbHVlKSkgfHxcbiAgICAgICghaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NvbnN0cnVjdG9yJykgJiYgKEN0b3IgPSB2YWx1ZS5jb25zdHJ1Y3RvciwgdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhKEN0b3IgaW5zdGFuY2VvZiBDdG9yKSkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIElFIDwgOSBpdGVyYXRlcyBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWZvcmUgb3duIHByb3BlcnRpZXMuIElmIHRoZSBmaXJzdFxuICAvLyBpdGVyYXRlZCBwcm9wZXJ0eSBpcyBhbiBvYmplY3QncyBvd24gcHJvcGVydHkgdGhlbiB0aGVyZSBhcmUgbm8gaW5oZXJpdGVkXG4gIC8vIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgdmFyIHJlc3VsdDtcbiAgLy8gSW4gbW9zdCBlbnZpcm9ubWVudHMgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMgYXJlIGl0ZXJhdGVkIGJlZm9yZVxuICAvLyBpdHMgaW5oZXJpdGVkIHByb3BlcnRpZXMuIElmIHRoZSBsYXN0IGl0ZXJhdGVkIHByb3BlcnR5IGlzIGFuIG9iamVjdCdzXG4gIC8vIG93biBwcm9wZXJ0eSB0aGVuIHRoZXJlIGFyZSBubyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICBiYXNlRm9ySW4odmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHQgPSBrZXk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgcmVzdWx0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1BsYWluT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5pc0ZTQSA9IGlzRlNBO1xuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2xvZGFzaElzcGxhaW5vYmplY3QgPSByZXF1aXJlKCdsb2Rhc2guaXNwbGFpbm9iamVjdCcpO1xuXG52YXIgX2xvZGFzaElzcGxhaW5vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9kYXNoSXNwbGFpbm9iamVjdCk7XG5cbnZhciB2YWxpZEtleXMgPSBbJ3R5cGUnLCAncGF5bG9hZCcsICdlcnJvcicsICdtZXRhJ107XG5cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XG4gIHJldHVybiB2YWxpZEtleXMuaW5kZXhPZihrZXkpID4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzRlNBKGFjdGlvbikge1xuICByZXR1cm4gX2xvZGFzaElzcGxhaW5vYmplY3QyWydkZWZhdWx0J10oYWN0aW9uKSAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5rZXlzKGFjdGlvbikuZXZlcnkoaXNWYWxpZEtleSk7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IoYWN0aW9uKSB7XG4gIHJldHVybiBhY3Rpb24uZXJyb3IgPT09IHRydWU7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBwcm9taXNlTWlkZGxld2FyZTtcblxudmFyIF9mbHV4U3RhbmRhcmRBY3Rpb24gPSByZXF1aXJlKCdmbHV4LXN0YW5kYXJkLWFjdGlvbicpO1xuXG5mdW5jdGlvbiBpc1Byb21pc2UodmFsKSB7XG4gIHJldHVybiB2YWwgJiYgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBwcm9taXNlTWlkZGxld2FyZShfcmVmKSB7XG4gIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGlmICghX2ZsdXhTdGFuZGFyZEFjdGlvbi5pc0ZTQShhY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1Byb21pc2UoYWN0aW9uKSA/IGFjdGlvbi50aGVuKGRpc3BhdGNoKSA6IG5leHQoYWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzUHJvbWlzZShhY3Rpb24ucGF5bG9hZCkgPyBhY3Rpb24ucGF5bG9hZC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKF9leHRlbmRzKHt9LCBhY3Rpb24sIHsgcGF5bG9hZDogcmVzdWx0IH0pKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goX2V4dGVuZHMoe30sIGFjdGlvbiwgeyBwYXlsb2FkOiBlcnJvciwgZXJyb3I6IHRydWUgfSkpO1xuICAgICAgfSkgOiBuZXh0KGFjdGlvbik7XG4gICAgfTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBpbnB1dC90ZXh0YXJlYSB0byBmb2N1c1xuICovXG5cbmZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG4gIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuICAvLyBub3QgZW5hYmxlZCwgb3Igb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWNjZXB0IHRoZSBmb2N1cy5cIiBmb3IgYWxsIGtpbmRzIG9mXG4gIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuICB0cnkge1xuICAgIG5vZGUuZm9jdXMoKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBVcHN0cmVhbSB2ZXJzaW9uIG9mIGV2ZW50IGxpc3RlbmVyLiBEb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzcGVjaWZpY1xuICogbmF0dXJlIG9mIHBsYXRmb3JtLlxuICovXG52YXIgRXZlbnRMaXN0ZW5lciA9IHtcbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgYnViYmxlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0LmF0dGFjaEV2ZW50KSB7XG4gICAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgdGFyZ2V0LmRldGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBjYXB0dXJlOiBmdW5jdGlvbiBjYXB0dXJlKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQXR0ZW1wdGVkIHRvIGxpc3RlbiB0byBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlIG9uIGEgJyArICdicm93c2VyIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgY2FwdHVyZSBwaGFzZS4gWW91ciBhcHBsaWNhdGlvbiAnICsgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGVtcHR5RnVuY3Rpb25cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0KCkge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRMaXN0ZW5lcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4yLjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbD1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGJhPXJlcXVpcmUoXCJmYmpzL2xpYi9FdmVudExpc3RlbmVyXCIpLGRhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksZmE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxpYT1yZXF1aXJlKFwiZmJqcy9saWIvZm9jdXNOb2RlXCIpLEQ9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpO1xuZnVuY3Rpb24gRShhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsZD0wO2Q8YjtkKyspYys9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiPUVycm9yKGMrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtiLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCI7Yi5mcmFtZXNUb1BvcD0xO3Rocm93IGI7fWFhP3ZvaWQgMDpFKFwiMjI3XCIpO1xudmFyIG9hPXtjaGlsZHJlbjohMCxkYW5nZXJvdXNseVNldElubmVySFRNTDohMCxkZWZhdWx0VmFsdWU6ITAsZGVmYXVsdENoZWNrZWQ6ITAsaW5uZXJIVE1MOiEwLHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZzohMCxzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmc6ITAsc3R5bGU6ITB9O2Z1bmN0aW9uIHBhKGEsYil7cmV0dXJuKGEmYik9PT1ifVxudmFyIHRhPXtNVVNUX1VTRV9QUk9QRVJUWToxLEhBU19CT09MRUFOX1ZBTFVFOjQsSEFTX05VTUVSSUNfVkFMVUU6OCxIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRToyNCxIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFOjMyLEhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRTo2NCxpbmplY3RET01Qcm9wZXJ0eUNvbmZpZzpmdW5jdGlvbihhKXt2YXIgYj10YSxjPWEuUHJvcGVydGllc3x8e30sZD1hLkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXN8fHt9LGU9YS5ET01BdHRyaWJ1dGVOYW1lc3x8e307YT1hLkRPTU11dGF0aW9uTWV0aG9kc3x8e307Zm9yKHZhciBmIGluIGMpe3VhLmhhc093blByb3BlcnR5KGYpP0UoXCI0OFwiLGYpOnZvaWQgMDt2YXIgZz1mLnRvTG93ZXJDYXNlKCksaD1jW2ZdO2c9e2F0dHJpYnV0ZU5hbWU6ZyxhdHRyaWJ1dGVOYW1lc3BhY2U6bnVsbCxwcm9wZXJ0eU5hbWU6ZixtdXRhdGlvbk1ldGhvZDpudWxsLG11c3RVc2VQcm9wZXJ0eTpwYShoLGIuTVVTVF9VU0VfUFJPUEVSVFkpLFxuaGFzQm9vbGVhblZhbHVlOnBhKGgsYi5IQVNfQk9PTEVBTl9WQUxVRSksaGFzTnVtZXJpY1ZhbHVlOnBhKGgsYi5IQVNfTlVNRVJJQ19WQUxVRSksaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6cGEoaCxiLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKSxoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOnBhKGgsYi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFKSxoYXNTdHJpbmdCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSl9OzE+PWcuaGFzQm9vbGVhblZhbHVlK2cuaGFzTnVtZXJpY1ZhbHVlK2cuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZT92b2lkIDA6RShcIjUwXCIsZik7ZS5oYXNPd25Qcm9wZXJ0eShmKSYmKGcuYXR0cmlidXRlTmFtZT1lW2ZdKTtkLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZFtmXSk7YS5oYXNPd25Qcm9wZXJ0eShmKSYmKGcubXV0YXRpb25NZXRob2Q9YVtmXSk7dWFbZl09Z319fSx1YT17fTtcbmZ1bmN0aW9uIHZhKGEsYil7aWYob2EuaGFzT3duUHJvcGVydHkoYSl8fDI8YS5sZW5ndGgmJihcIm9cIj09PWFbMF18fFwiT1wiPT09YVswXSkmJihcIm5cIj09PWFbMV18fFwiTlwiPT09YVsxXSkpcmV0dXJuITE7aWYobnVsbD09PWIpcmV0dXJuITA7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiYm9vbGVhblwiOnJldHVybiBvYS5oYXNPd25Qcm9wZXJ0eShhKT9hPSEwOihiPXdhKGEpKT9hPWIuaGFzQm9vbGVhblZhbHVlfHxiLmhhc1N0cmluZ0Jvb2xlYW5WYWx1ZXx8Yi5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOihhPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpLGE9XCJkYXRhLVwiPT09YXx8XCJhcmlhLVwiPT09YSksYTtjYXNlIFwidW5kZWZpbmVkXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwib2JqZWN0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gd2EoYSl7cmV0dXJuIHVhLmhhc093blByb3BlcnR5KGEpP3VhW2FdOm51bGx9XG52YXIgeGE9dGEseWE9eGEuTVVTVF9VU0VfUFJPUEVSVFksSz14YS5IQVNfQk9PTEVBTl9WQUxVRSx6YT14YS5IQVNfTlVNRVJJQ19WQUxVRSxBYT14YS5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxCYT14YS5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLENhPXhhLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSxEYT17UHJvcGVydGllczp7YWxsb3dGdWxsU2NyZWVuOkssYXN5bmM6SyxhdXRvRm9jdXM6SyxhdXRvUGxheTpLLGNhcHR1cmU6QmEsY2hlY2tlZDp5YXxLLGNvbHM6QWEsY29udGVudEVkaXRhYmxlOkNhLGNvbnRyb2xzOkssXCJkZWZhdWx0XCI6SyxkZWZlcjpLLGRpc2FibGVkOkssZG93bmxvYWQ6QmEsZHJhZ2dhYmxlOkNhLGZvcm1Ob1ZhbGlkYXRlOkssaGlkZGVuOkssbG9vcDpLLG11bHRpcGxlOnlhfEssbXV0ZWQ6eWF8Syxub1ZhbGlkYXRlOkssb3BlbjpLLHBsYXlzSW5saW5lOksscmVhZE9ubHk6SyxyZXF1aXJlZDpLLHJldmVyc2VkOksscm93czpBYSxyb3dTcGFuOnphLFxuc2NvcGVkOkssc2VhbWxlc3M6SyxzZWxlY3RlZDp5YXxLLHNpemU6QWEsc3RhcnQ6emEsc3BhbjpBYSxzcGVsbENoZWNrOkNhLHN0eWxlOjAsdGFiSW5kZXg6MCxpdGVtU2NvcGU6SyxhY2NlcHRDaGFyc2V0OjAsY2xhc3NOYW1lOjAsaHRtbEZvcjowLGh0dHBFcXVpdjowLHZhbHVlOkNhfSxET01BdHRyaWJ1dGVOYW1lczp7YWNjZXB0Q2hhcnNldDpcImFjY2VwdC1jaGFyc2V0XCIsY2xhc3NOYW1lOlwiY2xhc3NcIixodG1sRm9yOlwiZm9yXCIsaHR0cEVxdWl2OlwiaHR0cC1lcXVpdlwifSxET01NdXRhdGlvbk1ldGhvZHM6e3ZhbHVlOmZ1bmN0aW9uKGEsYil7aWYobnVsbD09YilyZXR1cm4gYS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcIm51bWJlclwiIT09YS50eXBlfHwhMT09PWEuaGFzQXR0cmlidXRlKFwidmFsdWVcIik/YS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrYik6YS52YWxpZGl0eSYmIWEudmFsaWRpdHkuYmFkSW5wdXQmJmEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSYmXG5hLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitiKX19fSxFYT14YS5IQVNfU1RSSU5HX0JPT0xFQU5fVkFMVUUsTT17eGxpbms6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIseG1sOlwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCJ9LEdhPXtQcm9wZXJ0aWVzOnthdXRvUmV2ZXJzZTpFYSxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOkVhLHByZXNlcnZlQWxwaGE6RWF9LERPTUF0dHJpYnV0ZU5hbWVzOnthdXRvUmV2ZXJzZTpcImF1dG9SZXZlcnNlXCIsZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZDpcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixwcmVzZXJ2ZUFscGhhOlwicHJlc2VydmVBbHBoYVwifSxET01BdHRyaWJ1dGVOYW1lc3BhY2VzOnt4bGlua0FjdHVhdGU6TS54bGluayx4bGlua0FyY3JvbGU6TS54bGluayx4bGlua0hyZWY6TS54bGluayx4bGlua1JvbGU6TS54bGluayx4bGlua1Nob3c6TS54bGluayx4bGlua1RpdGxlOk0ueGxpbmsseGxpbmtUeXBlOk0ueGxpbmssXG54bWxCYXNlOk0ueG1sLHhtbExhbmc6TS54bWwseG1sU3BhY2U6TS54bWx9fSxIYT0vW1xcLVxcOl0oW2Etel0pL2c7ZnVuY3Rpb24gSWEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeC1oZWlnaHQgeGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGUgeG1sOmJhc2UgeG1sbnM6eGxpbmsgeG1sOmxhbmcgeG1sOnNwYWNlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEhhLFxuSWEpO0dhLlByb3BlcnRpZXNbYl09MDtHYS5ET01BdHRyaWJ1dGVOYW1lc1tiXT1hfSk7eGEuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoRGEpO3hhLmluamVjdERPTVByb3BlcnR5Q29uZmlnKEdhKTtcbnZhciBQPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW5qZWN0aW9uOntpbmplY3RFcnJvclV0aWxzOmZ1bmN0aW9uKGEpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBhLmludm9rZUd1YXJkZWRDYWxsYmFjaz9FKFwiMTk3XCIpOnZvaWQgMDtKYT1hLmludm9rZUd1YXJkZWRDYWxsYmFja319LGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7SmEuYXBwbHkoUCxhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe1AuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihQLmhhc0NhdWdodEVycm9yKCkpe3ZhciBxPVAuY2xlYXJDYXVnaHRFcnJvcigpO1AuX2hhc1JldGhyb3dFcnJvcnx8KFAuX2hhc1JldGhyb3dFcnJvcj0hMCxQLl9yZXRocm93RXJyb3I9XG5xKX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBLYS5hcHBseShQLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIFAuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoUC5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVAuX2NhdWdodEVycm9yO1AuX2NhdWdodEVycm9yPW51bGw7UC5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9RShcIjE5OFwiKX19O2Z1bmN0aW9uIEphKGEsYixjLGQsZSxmLGcsaCxrKXtQLl9oYXNDYXVnaHRFcnJvcj0hMTtQLl9jYXVnaHRFcnJvcj1udWxsO3ZhciBxPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLHEpfWNhdGNoKHYpe1AuX2NhdWdodEVycm9yPXYsUC5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxuZnVuY3Rpb24gS2EoKXtpZihQLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPVAuX3JldGhyb3dFcnJvcjtQLl9yZXRocm93RXJyb3I9bnVsbDtQLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBMYT1udWxsLE1hPXt9O1xuZnVuY3Rpb24gTmEoKXtpZihMYSlmb3IodmFyIGEgaW4gTWEpe3ZhciBiPU1hW2FdLGM9TGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpFKFwiOTZcIixhKTtpZighT2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RShcIjk3XCIsYSk7T2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtQYS5oYXNPd25Qcm9wZXJ0eShoKT9FKFwiOTlcIixoKTp2b2lkIDA7UGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmUWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KFFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6RShcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIFFhKGEsYixjKXtSYVthXT9FKFwiMTAwXCIsYSk6dm9pZCAwO1JhW2FdPWI7U2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgT2E9W10sUGE9e30sUmE9e30sU2E9e307ZnVuY3Rpb24gVGEoYSl7TGE/RShcIjEwMVwiKTp2b2lkIDA7TGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7TmEoKX1mdW5jdGlvbiBVYShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtNYS5oYXNPd25Qcm9wZXJ0eShjKSYmTWFbY109PT1kfHwoTWFbY10/RShcIjEwMlwiLGMpOnZvaWQgMCxNYVtjXT1kLGI9ITApfWImJk5hKCl9XG52YXIgVmE9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpPYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6UGEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6UmEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczpTYSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpUYSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6VWF9KSxXYT1udWxsLFhhPW51bGwsWWE9bnVsbDtmdW5jdGlvbiBaYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PVlhKGQpO1AuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiAkYShhLGIpe251bGw9PWI/RShcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gYWIoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIGJiPW51bGw7XG5mdW5jdGlvbiBjYihhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylaYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJlphKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIGRiKGEpe3JldHVybiBjYihhLCEwKX1mdW5jdGlvbiBnYihhKXtyZXR1cm4gY2IoYSwhMSl9dmFyIGhiPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOlRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpVYX07XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPVdhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0UoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBqYihhLGIsYyxkKXtmb3IodmFyIGUsZj0wO2Y8T2EubGVuZ3RoO2YrKyl7dmFyIGc9T2FbZl07ZyYmKGc9Zy5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9JGEoZSxnKSl9cmV0dXJuIGV9ZnVuY3Rpb24ga2IoYSl7YSYmKGJiPSRhKGJiLGEpKX1mdW5jdGlvbiBsYihhKXt2YXIgYj1iYjtiYj1udWxsO2ImJihhP2FiKGIsZGIpOmFiKGIsZ2IpLGJiP0UoXCI5NVwiKTp2b2lkIDAsUC5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9dmFyIG1iPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpoYixnZXRMaXN0ZW5lcjppYixleHRyYWN0RXZlbnRzOmpiLGVucXVldWVFdmVudHM6a2IscHJvY2Vzc0V2ZW50UXVldWU6bGJ9KSxuYj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxRPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrbmIsb2I9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIituYjtcbmZ1bmN0aW9uIHBiKGEpe2lmKGFbUV0pcmV0dXJuIGFbUV07Zm9yKHZhciBiPVtdOyFhW1FdOylpZihiLnB1c2goYSksYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7dmFyIGM9dm9pZCAwLGQ9YVtRXTtpZig1PT09ZC50YWd8fDY9PT1kLnRhZylyZXR1cm4gZDtmb3IoO2EmJihkPWFbUV0pO2E9Yi5wb3AoKSljPWQ7cmV0dXJuIGN9ZnVuY3Rpb24gcWIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0UoXCIzM1wiKX1mdW5jdGlvbiByYihhKXtyZXR1cm4gYVtvYl18fG51bGx9XG52YXIgc2I9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW1FdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOnBiLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW1FdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6cWIsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpyYix1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtvYl09Yn19KTtmdW5jdGlvbiB0YihhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gdWIoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT10YihhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1cbmZ1bmN0aW9uIHZiKGEsYixjKXtpZihiPWliKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9JGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9JGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gd2IoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmdWIoYS5fdGFyZ2V0SW5zdCx2YixhKX1mdW5jdGlvbiB4YihhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj90YihiKTpudWxsO3ViKGIsdmIsYSl9fVxuZnVuY3Rpb24geWIoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9aWIoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPSRhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPSRhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiB6YihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJnliKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBBYihhKXthYihhLHdiKX1cbmZ1bmN0aW9uIEJiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxnPTAsaD1lO2g7aD10YihoKSlnKys7aD0wO2Zvcih2YXIgaz1mO2s7az10YihrKSloKys7Zm9yKDswPGctaDspZT10YihlKSxnLS07Zm9yKDswPGgtZzspZj10YihmKSxoLS07Zm9yKDtnLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT10YihlKTtmPXRiKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtnPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztlLnB1c2goYyk7Yz10YihjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2MucHVzaChkKTtkPXRiKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspeWIoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspeWIoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgQ2I9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpBYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXthYihhLHhiKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOkJiLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe2FiKGEsemIpfX0pLERiPW51bGw7ZnVuY3Rpb24gRWIoKXshRGImJmwuY2FuVXNlRE9NJiYoRGI9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4gRGJ9dmFyIFM9e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBGYigpe2lmKFMuX2ZhbGxiYWNrVGV4dClyZXR1cm4gUy5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9Uy5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPUdiKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtTLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gUy5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIEdiKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gUy5fcm9vdD9TLl9yb290LnZhbHVlOlMuX3Jvb3RbRWIoKV19XG52YXIgSGI9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxJYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIFQoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkIoVC5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxIYi5sZW5ndGg7YSsrKXRoaXNbSGJbYV1dPW51bGx9fSk7VC5JbnRlcmZhY2U9SWI7VC5hdWdtZW50Q2xhc3M9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPXRoaXMucHJvdG90eXBlO3ZhciBkPW5ldyBjO0IoZCxhLnByb3RvdHlwZSk7YS5wcm90b3R5cGU9ZDthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hO2EuSW50ZXJmYWNlPUIoe30sdGhpcy5JbnRlcmZhY2UsYik7YS5hdWdtZW50Q2xhc3M9dGhpcy5hdWdtZW50Q2xhc3M7SmIoYSl9O0piKFQpO2Z1bmN0aW9uIEtiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gTGIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkUoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIEpiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPUtiO2EucmVsZWFzZT1MYn1mdW5jdGlvbiBNYihhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoTWIse2RhdGE6bnVsbH0pO2Z1bmN0aW9uIE5iKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhOYix7ZGF0YTpudWxsfSk7dmFyIFBiPVs5LDEzLDI3LDMyXSxWYj1sLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csV2I9bnVsbDtsLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoV2I9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgWGI7XG5pZihYYj1sLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIVdiKXt2YXIgWWI9d2luZG93Lm9wZXJhO1hiPSEoXCJvYmplY3RcIj09PXR5cGVvZiBZYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFliLnZlcnNpb24mJjEyPj1wYXJzZUludChZYi52ZXJzaW9uKCksMTApKX1cbnZhciBaYj1YYiwkYj1sLmNhblVzZURPTSYmKCFWYnx8V2ImJjg8V2ImJjExPj1XYiksYWM9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksYmM9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25FbmQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblN0YXJ0IHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uVXBkYXRlIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfX0sY2M9ITE7XG5mdW5jdGlvbiBkYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PVBiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZWMoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgZmM9ITE7ZnVuY3Rpb24gZ2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIGVjKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtjYz0hMDtyZXR1cm4gYWM7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09YWMmJmNjP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGhjKGEsYil7aWYoZmMpcmV0dXJuXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09YXx8IVZiJiZkYyhhLGIpPyhhPUZiKCksUy5fcm9vdD1udWxsLFMuX3N0YXJ0VGV4dD1udWxsLFMuX2ZhbGxiYWNrVGV4dD1udWxsLGZjPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BQYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiAkYj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBpYz17ZXZlbnRUeXBlczpiYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKFZiKWI6e3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25TdGFydFwiOnZhciBmPWJjLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpmPWJjLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6Zj1iYy5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2UgZmM/ZGMoYSxjKSYmKGY9YmMuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1iYy5jb21wb3NpdGlvblN0YXJ0KTtmPygkYiYmKGZjfHxmIT09YmMuY29tcG9zaXRpb25TdGFydD9mPT09YmMuY29tcG9zaXRpb25FbmQmJmZjJiYoZT1GYigpKTooUy5fcm9vdD1kLFMuX3N0YXJ0VGV4dD1HYigpLGZjPSEwKSksZj1NYi5nZXRQb29sZWQoZixiLGMsZCksZT9mLmRhdGE9XG5lOihlPWVjKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxBYihmKSxlPWYpOmU9bnVsbDsoYT1aYj9nYyhhLGMpOmhjKGEsYykpPyhiPU5iLmdldFBvb2xlZChiYy5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsQWIoYikpOmI9bnVsbDtyZXR1cm5bZSxiXX19LGpjPW51bGwsa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGE9WGEoYSkpe2pjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgamMucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6RShcIjE5NFwiKTt2YXIgYj1XYShhLnN0YXRlTm9kZSk7amMucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fXZhciBuYz17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtqYz1hfX07ZnVuY3Rpb24gb2MoYSl7a2M/bGM/bGMucHVzaChhKTpsYz1bYV06a2M9YX1cbmZ1bmN0aW9uIHBjKCl7aWYoa2Mpe3ZhciBhPWtjLGI9bGM7bGM9a2M9bnVsbDttYyhhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspbWMoYlthXSl9fXZhciBxYz1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246bmMsZW5xdWV1ZVN0YXRlUmVzdG9yZTpvYyxyZXN0b3JlU3RhdGVJZk5lZWRlZDpwY30pO2Z1bmN0aW9uIHJjKGEsYil7cmV0dXJuIGEoYil9dmFyIHNjPSExO2Z1bmN0aW9uIHRjKGEsYil7aWYoc2MpcmV0dXJuIHJjKGEsYik7c2M9ITA7dHJ5e3JldHVybiByYyhhLGIpfWZpbmFsbHl7c2M9ITEscGMoKX19dmFyIHVjPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O1xuZnVuY3Rpb24gdmMoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISF1Y1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gd2MoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB4YztsLmNhblVzZURPTSYmKHhjPWRvY3VtZW50LmltcGxlbWVudGF0aW9uJiZkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlJiYhMCE9PWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJcIixcIlwiKSk7XG5mdW5jdGlvbiB5YyhhLGIpe2lmKCFsLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTtiPVwib25cIithO3ZhciBjPWIgaW4gZG9jdW1lbnQ7Y3x8KGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxjLnNldEF0dHJpYnV0ZShiLFwicmV0dXJuO1wiKSxjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjW2JdKTshYyYmeGMmJlwid2hlZWxcIj09PWEmJihjPWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJFdmVudHMud2hlZWxcIixcIjMuMFwiKSk7cmV0dXJuIGN9ZnVuY3Rpb24gemMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIEFjKGEpe3ZhciBiPXpjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZSxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSkse2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9bnVsbDtkZWxldGUgYVtiXX19fVxuZnVuY3Rpb24gQmMoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPUFjKGEpKX1mdW5jdGlvbiBDYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9emMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX12YXIgRGM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ2hhbmdlIHRvcENsaWNrIHRvcEZvY3VzIHRvcElucHV0IHRvcEtleURvd24gdG9wS2V5VXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07XG5mdW5jdGlvbiBFYyhhLGIsYyl7YT1ULmdldFBvb2xlZChEYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO29jKGMpO0FiKGEpO3JldHVybiBhfXZhciBGYz1udWxsLEdjPW51bGw7ZnVuY3Rpb24gSGMoYSl7a2IoYSk7bGIoITEpfWZ1bmN0aW9uIEljKGEpe3ZhciBiPXFiKGEpO2lmKENjKGIpKXJldHVybiBhfWZ1bmN0aW9uIEpjKGEsYil7aWYoXCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEtjPSExO2wuY2FuVXNlRE9NJiYoS2M9eWMoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gTGMoKXtGYyYmKEZjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLE1jKSxHYz1GYz1udWxsKX1mdW5jdGlvbiBNYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmSWMoR2MpJiYoYT1FYyhHYyxhLHdjKGEpKSx0YyhIYyxhKSl9XG5mdW5jdGlvbiBOYyhhLGIsYyl7XCJ0b3BGb2N1c1wiPT09YT8oTGMoKSxGYz1iLEdjPWMsRmMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsTWMpKTpcInRvcEJsdXJcIj09PWEmJkxjKCl9ZnVuY3Rpb24gT2MoYSl7aWYoXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIj09PWF8fFwidG9wS2V5VXBcIj09PWF8fFwidG9wS2V5RG93blwiPT09YSlyZXR1cm4gSWMoR2MpfWZ1bmN0aW9uIFBjKGEsYil7aWYoXCJ0b3BDbGlja1wiPT09YSlyZXR1cm4gSWMoYil9ZnVuY3Rpb24gJGMoYSxiKXtpZihcInRvcElucHV0XCI9PT1hfHxcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gSWMoYil9XG52YXIgYWQ9e2V2ZW50VHlwZXM6RGMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpLYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/cWIoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1KYztlbHNlIGlmKHZjKGUpKWlmKEtjKWc9JGM7ZWxzZXtnPU9jO3ZhciBoPU5jfWVsc2UgZj1lLm5vZGVOYW1lLCFmfHxcImlucHV0XCIhPT1mLnRvTG93ZXJDYXNlKCl8fFwiY2hlY2tib3hcIiE9PWUudHlwZSYmXCJyYWRpb1wiIT09ZS50eXBlfHwoZz1QYyk7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gRWMoZyxjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJihhPVwiXCIrZS52YWx1ZSxlLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpIT09XG5hJiZlLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYSkpfX07ZnVuY3Rpb24gYmQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKGJkLHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KTt2YXIgY2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIGRkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9Y2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBlZCgpe3JldHVybiBkZH1mdW5jdGlvbiBmZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9XG5iZC5hdWdtZW50Q2xhc3MoZmQse3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSk7XG52YXIgZ2Q9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfX0saGQ9e2V2ZW50VHlwZXM6Z2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3BiKGIpOm51bGwpOmE9bnVsbDtpZihhPT09XG5iKXJldHVybiBudWxsO3ZhciBmPW51bGw9PWE/ZTpxYihhKTtlPW51bGw9PWI/ZTpxYihiKTt2YXIgZz1mZC5nZXRQb29sZWQoZ2QubW91c2VMZWF2ZSxhLGMsZCk7Zy50eXBlPVwibW91c2VsZWF2ZVwiO2cudGFyZ2V0PWY7Zy5yZWxhdGVkVGFyZ2V0PWU7Yz1mZC5nZXRQb29sZWQoZ2QubW91c2VFbnRlcixiLGMsZCk7Yy50eXBlPVwibW91c2VlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PWY7QmIoZyxjLGEsYik7cmV0dXJuW2csY119fSxpZD1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcjtmdW5jdGlvbiBqZChhKXthPWEudHlwZTtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6bnVsbH1cbmZ1bmN0aW9uIGtkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiW1wicmV0dXJuXCJdOyliPWJbXCJyZXR1cm5cIl07ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7YltcInJldHVyblwiXTspaWYoYj1iW1wicmV0dXJuXCJdLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gbGQoYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09a2QoYSk6ITF9ZnVuY3Rpb24gbWQoYSl7MiE9PWtkKGEpP0UoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gbmQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9a2QoYSksMz09PWI/RShcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jW1wicmV0dXJuXCJdLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBtZChlKSxhO2lmKGc9PT1kKXJldHVybiBtZChlKSxiO2c9Zy5zaWJsaW5nfUUoXCIxODhcIil9aWYoY1tcInJldHVyblwiXSE9PWRbXCJyZXR1cm5cIl0pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6RShcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0UoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9FKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIG9kKGEpe2E9bmQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBwZChhKXthPW5kKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQmJjQhPT1iLnRhZyliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9dmFyIHFkPVtdO1xuZnVuY3Rpb24gcmQoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjO2ZvcihjPWI7Y1tcInJldHVyblwiXTspYz1jW1wicmV0dXJuXCJdO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9cGIoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxzZChhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsd2MoYS5uYXRpdmVFdmVudCkpfXZhciB0ZD0hMCxzZD12b2lkIDA7ZnVuY3Rpb24gdWQoYSl7dGQ9ISFhfWZ1bmN0aW9uIFUoYSxiLGMpe3JldHVybiBjP2JhLmxpc3RlbihjLGIsdmQuYmluZChudWxsLGEpKTpudWxsfWZ1bmN0aW9uIHdkKGEsYixjKXtyZXR1cm4gYz9iYS5jYXB0dXJlKGMsYix2ZC5iaW5kKG51bGwsYSkpOm51bGx9XG5mdW5jdGlvbiB2ZChhLGIpe2lmKHRkKXt2YXIgYz13YyhiKTtjPXBiKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09a2QoYyl8fChjPW51bGwpO2lmKHFkLmxlbmd0aCl7dmFyIGQ9cWQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7dGMocmQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5xZC5sZW5ndGgmJnFkLnB1c2goYSl9fX1cbnZhciB4ZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gdGR9LGdldCBfaGFuZGxlVG9wTGV2ZWwoKXtyZXR1cm4gc2R9LHNldEhhbmRsZVRvcExldmVsOmZ1bmN0aW9uKGEpe3NkPWF9LHNldEVuYWJsZWQ6dWQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRkfSx0cmFwQnViYmxlZEV2ZW50OlUsdHJhcENhcHR1cmVkRXZlbnQ6d2QsZGlzcGF0Y2hFdmVudDp2ZH0pO2Z1bmN0aW9uIHlkKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgemQ9e2FuaW1hdGlvbmVuZDp5ZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjp5ZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OnlkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOnlkKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sQWQ9e30sQmQ9e307bC5jYW5Vc2VET00mJihCZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSB6ZC5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSB6ZC5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSB6ZC5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSB6ZC50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gQ2QoYSl7aWYoQWRbYV0pcmV0dXJuIEFkW2FdO2lmKCF6ZFthXSlyZXR1cm4gYTt2YXIgYj16ZFthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBCZClyZXR1cm4gQWRbYV09YltjXTtyZXR1cm5cIlwifVxudmFyIERkPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQW5pbWF0aW9uRW5kOkNkKFwiYW5pbWF0aW9uZW5kXCIpfHxcImFuaW1hdGlvbmVuZFwiLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpDZChcImFuaW1hdGlvbml0ZXJhdGlvblwiKXx8XCJhbmltYXRpb25pdGVyYXRpb25cIix0b3BBbmltYXRpb25TdGFydDpDZChcImFuaW1hdGlvbnN0YXJ0XCIpfHxcImFuaW1hdGlvbnN0YXJ0XCIsdG9wQmx1cjpcImJsdXJcIix0b3BDYW5jZWw6XCJjYW5jZWxcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BDaGFuZ2U6XCJjaGFuZ2VcIix0b3BDbGljazpcImNsaWNrXCIsdG9wQ2xvc2U6XCJjbG9zZVwiLHRvcENvbXBvc2l0aW9uRW5kOlwiY29tcG9zaXRpb25lbmRcIix0b3BDb21wb3NpdGlvblN0YXJ0OlwiY29tcG9zaXRpb25zdGFydFwiLHRvcENvbXBvc2l0aW9uVXBkYXRlOlwiY29tcG9zaXRpb251cGRhdGVcIix0b3BDb250ZXh0TWVudTpcImNvbnRleHRtZW51XCIsdG9wQ29weTpcImNvcHlcIixcbnRvcEN1dDpcImN1dFwiLHRvcERvdWJsZUNsaWNrOlwiZGJsY2xpY2tcIix0b3BEcmFnOlwiZHJhZ1wiLHRvcERyYWdFbmQ6XCJkcmFnZW5kXCIsdG9wRHJhZ0VudGVyOlwiZHJhZ2VudGVyXCIsdG9wRHJhZ0V4aXQ6XCJkcmFnZXhpdFwiLHRvcERyYWdMZWF2ZTpcImRyYWdsZWF2ZVwiLHRvcERyYWdPdmVyOlwiZHJhZ292ZXJcIix0b3BEcmFnU3RhcnQ6XCJkcmFnc3RhcnRcIix0b3BEcm9wOlwiZHJvcFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wRm9jdXM6XCJmb2N1c1wiLHRvcElucHV0OlwiaW5wdXRcIix0b3BLZXlEb3duOlwia2V5ZG93blwiLHRvcEtleVByZXNzOlwia2V5cHJlc3NcIix0b3BLZXlVcDpcImtleXVwXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIixcbnRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNjcm9sbDpcInNjcm9sbFwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsdG9wU2VsZWN0aW9uQ2hhbmdlOlwic2VsZWN0aW9uY2hhbmdlXCIsdG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRleHRJbnB1dDpcInRleHRJbnB1dFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVG9nZ2xlOlwidG9nZ2xlXCIsdG9wVG91Y2hDYW5jZWw6XCJ0b3VjaGNhbmNlbFwiLHRvcFRvdWNoRW5kOlwidG91Y2hlbmRcIix0b3BUb3VjaE1vdmU6XCJ0b3VjaG1vdmVcIixcbnRvcFRvdWNoU3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsdG9wVHJhbnNpdGlvbkVuZDpDZChcInRyYW5zaXRpb25lbmRcIil8fFwidHJhbnNpdGlvbmVuZFwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLHRvcFdhaXRpbmc6XCJ3YWl0aW5nXCIsdG9wV2hlZWw6XCJ3aGVlbFwifSxFZD17fSxGZD0wLEdkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBIZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxHZCl8fChhW0dkXT1GZCsrLEVkW2FbR2RdXT17fSk7cmV0dXJuIEVkW2FbR2RdXX1mdW5jdGlvbiBJZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZChhLGIpe3ZhciBjPUlkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUlkKGMpfX1mdW5jdGlvbiBLZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgTGQ9bC5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxNZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LE5kPW51bGwsT2Q9bnVsbCxQZD1udWxsLFFkPSExO1xuZnVuY3Rpb24gUmQoYSxiKXtpZihRZHx8bnVsbD09TmR8fE5kIT09ZGEoKSlyZXR1cm4gbnVsbDt2YXIgYz1OZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZLZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIFBkJiZlYShQZCxjKT9udWxsOihQZD1jLGE9VC5nZXRQb29sZWQoTWQuc2VsZWN0LE9kLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9TmQsQWIoYSksYSl9XG52YXIgU2Q9e2V2ZW50VHlwZXM6TWQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9SGQoZSk7Zj1TYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP3FiKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYodmMoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpTmQ9ZSxPZD1iLFBkPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpQZD1PZD1OZD1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjpRZD0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiBRZD0hMSxSZChjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihMZClicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIFJkKGMsZCl9cmV0dXJuIG51bGx9fTtmdW5jdGlvbiBUZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoVGQse2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pO2Z1bmN0aW9uIFVkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhVZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pO2Z1bmN0aW9uIFZkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1iZC5hdWdtZW50Q2xhc3MoVmQse3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gV2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgWGQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LFlkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifTtmdW5jdGlvbiBaZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9XG5iZC5hdWdtZW50Q2xhc3MoWmQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9WGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9V2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP1lkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTplZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/V2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9XZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pO2Z1bmN0aW9uICRkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1mZC5hdWdtZW50Q2xhc3MoJGQse2RhdGFUcmFuc2ZlcjpudWxsfSk7ZnVuY3Rpb24gYWUoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWJkLmF1Z21lbnRDbGFzcyhhZSx7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmVkfSk7ZnVuY3Rpb24gYmUoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKGJlLHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pO1xuZnVuY3Rpb24gY2UoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWZkLmF1Z21lbnRDbGFzcyhjZSx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KTt2YXIgZGU9e30sZWU9e307XG5cImFib3J0IGFuaW1hdGlvbkVuZCBhbmltYXRpb25JdGVyYXRpb24gYW5pbWF0aW9uU3RhcnQgYmx1ciBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkb3VibGVDbGljayBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHNjcm9sbCBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG9nZ2xlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoTW92ZSB0b3VjaFN0YXJ0IHRyYW5zaXRpb25FbmQgdm9sdW1lQ2hhbmdlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdLnRvVXBwZXJDYXNlKCkrXG5hLnNsaWNlKDEpLGM9XCJvblwiK2I7Yj1cInRvcFwiK2I7Yz17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6YyxjYXB0dXJlZDpjK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2JdfTtkZVthXT1jO2VlW2JdPWN9KTtcbnZhciBmZT17ZXZlbnRUeXBlczpkZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWVlW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09V2QoYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjphPVpkO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6YT1WZDticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjphPWZkO2JyZWFrO2Nhc2UgXCJ0b3BEcmFnXCI6Y2FzZSBcInRvcERyYWdFbmRcIjpjYXNlIFwidG9wRHJhZ0VudGVyXCI6Y2FzZSBcInRvcERyYWdFeGl0XCI6Y2FzZSBcInRvcERyYWdMZWF2ZVwiOmNhc2UgXCJ0b3BEcmFnT3ZlclwiOmNhc2UgXCJ0b3BEcmFnU3RhcnRcIjpjYXNlIFwidG9wRHJvcFwiOmE9XG4kZDticmVhaztjYXNlIFwidG9wVG91Y2hDYW5jZWxcIjpjYXNlIFwidG9wVG91Y2hFbmRcIjpjYXNlIFwidG9wVG91Y2hNb3ZlXCI6Y2FzZSBcInRvcFRvdWNoU3RhcnRcIjphPWFlO2JyZWFrO2Nhc2UgXCJ0b3BBbmltYXRpb25FbmRcIjpjYXNlIFwidG9wQW5pbWF0aW9uSXRlcmF0aW9uXCI6Y2FzZSBcInRvcEFuaW1hdGlvblN0YXJ0XCI6YT1UZDticmVhaztjYXNlIFwidG9wVHJhbnNpdGlvbkVuZFwiOmE9YmU7YnJlYWs7Y2FzZSBcInRvcFNjcm9sbFwiOmE9YmQ7YnJlYWs7Y2FzZSBcInRvcFdoZWVsXCI6YT1jZTticmVhaztjYXNlIFwidG9wQ29weVwiOmNhc2UgXCJ0b3BDdXRcIjpjYXNlIFwidG9wUGFzdGVcIjphPVVkO2JyZWFrO2RlZmF1bHQ6YT1UfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7QWIoYik7cmV0dXJuIGJ9fTtzZD1mdW5jdGlvbihhLGIsYyxkKXthPWpiKGEsYixjLGQpO2tiKGEpO2xiKCExKX07aGIuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtcbldhPXNiLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7WGE9c2IuZ2V0SW5zdGFuY2VGcm9tTm9kZTtZYT1zYi5nZXROb2RlRnJvbUluc3RhbmNlO2hiLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46ZmUsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmhkLENoYW5nZUV2ZW50UGx1Z2luOmFkLFNlbGVjdEV2ZW50UGx1Z2luOlNkLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46aWN9KTt2YXIgZ2U9W10saGU9LTE7ZnVuY3Rpb24gVihhKXswPmhlfHwoYS5jdXJyZW50PWdlW2hlXSxnZVtoZV09bnVsbCxoZS0tKX1mdW5jdGlvbiBXKGEsYil7aGUrKztnZVtoZV09YS5jdXJyZW50O2EuY3VycmVudD1ifW5ldyBTZXQ7dmFyIGllPXtjdXJyZW50OkR9LFg9e2N1cnJlbnQ6ITF9LGplPUQ7ZnVuY3Rpb24ga2UoYSl7cmV0dXJuIGxlKGEpP2plOmllLmN1cnJlbnR9XG5mdW5jdGlvbiBtZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEQ7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gbGUoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIG5lKGEpe2xlKGEpJiYoVihYLGEpLFYoaWUsYSkpfVxuZnVuY3Rpb24gb2UoYSxiLGMpe251bGwhPWllLmN1cnNvcj9FKFwiMTY4XCIpOnZvaWQgMDtXKGllLGIsYSk7VyhYLGMsYSl9ZnVuY3Rpb24gcGUoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RShcIjEwOFwiLGpkKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQih7fSxiLGMpfWZ1bmN0aW9uIHFlKGEpe2lmKCFsZShhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEQ7amU9aWUuY3VycmVudDtXKGllLGIsYSk7VyhYLFguY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHJlKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6RShcIjE2OVwiKTtpZihiKXt2YXIgZD1wZShhLGplKTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWQ7VihYLGEpO1YoaWUsYSk7VyhpZSxkLGEpfWVsc2UgVihYLGEpO1coWCxiLGEpfVxuZnVuY3Rpb24gWShhLGIsYyl7dGhpcy50YWc9YTt0aGlzLmtleT1iO3RoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXNbXCJyZXR1cm5cIl09bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPXRoaXMucGVuZGluZ1Byb3BzPXRoaXMucmVmPW51bGw7dGhpcy5pbnRlcm5hbENvbnRleHRUYWc9Yzt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gc2UoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyBZKGEudGFnLGEua2V5LGEuaW50ZXJuYWxDb250ZXh0VGFnKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5wZW5kaW5nUHJvcHM9YjtkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIHRlKGEsYixjKXt2YXIgZD12b2lkIDAsZT1hLnR5cGUsZj1hLmtleTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT8oZD1lLnByb3RvdHlwZSYmZS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD9uZXcgWSgyLGYsYik6bmV3IFkoMCxmLGIpLGQudHlwZT1lLGQucGVuZGluZ1Byb3BzPWEucHJvcHMpOlwic3RyaW5nXCI9PT10eXBlb2YgZT8oZD1uZXcgWSg1LGYsYiksZC50eXBlPWUsZC5wZW5kaW5nUHJvcHM9YS5wcm9wcyk6XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJudW1iZXJcIj09PXR5cGVvZiBlLnRhZz8oZD1lLGQucGVuZGluZ1Byb3BzPWEucHJvcHMpOkUoXCIxMzBcIixudWxsPT1lP2U6dHlwZW9mIGUsXCJcIik7ZC5leHBpcmF0aW9uVGltZT1jO3JldHVybiBkfWZ1bmN0aW9uIHVlKGEsYixjLGQpe2I9bmV3IFkoMTAsZCxiKTtiLnBlbmRpbmdQcm9wcz1hO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIHZlKGEsYixjKXtiPW5ldyBZKDYsbnVsbCxiKTtiLnBlbmRpbmdQcm9wcz1hO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiB3ZShhLGIsYyl7Yj1uZXcgWSg3LGEua2V5LGIpO2IudHlwZT1hLmhhbmRsZXI7Yi5wZW5kaW5nUHJvcHM9YTtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24geGUoYSxiLGMpe2E9bmV3IFkoOSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiB5ZShhLGIsYyl7Yj1uZXcgWSg0LGEua2V5LGIpO2IucGVuZGluZ1Byb3BzPWEuY2hpbGRyZW58fFtdO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIHplPW51bGwsQWU9bnVsbDtcbmZ1bmN0aW9uIEJlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gQ2UoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7emU9QmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0FlPUJlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gRGUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIHplJiZ6ZShhKX1mdW5jdGlvbiBFZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQWUmJkFlKGEpfVxuZnVuY3Rpb24gRmUoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGV4cGlyYXRpb25UaW1lOjAsZmlyc3Q6bnVsbCxsYXN0Om51bGwsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITEsaXNJbml0aWFsaXplZDohMX19ZnVuY3Rpb24gR2UoYSxiKXtudWxsPT09YS5sYXN0P2EuZmlyc3Q9YS5sYXN0PWI6KGEubGFzdC5uZXh0PWIsYS5sYXN0PWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIuZXhwaXJhdGlvblRpbWUpYS5leHBpcmF0aW9uVGltZT1iLmV4cGlyYXRpb25UaW1lfVxuZnVuY3Rpb24gSGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEudXBkYXRlUXVldWU7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9RmUobnVsbCkpO251bGwhPT1jPyhhPWMudXBkYXRlUXVldWUsbnVsbD09PWEmJihhPWMudXBkYXRlUXVldWU9RmUobnVsbCkpKTphPW51bGw7YT1hIT09ZD9hOm51bGw7bnVsbD09PWE/R2UoZCxiKTpudWxsPT09ZC5sYXN0fHxudWxsPT09YS5sYXN0PyhHZShkLGIpLEdlKGEsYikpOihHZShkLGIpLGEubGFzdD1iKX1mdW5jdGlvbiBJZShhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cbmZ1bmN0aW9uIEplKGEsYixjLGQsZSxmKXtudWxsIT09YSYmYS51cGRhdGVRdWV1ZT09PWMmJihjPWIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTpjLmJhc2VTdGF0ZSxleHBpcmF0aW9uVGltZTpjLmV4cGlyYXRpb25UaW1lLGZpcnN0OmMuZmlyc3QsbGFzdDpjLmxhc3QsaXNJbml0aWFsaXplZDpjLmlzSW5pdGlhbGl6ZWQsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITF9KTtjLmV4cGlyYXRpb25UaW1lPTA7Yy5pc0luaXRpYWxpemVkP2E9Yy5iYXNlU3RhdGU6KGE9Yy5iYXNlU3RhdGU9Yi5tZW1vaXplZFN0YXRlLGMuaXNJbml0aWFsaXplZD0hMCk7Zm9yKHZhciBnPSEwLGg9Yy5maXJzdCxrPSExO251bGwhPT1oOyl7dmFyIHE9aC5leHBpcmF0aW9uVGltZTtpZihxPmYpe3ZhciB2PWMuZXhwaXJhdGlvblRpbWU7aWYoMD09PXZ8fHY+cSljLmV4cGlyYXRpb25UaW1lPXE7a3x8KGs9ITAsYy5iYXNlU3RhdGU9YSl9ZWxzZXtrfHwoYy5maXJzdD1oLm5leHQsbnVsbD09PVxuYy5maXJzdCYmKGMubGFzdD1udWxsKSk7aWYoaC5pc1JlcGxhY2UpYT1JZShoLGQsYSxlKSxnPSEwO2Vsc2UgaWYocT1JZShoLGQsYSxlKSlhPWc/Qih7fSxhLHEpOkIoYSxxKSxnPSExO2guaXNGb3JjZWQmJihjLmhhc0ZvcmNlVXBkYXRlPSEwKTtudWxsIT09aC5jYWxsYmFjayYmKHE9Yy5jYWxsYmFja0xpc3QsbnVsbD09PXEmJihxPWMuY2FsbGJhY2tMaXN0PVtdKSxxLnB1c2goaCkpfWg9aC5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fChiLnVwZGF0ZVF1ZXVlPW51bGwpO2t8fChjLmJhc2VTdGF0ZT1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9YS5jYWxsYmFja0xpc3Q7aWYobnVsbCE9PWMpZm9yKGEuY2FsbGJhY2tMaXN0PW51bGwsYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdLGU9ZC5jYWxsYmFjaztkLmNhbGxiYWNrPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGU/RShcIjE5MVwiLGUpOnZvaWQgMDtlLmNhbGwoYil9fVxuZnVuY3Rpb24gTGUoYSxiLGMsZCl7ZnVuY3Rpb24gZShhLGIpe2IudXBkYXRlcj1mO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWF9dmFyIGY9e2lzTW91bnRlZDpsZCxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYyxkLGUpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGc9YihjKTtIZShjLHtleHBpcmF0aW9uVGltZTpnLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLG5leHRDYWxsYmFjazpudWxsLG5leHQ6bnVsbH0pO2EoYyxnKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihjLGQsZSl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZz1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmcscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITAsaXNGb3JjZWQ6ITEsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7XG5hKGMsZyl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihjLGQpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YihjKTtIZShjLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLG5leHRDYWxsYmFjazpudWxsLG5leHQ6bnVsbH0pO2EoYyxlKX19O3JldHVybnthZG9wdENsYXNzSW5zdGFuY2U6ZSxjb25zdHJ1Y3RDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9a2UoYSksZj0yPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXMsZz1mP21lKGEsZCk6RDtiPW5ldyBjKGIsZyk7ZShhLGIpO2YmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1kLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zyk7cmV0dXJuIGJ9LG1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLFxuYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLnN0YXRlTm9kZSxlPWQuc3RhdGV8fG51bGwsZz1hLnBlbmRpbmdQcm9wcztnP3ZvaWQgMDpFKFwiMTU4XCIpO3ZhciBoPWtlKGEpO2QucHJvcHM9ZztkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZT1lO2QucmVmcz1EO2QuY29udGV4dD1tZShhLGgpO251bGwhPWEudHlwZSYmbnVsbCE9YS50eXBlLnByb3RvdHlwZSYmITA9PT1hLnR5cGUucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCYmKGEuaW50ZXJuYWxDb250ZXh0VGFnfD0xKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJihlPWQuc3RhdGUsZC5jb21wb25lbnRXaWxsTW91bnQoKSxlIT09ZC5zdGF0ZSYmZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGQsZC5zdGF0ZSxudWxsKSxlPWEudXBkYXRlUXVldWUsbnVsbCE9PWUmJihkLnN0YXRlPUplKGMsYSxlLGQsZyxiKSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PVxuNCl9LHVwZGF0ZUNsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGUpe3ZhciBnPWIuc3RhdGVOb2RlO2cucHJvcHM9Yi5tZW1vaXplZFByb3BzO2cuc3RhdGU9Yi5tZW1vaXplZFN0YXRlO3ZhciBoPWIubWVtb2l6ZWRQcm9wcyxrPWIucGVuZGluZ1Byb3BzO2t8fChrPWgsbnVsbD09az9FKFwiMTU5XCIpOnZvaWQgMCk7dmFyIHU9Zy5jb250ZXh0LHo9a2UoYik7ej1tZShiLHopO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fGg9PT1rJiZ1PT09enx8KHU9Zy5zdGF0ZSxnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoayx6KSxnLnN0YXRlIT09dSYmZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGcsZy5zdGF0ZSxudWxsKSk7dT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09Yi51cGRhdGVRdWV1ZT9KZShhLGIsYi51cGRhdGVRdWV1ZSxnLGssZSk6dTtpZighKGghPT1rfHx1IT09ZXx8WC5jdXJyZW50fHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksITE7dmFyIEc9aztpZihudWxsPT09aHx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpRz0hMDtlbHNle3ZhciBJPWIuc3RhdGVOb2RlLEw9Yi50eXBlO0c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEkuc2hvdWxkQ29tcG9uZW50VXBkYXRlP0kuc2hvdWxkQ29tcG9uZW50VXBkYXRlKEcsZSx6KTpMLnByb3RvdHlwZSYmTC5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWVhKGgsRyl8fCFlYSh1LGUpOiEwfUc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShrLGUseiksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksYyhiLGspLGQoYixlKSk7Zy5wcm9wcz1rO2cuc3RhdGU9ZTtnLmNvbnRleHQ9ejtyZXR1cm4gR319fXZhciBRZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sUmU9UWU/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxTZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jYWxsXCIpOjYwMTA0LFRlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSxVZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsVmU9UWU/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsV2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gWGUoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPVdlJiZhW1dlXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBZZT1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gWmUoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsIT09YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpe2lmKGIuX293bmVyKXtiPWIuX293bmVyO3ZhciBkPXZvaWQgMDtiJiYoMiE9PWIudGFnP0UoXCIxMTBcIik6dm9pZCAwLGQ9Yi5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkUoXCIxNDdcIixjKTt2YXIgZT1cIlwiK2M7aWYobnVsbCE9PWEmJm51bGwhPT1hLnJlZiYmYS5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGEucmVmO2E9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09RD9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07YS5fc3RyaW5nUmVmPWU7cmV0dXJuIGF9XCJzdHJpbmdcIiE9PXR5cGVvZiBjP0UoXCIxNDhcIik6dm9pZCAwO2IuX293bmVyP3ZvaWQgMDpFKFwiMTQ5XCIsYyl9cmV0dXJuIGN9XG5mdW5jdGlvbiAkZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRShcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gYWYoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1zZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXZlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVplKGIsYyksZFtcInJldHVyblwiXT1hLGQ7ZD10ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpO2QucmVmPVplKGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIHEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj13ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7XG5iW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8OSE9PWIudGFnKXJldHVybiBiPXhlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksYi50eXBlPWMudmFsdWUsYltcInJldHVyblwiXT1hLGI7Yj1lKGIsbnVsbCxkKTtiLnR5cGU9Yy52YWx1ZTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geShhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9eWUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPXVlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5kLGYpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHooYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXZlKFwiXCIrYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBSZTppZihiLnR5cGU9PT1WZSlyZXR1cm4gYj11ZShiLnByb3BzLmNoaWxkcmVuLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMsYi5rZXkpLGJbXCJyZXR1cm5cIl09YSxiO2M9dGUoYixhLmludGVybmFsQ29udGV4dFRhZyxjKTtjLnJlZj1aZShudWxsLGIpO2NbXCJyZXR1cm5cIl09YTtyZXR1cm4gYztjYXNlIFNlOnJldHVybiBiPXdlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGI7Y2FzZSBUZTpyZXR1cm4gYz14ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLFxuYyksYy50eXBlPWIudmFsdWUsY1tcInJldHVyblwiXT1hLGM7Y2FzZSBVZTpyZXR1cm4gYj15ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxifWlmKFllKGIpfHxYZShiKSlyZXR1cm4gYj11ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMsbnVsbCksYltcInJldHVyblwiXT1hLGI7JGUoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBHKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFJlOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09VmU/dShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIFNlOnJldHVybiBjLmtleT09PWU/cShhLGIsYyxkKTpudWxsO2Nhc2UgVGU6cmV0dXJuIG51bGw9PT1cbmU/dihhLGIsYyxkKTpudWxsO2Nhc2UgVWU6cmV0dXJuIGMua2V5PT09ZT95KGEsYixjLGQpOm51bGx9aWYoWWUoYyl8fFhlKGMpKXJldHVybiBudWxsIT09ZT9udWxsOnUoYSxiLGMsZCxudWxsKTskZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgUmU6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PVZlP3UoYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIFNlOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxxKGIsYSxkLGUpO2Nhc2UgVGU6cmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsdihiLGEsZCxlKTtjYXNlIFVlOnJldHVybiBhPVxuYS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHkoYixhLGQsZSl9aWYoWWUoZCl8fFhlKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLHUoYixhLGQsZSxudWxsKTskZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIEwoZSxnLG0sQSl7Zm9yKHZhciBoPW51bGwscj1udWxsLG49Zyx3PWc9MCxrPW51bGw7bnVsbCE9PW4mJnc8bS5sZW5ndGg7dysrKXtuLmluZGV4Pnc/KGs9bixuPW51bGwpOms9bi5zaWJsaW5nO3ZhciB4PUcoZSxuLG1bd10sQSk7aWYobnVsbD09PXgpe251bGw9PT1uJiYobj1rKTticmVha31hJiZuJiZudWxsPT09eC5hbHRlcm5hdGUmJmIoZSxuKTtnPWYoeCxnLHcpO251bGw9PT1yP2g9eDpyLnNpYmxpbmc9eDtyPXg7bj1rfWlmKHc9PT1tLmxlbmd0aClyZXR1cm4gYyhlLG4pLGg7aWYobnVsbD09PW4pe2Zvcig7dzxtLmxlbmd0aDt3KyspaWYobj16KGUsbVt3XSxBKSlnPWYobixnLHcpLG51bGw9PT1yP2g9bjpyLnNpYmxpbmc9bixyPW47cmV0dXJuIGh9Zm9yKG49XG5kKGUsbik7dzxtLmxlbmd0aDt3KyspaWYoaz1JKG4sZSx3LG1bd10sQSkpe2lmKGEmJm51bGwhPT1rLmFsdGVybmF0ZSluW1wiZGVsZXRlXCJdKG51bGw9PT1rLmtleT93Omsua2V5KTtnPWYoayxnLHcpO251bGw9PT1yP2g9azpyLnNpYmxpbmc9aztyPWt9YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gaH1mdW5jdGlvbiBOKGUsZyxtLEEpe3ZhciBoPVhlKG0pO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBoP0UoXCIxNTBcIik6dm9pZCAwO209aC5jYWxsKG0pO251bGw9PW0/RShcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciByPWg9bnVsbCxuPWcsdz1nPTAsaz1udWxsLHg9bS5uZXh0KCk7bnVsbCE9PW4mJiF4LmRvbmU7dysrLHg9bS5uZXh0KCkpe24uaW5kZXg+dz8oaz1uLG49bnVsbCk6az1uLnNpYmxpbmc7dmFyIEo9RyhlLG4seC52YWx1ZSxBKTtpZihudWxsPT09Sil7bnx8KG49ayk7YnJlYWt9YSYmbiYmbnVsbD09PUouYWx0ZXJuYXRlJiZiKGUsbik7Zz1mKEosXG5nLHcpO251bGw9PT1yP2g9SjpyLnNpYmxpbmc9SjtyPUo7bj1rfWlmKHguZG9uZSlyZXR1cm4gYyhlLG4pLGg7aWYobnVsbD09PW4pe2Zvcig7IXguZG9uZTt3KysseD1tLm5leHQoKSl4PXooZSx4LnZhbHVlLEEpLG51bGwhPT14JiYoZz1mKHgsZyx3KSxudWxsPT09cj9oPXg6ci5zaWJsaW5nPXgscj14KTtyZXR1cm4gaH1mb3Iobj1kKGUsbik7IXguZG9uZTt3KysseD1tLm5leHQoKSlpZih4PUkobixlLHcseC52YWx1ZSxBKSxudWxsIT09eCl7aWYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlKW5bXCJkZWxldGVcIl0obnVsbD09PXgua2V5P3c6eC5rZXkpO2c9Zih4LGcsdyk7bnVsbD09PXI/aD14OnIuc2libGluZz14O3I9eH1hJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBofXJldHVybiBmdW5jdGlvbihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1WZSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtcbnZhciBtPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobSlzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBSZTphOnt2YXIgcj1mLmtleTtmb3IobT1kO251bGwhPT1tOyl7aWYobS5rZXk9PT1yKWlmKDEwPT09bS50YWc/Zi50eXBlPT09VmU6bS50eXBlPT09Zi50eXBlKXtjKGEsbS5zaWJsaW5nKTtkPWUobSxmLnR5cGU9PT1WZT9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9WmUobSxmKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsbSk7YnJlYWt9ZWxzZSBiKGEsbSk7bT1tLnNpYmxpbmd9Zi50eXBlPT09VmU/KGQ9dWUoZi5wcm9wcy5jaGlsZHJlbixhLmludGVybmFsQ29udGV4dFRhZyxoLGYua2V5KSxkW1wicmV0dXJuXCJdPWEsYT1kKTooaD10ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpLGgucmVmPVplKGQsZiksaFtcInJldHVyblwiXT1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBTZTphOntmb3IobT1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09XG5tKWlmKDc9PT1kLnRhZyl7YyhhLGQuc2libGluZyk7ZD1lKGQsZixoKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD13ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBUZTphOntpZihudWxsIT09ZClpZig5PT09ZC50YWcpe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLG51bGwsaCk7ZC50eXBlPWYudmFsdWU7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2UgYyhhLGQpO2Q9eGUoZixhLmludGVybmFsQ29udGV4dFRhZyxoKTtkLnR5cGU9Zi52YWx1ZTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgVWU6YTp7Zm9yKG09Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PW0paWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PVxuZi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9eWUoZixhLmludGVybmFsQ29udGV4dFRhZyxoKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpKTooYyhhLGQpLGQ9dmUoZixhLmludGVybmFsQ29udGV4dFRhZyxoKSksZFtcInJldHVyblwiXT1hLGE9ZCxnKGEpO2lmKFllKGYpKXJldHVybiBMKGEsZCxmLGgpO2lmKFhlKGYpKXJldHVybiBOKGEsZCxmLGgpO20mJiRlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpoPWEudHlwZSxFKFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8XG5oLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBiZj1hZighMCksY2Y9YWYoITEpO1xuZnVuY3Rpb24gZGYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2IuY2hpbGQ9bnVsbD09PWE/Y2YoYixudWxsLGMsZCk6YmYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWIucmVmO251bGw9PT1jfHxhJiZhLnJlZj09PWN8fChiLmVmZmVjdFRhZ3w9MTI4KX1mdW5jdGlvbiBoKGEsYixjLGQpe2coYSxiKTtpZighYylyZXR1cm4gZCYmcmUoYiwhMSkscShhLGIpO2M9Yi5zdGF0ZU5vZGU7aWQuY3VycmVudD1iO3ZhciBlPWMucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7ZihhLGIsZSk7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmcmUoYiwhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gayhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P29lKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJm9lKGEsXG5iLmNvbnRleHQsITEpO0koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHEoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RShcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz1zZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXNlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHYoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzprKGIpO2JyZWFrO2Nhc2UgMjpxZShiKTticmVhaztjYXNlIDQ6SShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pfXJldHVybiBudWxsfXZhciB5PWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsdT1hLnVzZVN5bmNTY2hlZHVsaW5nLHo9YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLFxuRz1iLnB1c2hIb3N0Q29udGV4dCxJPWIucHVzaEhvc3RDb250YWluZXIsTD1jLmVudGVySHlkcmF0aW9uU3RhdGUsTj1jLnJlc2V0SHlkcmF0aW9uU3RhdGUsSj1jLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO2E9TGUoZCxlLGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFByb3BzPWJ9LGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFN0YXRlPWJ9KTt2YXIgdz1hLmFkb3B0Q2xhc3NJbnN0YW5jZSxtPWEuY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxBPWEubW91bnRDbGFzc0luc3RhbmNlLE9iPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXJldHVybiB2KGEsYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RShcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMscj1rZShiKTtyPW1lKGIscik7ZD1kKGUscik7Yi5lZmZlY3RUYWd8PVxuMTtcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5yZW5kZXI/KGIudGFnPTIsZT1xZShiKSx3KGIsZCksQShiLGMpLGI9aChhLGIsITAsZSkpOihiLnRhZz0xLGYoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxOmE6e2U9Yi50eXBlO2M9Yi5wZW5kaW5nUHJvcHM7ZD1iLm1lbW9pemVkUHJvcHM7aWYoWC5jdXJyZW50KW51bGw9PT1jJiYoYz1kKTtlbHNlIGlmKG51bGw9PT1jfHxkPT09Yyl7Yj1xKGEsYik7YnJlYWsgYX1kPWtlKGIpO2Q9bWUoYixkKTtlPWUoYyxkKTtiLmVmZmVjdFRhZ3w9MTtmKGEsYixlKTtiLm1lbW9pemVkUHJvcHM9YztiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAyOnJldHVybiBlPXFlKGIpLGQ9dm9pZCAwLG51bGw9PT1hP2Iuc3RhdGVOb2RlP0UoXCIxNTNcIik6KG0oYixiLnBlbmRpbmdQcm9wcyksQShiLGMpLGQ9ITApOmQ9T2IoYSxiLGMpLGgoYSxiLGQsZSk7Y2FzZSAzOnJldHVybiBrKGIpLFxuZT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1lPyhkPWIubWVtb2l6ZWRTdGF0ZSxlPUplKGEsYixlLG51bGwsbnVsbCxjKSxkPT09ZT8oTigpLGI9cShhLGIpKTooZD1lLmVsZW1lbnQscj1iLnN0YXRlTm9kZSwobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmci5oeWRyYXRlJiZMKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPWNmKGIsbnVsbCxkLGMpKTooTigpLGYoYSxiLGQpKSxiLm1lbW9pemVkU3RhdGU9ZSxiPWIuY2hpbGQpKTooTigpLGI9cShhLGIpKSxiO2Nhc2UgNTpHKGIpO251bGw9PT1hJiZKKGIpO2U9Yi50eXBlO3ZhciBuPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO251bGw9PT1kJiYoZD1uLG51bGw9PT1kP0UoXCIxNTRcIik6dm9pZCAwKTtyPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO1guY3VycmVudHx8bnVsbCE9PWQmJm4hPT1kPyhuPWQuY2hpbGRyZW4seShlLGQpP249bnVsbDpyJiZ5KGUscikmJihiLmVmZmVjdFRhZ3w9MTYpLGcoYSxiKSxcbjIxNDc0ODM2NDchPT1jJiYhdSYmeihlLGQpPyhiLmV4cGlyYXRpb25UaW1lPTIxNDc0ODM2NDcsYj1udWxsKTooZihhLGIsbiksYi5tZW1vaXplZFByb3BzPWQsYj1iLmNoaWxkKSk6Yj1xKGEsYik7cmV0dXJuIGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmSihiKSxhPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hJiYoYT1iLm1lbW9pemVkUHJvcHMpLGIubWVtb2l6ZWRQcm9wcz1hLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OmU9Yi5wZW5kaW5nUHJvcHM7aWYoWC5jdXJyZW50KW51bGw9PT1lJiYoZT1hJiZhLm1lbW9pemVkUHJvcHMsbnVsbD09PWU/RShcIjE1NFwiKTp2b2lkIDApO2Vsc2UgaWYobnVsbD09PWV8fGIubWVtb2l6ZWRQcm9wcz09PWUpZT1iLm1lbW9pemVkUHJvcHM7ZD1lLmNoaWxkcmVuO2Iuc3RhdGVOb2RlPW51bGw9PT1hP2NmKGIsYi5zdGF0ZU5vZGUsZCxjKTpiZihiLGIuc3RhdGVOb2RlLGQsYyk7Yi5tZW1vaXplZFByb3BzPWU7cmV0dXJuIGIuc3RhdGVOb2RlO1xuY2FzZSA5OnJldHVybiBudWxsO2Nhc2UgNDphOntJKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7ZT1iLnBlbmRpbmdQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWUmJihlPWEmJmEubWVtb2l6ZWRQcm9wcyxudWxsPT1lP0UoXCIxNTRcIik6dm9pZCAwKTtlbHNlIGlmKG51bGw9PT1lfHxiLm1lbW9pemVkUHJvcHM9PT1lKXtiPXEoYSxiKTticmVhayBhfW51bGw9PT1hP2IuY2hpbGQ9YmYoYixudWxsLGUsYyk6ZihhLGIsZSk7Yi5tZW1vaXplZFByb3BzPWU7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgMTA6YTp7Yz1iLnBlbmRpbmdQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWMmJihjPWIubWVtb2l6ZWRQcm9wcyk7ZWxzZSBpZihudWxsPT09Y3x8Yi5tZW1vaXplZFByb3BzPT09Yyl7Yj1xKGEsYik7YnJlYWsgYX1mKGEsYixjKTtiLm1lbW9pemVkUHJvcHM9YztiPWIuY2hpbGR9cmV0dXJuIGI7ZGVmYXVsdDpFKFwiMTU2XCIpfX0sYmVnaW5GYWlsZWRXb3JrOmZ1bmN0aW9uKGEsYixcbmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOnFlKGIpO2JyZWFrO2Nhc2UgMzprKGIpO2JyZWFrO2RlZmF1bHQ6RShcIjE1N1wiKX1iLmVmZmVjdFRhZ3w9NjQ7bnVsbD09PWE/Yi5jaGlsZD1udWxsOmIuY2hpbGQhPT1hLmNoaWxkJiYoYi5jaGlsZD1hLmNoaWxkKTtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXJldHVybiB2KGEsYik7Yi5maXJzdEVmZmVjdD1udWxsO2IubGFzdEVmZmVjdD1udWxsO2IuY2hpbGQ9bnVsbD09PWE/Y2YoYixudWxsLG51bGwsYyk6YmYoYixhLmNoaWxkLG51bGwsYyk7Mj09PWIudGFnJiYoYT1iLnN0YXRlTm9kZSxiLm1lbW9pemVkUHJvcHM9YS5wcm9wcyxiLm1lbW9pemVkU3RhdGU9YS5zdGF0ZSk7cmV0dXJuIGIuY2hpbGR9fX1cbmZ1bmN0aW9uIGVmKGEsYixjKXtmdW5jdGlvbiBkKGEpe2EuZWZmZWN0VGFnfD00fXZhciBlPWEuY3JlYXRlSW5zdGFuY2UsZj1hLmNyZWF0ZVRleHRJbnN0YW5jZSxnPWEuYXBwZW5kSW5pdGlhbENoaWxkLGg9YS5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixrPWEucHJlcGFyZVVwZGF0ZSxxPWEucGVyc2lzdGVuY2Usdj1iLmdldFJvb3RIb3N0Q29udGFpbmVyLHk9Yi5wb3BIb3N0Q29udGV4dCx1PWIuZ2V0SG9zdENvbnRleHQsej1iLnBvcEhvc3RDb250YWluZXIsRz1jLnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsST1jLnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLEw9Yy5wb3BIeWRyYXRpb25TdGF0ZSxOPXZvaWQgMCxKPXZvaWQgMCx3PXZvaWQgMDthLm11dGF0aW9uPyhOPWZ1bmN0aW9uKCl7fSxKPWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1jKSYmZChiKX0sdz1mdW5jdGlvbihhLGIsYyxlKXtjIT09ZSYmZChiKX0pOnE/RShcIjIzNVwiKTpFKFwiMjM2XCIpO1xucmV0dXJue2NvbXBsZXRlV29yazpmdW5jdGlvbihhLGIsYyl7dmFyIG09Yi5wZW5kaW5nUHJvcHM7aWYobnVsbD09PW0pbT1iLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigyMTQ3NDgzNjQ3IT09Yi5leHBpcmF0aW9uVGltZXx8MjE0NzQ4MzY0Nz09PWMpYi5wZW5kaW5nUHJvcHM9bnVsbDtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG5lKGIpLG51bGw7Y2FzZSAzOnooYik7VihYLGIpO1YoaWUsYik7bT1iLnN0YXRlTm9kZTttLnBlbmRpbmdDb250ZXh0JiYobS5jb250ZXh0PW0ucGVuZGluZ0NvbnRleHQsbS5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpTChiKSxiLmVmZmVjdFRhZyY9LTM7TihiKTtyZXR1cm4gbnVsbDtjYXNlIDU6eShiKTtjPXYoKTt2YXIgQT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgcD1hLm1lbW9pemVkUHJvcHMscT1iLnN0YXRlTm9kZSx4PXUoKTtxPVxuayhxLEEscCxtLGMseCk7SihhLGIscSxBLHAsbSxjKTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighbSlyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0UoXCIxNjZcIik6dm9pZCAwLG51bGw7YT11KCk7aWYoTChiKSlHKGIsYyxhKSYmZChiKTtlbHNle2E9ZShBLG0sYyxhLGIpO2E6Zm9yKHA9Yi5jaGlsZDtudWxsIT09cDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnKWcoYSxwLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09cC50YWcmJm51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWlmKHA9PT1iKWJyZWFrO2Zvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31oKGEsQSxtLGMpJiZkKGIpO2Iuc3RhdGVOb2RlPWF9bnVsbCE9PWIucmVmJiZcbihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpdyhhLGIsYS5tZW1vaXplZFByb3BzLG0pO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBtKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXYoKTtjPXUoKTtMKGIpP0koYikmJmQoYik6Yi5zdGF0ZU5vZGU9ZihtLGEsYyxiKX1yZXR1cm4gbnVsbDtjYXNlIDc6KG09Yi5tZW1vaXplZFByb3BzKT92b2lkIDA6RShcIjE2NVwiKTtiLnRhZz04O0E9W107YTpmb3IoKHA9Yi5zdGF0ZU5vZGUpJiYocFtcInJldHVyblwiXT1iKTtudWxsIT09cDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnfHw0PT09cC50YWcpRShcIjI0N1wiKTtlbHNlIGlmKDk9PT1wLnRhZylBLnB1c2gocC50eXBlKTtlbHNlIGlmKG51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1cbnBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfXA9bS5oYW5kbGVyO209cChtLnByb3BzLEEpO2IuY2hpbGQ9YmYoYixudWxsIT09YT9hLmNoaWxkOm51bGwsbSxjKTtyZXR1cm4gYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGIudGFnPTcsbnVsbDtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIHooYiksTihiKSxudWxsO2Nhc2UgMDpFKFwiMTY3XCIpO2RlZmF1bHQ6RShcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGZmKGEsYil7ZnVuY3Rpb24gYyhhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09Yyl0cnl7YyhudWxsKX1jYXRjaChBKXtiKGEsQSl9fWZ1bmN0aW9uIGQoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEVlJiZFZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpjKGEpO3ZhciBkPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtkLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goQSl7YihhLEEpfWJyZWFrO2Nhc2UgNTpjKGEpO2JyZWFrO2Nhc2UgNzplKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6ayYmZyhhKX19ZnVuY3Rpb24gZShhKXtmb3IodmFyIGI9YTs7KWlmKGQoYiksbnVsbD09PWIuY2hpbGR8fGsmJjQ9PT1iLnRhZyl7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fFxuYltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ31lbHNlIGIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGR9ZnVuY3Rpb24gZihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31mdW5jdGlvbiBnKGEpe2Zvcih2YXIgYj1hLGM9ITEsZj12b2lkIDAsZz12b2lkIDA7Oyl7aWYoIWMpe2M9YltcInJldHVyblwiXTthOmZvcig7Oyl7bnVsbD09PWM/RShcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Zj1jLnN0YXRlTm9kZTtnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpZShiKSxnP0ooZixiLnN0YXRlTm9kZSk6TihmLGIuc3RhdGVOb2RlKTtcbmVsc2UgaWYoND09PWIudGFnP2Y9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpkKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkW1wicmV0dXJuXCJdPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX12YXIgaD1hLmdldFB1YmxpY0luc3RhbmNlLGs9YS5tdXRhdGlvbjthPWEucGVyc2lzdGVuY2U7a3x8KGE/RShcIjIzNVwiKTpFKFwiMjM2XCIpKTt2YXIgcT1rLmNvbW1pdE1vdW50LHY9ay5jb21taXRVcGRhdGUseT1rLnJlc2V0VGV4dENvbnRlbnQsdT1rLmNvbW1pdFRleHRVcGRhdGUsej1rLmFwcGVuZENoaWxkLEc9ay5hcHBlbmRDaGlsZFRvQ29udGFpbmVyLEk9ay5pbnNlcnRCZWZvcmUsTD1rLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFxuTj1rLnJlbW92ZUNoaWxkLEo9ay5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7eShhLnN0YXRlTm9kZSl9LGNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGYoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RShcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkUoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJih5KGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxmKGNbXCJyZXR1cm5cIl0pKXtjPVxubnVsbDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jLnNpYmxpbmdbXCJyZXR1cm5cIl09Y1tcInJldHVyblwiXTtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZFtcInJldHVyblwiXT1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWM/ZD9MKGIsZS5zdGF0ZU5vZGUsYyk6SShiLGUuc3RhdGVOb2RlLGMpOmQ/RyhiLGUuc3RhdGVOb2RlKTp6KGIsZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZFtcInJldHVyblwiXT1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZVtcInJldHVyblwiXXx8ZVtcInJldHVyblwiXT09PVxuYSlyZXR1cm47ZT1lW1wicmV0dXJuXCJdfWUuc2libGluZ1tcInJldHVyblwiXT1lW1wicmV0dXJuXCJdO2U9ZS5zaWJsaW5nfX0sY29tbWl0RGVsZXRpb246ZnVuY3Rpb24oYSl7ZyhhKTthW1wicmV0dXJuXCJdPW51bGw7YS5jaGlsZD1udWxsO2EuYWx0ZXJuYXRlJiYoYS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxhLmFsdGVybmF0ZVtcInJldHVyblwiXT1udWxsKX0sY29tbWl0V29yazpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmdihjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9FKFwiMTYyXCIpOnZvaWQgMDtjPWIubWVtb2l6ZWRQcm9wczt1KGIuc3RhdGVOb2RlLG51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbmMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RShcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgYz1iLnN0YXRlTm9kZTtpZihiLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1hKWMucHJvcHM9Yi5tZW1vaXplZFByb3BzLGMuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGMuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWEubWVtb2l6ZWRQcm9wczthPWEubWVtb2l6ZWRTdGF0ZTtjLnByb3BzPWIubWVtb2l6ZWRQcm9wcztjLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtjLmNvbXBvbmVudERpZFVwZGF0ZShkLGEpfWI9Yi51cGRhdGVRdWV1ZTtudWxsIT09YiYmS2UoYixjKTticmVhaztjYXNlIDM6Yz1iLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZLZShjLG51bGwhPT1iLmNoaWxkP2IuY2hpbGQuc3RhdGVOb2RlOm51bGwpO2JyZWFrO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO251bGw9PT1hJiZiLmVmZmVjdFRhZyY0JiZxKGMsXG5iLnR5cGUsYi5tZW1vaXplZFByb3BzLGIpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpFKFwiMTYzXCIpfX0sY29tbWl0QXR0YWNoUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTpiKGgoYykpO2JyZWFrO2RlZmF1bHQ6YihjKX19fSxjb21taXREZXRhY2hSZWY6ZnVuY3Rpb24oYSl7YT1hLnJlZjtudWxsIT09YSYmYShudWxsKX19fXZhciBnZj17fTtcbmZ1bmN0aW9uIGhmKGEpe2Z1bmN0aW9uIGIoYSl7YT09PWdmP0UoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfXZhciBjPWEuZ2V0Q2hpbGRIb3N0Q29udGV4dCxkPWEuZ2V0Um9vdEhvc3RDb250ZXh0LGU9e2N1cnJlbnQ6Z2Z9LGY9e2N1cnJlbnQ6Z2Z9LGc9e2N1cnJlbnQ6Z2Z9O3JldHVybntnZXRIb3N0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiBiKGUuY3VycmVudCl9LGdldFJvb3RIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGIoZy5jdXJyZW50KX0scG9wSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhKXtWKGUsYSk7VihmLGEpO1YoZyxhKX0scG9wSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7Zi5jdXJyZW50PT09YSYmKFYoZSxhKSxWKGYsYSkpfSxwdXNoSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhLGIpe1coZyxiLGEpO2I9ZChiKTtXKGYsYSxhKTtXKGUsYixhKX0scHVzaEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBkPWIoZy5jdXJyZW50KSxoPWIoZS5jdXJyZW50KTtcbmQ9YyhoLGEudHlwZSxkKTtoIT09ZCYmKFcoZixhLGEpLFcoZSxkLGEpKX0scmVzZXRIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7ZS5jdXJyZW50PWdmO2cuY3VycmVudD1nZn19fVxuZnVuY3Rpb24gamYoYSl7ZnVuY3Rpb24gYihhLGIpe3ZhciBjPW5ldyBZKDUsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjW1wicmV0dXJuXCJdPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGMoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gYj1mKGIsYS50eXBlLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPWcoYixhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGQoYSl7Zm9yKGE9YVtcInJldHVyblwiXTtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YVtcInJldHVyblwiXTt5PWF9dmFyIGU9YS5zaG91bGRTZXRUZXh0Q29udGVudDtcbmE9YS5oeWRyYXRpb247aWYoIWEpcmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe30sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oKXtFKFwiMTc1XCIpfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe0UoXCIxNzZcIil9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fTt2YXIgZj1hLmNhbkh5ZHJhdGVJbnN0YW5jZSxnPWEuY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSxoPWEuZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nLGs9YS5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCxxPWEuaHlkcmF0ZUluc3RhbmNlLHY9YS5oeWRyYXRlVGV4dEluc3RhbmNlLHk9bnVsbCx1PW51bGwsej0hMTtyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXt1PVxuayhhLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTt5PWE7cmV0dXJuIHo9ITB9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt1PXk9bnVsbDt6PSExfSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbihhKXtpZih6KXt2YXIgZD11O2lmKGQpe2lmKCFjKGEsZCkpe2Q9aChkKTtpZighZHx8IWMoYSxkKSl7YS5lZmZlY3RUYWd8PTI7ej0hMTt5PWE7cmV0dXJufWIoeSx1KX15PWE7dT1rKGQpfWVsc2UgYS5lZmZlY3RUYWd8PTIsej0hMSx5PWF9fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXtiPXEoYS5zdGF0ZU5vZGUsYS50eXBlLGEubWVtb2l6ZWRQcm9wcyxiLGMsYSk7YS51cGRhdGVRdWV1ZT1iO3JldHVybiBudWxsIT09Yj8hMDohMX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYS5zdGF0ZU5vZGUsYS5tZW1vaXplZFByb3BzLGEpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXtpZihhIT09XG55KXJldHVybiExO2lmKCF6KXJldHVybiBkKGEpLHo9ITAsITE7dmFyIGM9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1jJiZcImJvZHlcIiE9PWMmJiFlKGMsYS5tZW1vaXplZFByb3BzKSlmb3IoYz11O2M7KWIoYSxjKSxjPWgoYyk7ZChhKTt1PXk/aChhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH19fVxuZnVuY3Rpb24ga2YoYSl7ZnVuY3Rpb24gYihhKXtRYj1qYT0hMDt2YXIgYj1hLnN0YXRlTm9kZTtiLmN1cnJlbnQ9PT1hP0UoXCIxNzdcIik6dm9pZCAwO2IuaXNSZWFkeUZvckNvbW1pdD0hMTtpZC5jdXJyZW50PW51bGw7aWYoMTxhLmVmZmVjdFRhZylpZihudWxsIT09YS5sYXN0RWZmZWN0KXthLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hO3ZhciBjPWEuZmlyc3RFZmZlY3R9ZWxzZSBjPWE7ZWxzZSBjPWEuZmlyc3RFZmZlY3Q7eWcoKTtmb3IodD1jO251bGwhPT10Oyl7dmFyIGQ9ITEsZT12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXQ7KXt2YXIgZj10LmVmZmVjdFRhZztmJjE2JiZ6Zyh0KTtpZihmJjEyOCl7dmFyIGc9dC5hbHRlcm5hdGU7bnVsbCE9PWcmJkFnKGcpfXN3aXRjaChmJi0yNDIpe2Nhc2UgMjpOZSh0KTt0LmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2Ok5lKHQpO3QuZWZmZWN0VGFnJj0tMztPZSh0LmFsdGVybmF0ZSx0KTticmVhaztjYXNlIDQ6T2UodC5hbHRlcm5hdGUsXG50KTticmVhaztjYXNlIDg6U2M9ITAsQmcodCksU2M9ITF9dD10Lm5leHRFZmZlY3R9fWNhdGNoKFRjKXtkPSEwLGU9VGN9ZCYmKG51bGw9PT10P0UoXCIxNzhcIik6dm9pZCAwLGgodCxlKSxudWxsIT09dCYmKHQ9dC5uZXh0RWZmZWN0KSl9Q2coKTtiLmN1cnJlbnQ9YTtmb3IodD1jO251bGwhPT10Oyl7Yz0hMTtkPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dDspe3ZhciBrPXQuZWZmZWN0VGFnO2smMzYmJkRnKHQuYWx0ZXJuYXRlLHQpO2smMTI4JiZFZyh0KTtpZihrJjY0KXN3aXRjaChlPXQsZj12b2lkIDAsbnVsbCE9PVImJihmPVIuZ2V0KGUpLFJbXCJkZWxldGVcIl0oZSksbnVsbD09ZiYmbnVsbCE9PWUuYWx0ZXJuYXRlJiYoZT1lLmFsdGVybmF0ZSxmPVIuZ2V0KGUpLFJbXCJkZWxldGVcIl0oZSkpKSxudWxsPT1mP0UoXCIxODRcIik6dm9pZCAwLGUudGFnKXtjYXNlIDI6ZS5zdGF0ZU5vZGUuY29tcG9uZW50RGlkQ2F0Y2goZi5lcnJvcix7Y29tcG9uZW50U3RhY2s6Zi5jb21wb25lbnRTdGFja30pO1xuYnJlYWs7Y2FzZSAzOm51bGw9PT1jYSYmKGNhPWYuZXJyb3IpO2JyZWFrO2RlZmF1bHQ6RShcIjE1N1wiKX12YXIgUWM9dC5uZXh0RWZmZWN0O3QubmV4dEVmZmVjdD1udWxsO3Q9UWN9fWNhdGNoKFRjKXtjPSEwLGQ9VGN9YyYmKG51bGw9PT10P0UoXCIxNzhcIik6dm9pZCAwLGgodCxkKSxudWxsIT09dCYmKHQ9dC5uZXh0RWZmZWN0KSl9amE9UWI9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIERlJiZEZShhLnN0YXRlTm9kZSk7aGEmJihoYS5mb3JFYWNoKEcpLGhhPW51bGwpO251bGwhPT1jYSYmKGE9Y2EsY2E9bnVsbCxPYihhKSk7Yj1iLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJihxYT1SPW51bGwpO3JldHVybiBifWZ1bmN0aW9uIGMoYSl7Zm9yKDs7KXt2YXIgYj1GZyhhLmFsdGVybmF0ZSxhLEgpLGM9YVtcInJldHVyblwiXSxkPWEuc2libGluZzt2YXIgZT1hO2lmKDIxNDc0ODM2NDc9PT1IfHwyMTQ3NDgzNjQ3IT09ZS5leHBpcmF0aW9uVGltZSl7aWYoMiE9PWUudGFnJiYzIT09XG5lLnRhZyl2YXIgZj0wO2Vsc2UgZj1lLnVwZGF0ZVF1ZXVlLGY9bnVsbD09PWY/MDpmLmV4cGlyYXRpb25UaW1lO2Zvcih2YXIgZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpO2lmKG51bGwhPT1kKXJldHVybiBkO1xuaWYobnVsbCE9PWMpYT1jO2Vsc2V7YS5zdGF0ZU5vZGUuaXNSZWFkeUZvckNvbW1pdD0hMDticmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhKXt2YXIgYj1yZyhhLmFsdGVybmF0ZSxhLEgpO251bGw9PT1iJiYoYj1jKGEpKTtpZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZShhKXt2YXIgYj1HZyhhLmFsdGVybmF0ZSxhLEgpO251bGw9PT1iJiYoYj1jKGEpKTtpZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhKXtpZihudWxsIT09Uil7aWYoISgwPT09SHx8SD5hKSlpZihIPD1VYylmb3IoO251bGwhPT1GOylGPWsoRik/ZShGKTpkKEYpO2Vsc2UgZm9yKDtudWxsIT09RiYmIUEoKTspRj1rKEYpP2UoRik6ZChGKX1lbHNlIGlmKCEoMD09PUh8fEg+YSkpaWYoSDw9VWMpZm9yKDtudWxsIT09RjspRj1kKEYpO2Vsc2UgZm9yKDtudWxsIT09RiYmIUEoKTspRj1kKEYpfWZ1bmN0aW9uIGcoYSxiKXtqYT9FKFwiMjQzXCIpOnZvaWQgMDtqYT0hMDthLmlzUmVhZHlGb3JDb21taXQ9XG4hMTtpZihhIT09cmF8fGIhPT1IfHxudWxsPT09Ril7Zm9yKDstMTxoZTspZ2VbaGVdPW51bGwsaGUtLTtqZT1EO2llLmN1cnJlbnQ9RDtYLmN1cnJlbnQ9ITE7eCgpO3JhPWE7SD1iO0Y9c2UocmEuY3VycmVudCxudWxsLGIpfXZhciBjPSExLGQ9bnVsbDt0cnl7ZihiKX1jYXRjaChSYyl7Yz0hMCxkPVJjfWZvcig7Yzspe2lmKGViKXtjYT1kO2JyZWFrfXZhciBnPUY7aWYobnVsbD09PWcpZWI9ITA7ZWxzZXt2YXIgaz1oKGcsZCk7bnVsbD09PWs/RShcIjE4M1wiKTp2b2lkIDA7aWYoIWViKXt0cnl7Yz1rO2Q9Yjtmb3Ioaz1jO251bGwhPT1nOyl7c3dpdGNoKGcudGFnKXtjYXNlIDI6bmUoZyk7YnJlYWs7Y2FzZSA1OnFnKGcpO2JyZWFrO2Nhc2UgMzpwKGcpO2JyZWFrO2Nhc2UgNDpwKGcpfWlmKGc9PT1rfHxnLmFsdGVybmF0ZT09PWspYnJlYWs7Zz1nW1wicmV0dXJuXCJdfUY9ZShjKTtmKGQpfWNhdGNoKFJjKXtjPSEwO2Q9UmM7Y29udGludWV9YnJlYWt9fX1iPWNhO2ViPWphPSExO2NhPVxubnVsbDtudWxsIT09YiYmT2IoYik7cmV0dXJuIGEuaXNSZWFkeUZvckNvbW1pdD9hLmN1cnJlbnQuYWx0ZXJuYXRlOm51bGx9ZnVuY3Rpb24gaChhLGIpe3ZhciBjPWlkLmN1cnJlbnQ9bnVsbCxkPSExLGU9ITEsZj1udWxsO2lmKDM9PT1hLnRhZyljPWEscShhKSYmKGViPSEwKTtlbHNlIGZvcih2YXIgZz1hW1wicmV0dXJuXCJdO251bGwhPT1nJiZudWxsPT09YzspezI9PT1nLnRhZz9cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5zdGF0ZU5vZGUuY29tcG9uZW50RGlkQ2F0Y2gmJihkPSEwLGY9amQoZyksYz1nLGU9ITApOjM9PT1nLnRhZyYmKGM9Zyk7aWYocShnKSl7aWYoU2N8fG51bGwhPT1oYSYmKGhhLmhhcyhnKXx8bnVsbCE9PWcuYWx0ZXJuYXRlJiZoYS5oYXMoZy5hbHRlcm5hdGUpKSlyZXR1cm4gbnVsbDtjPW51bGw7ZT0hMX1nPWdbXCJyZXR1cm5cIl19aWYobnVsbCE9PWMpe251bGw9PT1xYSYmKHFhPW5ldyBTZXQpO3FhLmFkZChjKTt2YXIgaD1cIlwiO2c9YTtkb3thOnN3aXRjaChnLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBrPVxuZy5fZGVidWdPd25lcixRYz1nLl9kZWJ1Z1NvdXJjZTt2YXIgbT1qZChnKTt2YXIgbj1udWxsO2smJihuPWpkKGspKTtrPVFjO209XCJcXG4gICAgaW4gXCIrKG18fFwiVW5rbm93blwiKSsoaz9cIiAoYXQgXCIray5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2subGluZU51bWJlcitcIilcIjpuP1wiIChjcmVhdGVkIGJ5IFwiK24rXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0Om09XCJcIn1oKz1tO2c9Z1tcInJldHVyblwiXX13aGlsZShnKTtnPWg7YT1qZChhKTtudWxsPT09UiYmKFI9bmV3IE1hcCk7Yj17Y29tcG9uZW50TmFtZTphLGNvbXBvbmVudFN0YWNrOmcsZXJyb3I6YixlcnJvckJvdW5kYXJ5OmQ/Yy5zdGF0ZU5vZGU6bnVsbCxlcnJvckJvdW5kYXJ5Rm91bmQ6ZCxlcnJvckJvdW5kYXJ5TmFtZTpmLHdpbGxSZXRyeTplfTtSLnNldChjLGIpO3RyeXt2YXIgcD1iLmVycm9yO3AmJnAuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihwKX1jYXRjaChWYyl7VmMmJlxuVmMuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihWYyl9UWI/KG51bGw9PT1oYSYmKGhhPW5ldyBTZXQpLGhhLmFkZChjKSk6RyhjKTtyZXR1cm4gY31udWxsPT09Y2EmJihjYT1iKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBrKGEpe3JldHVybiBudWxsIT09UiYmKFIuaGFzKGEpfHxudWxsIT09YS5hbHRlcm5hdGUmJlIuaGFzKGEuYWx0ZXJuYXRlKSl9ZnVuY3Rpb24gcShhKXtyZXR1cm4gbnVsbCE9PXFhJiYocWEuaGFzKGEpfHxudWxsIT09YS5hbHRlcm5hdGUmJnFhLmhhcyhhLmFsdGVybmF0ZSkpfWZ1bmN0aW9uIHYoKXtyZXR1cm4gMjAqKCgoSSgpKzEwMCkvMjB8MCkrMSl9ZnVuY3Rpb24geShhKXtyZXR1cm4gMCE9PWthP2thOmphP1FiPzE6SDohSGd8fGEuaW50ZXJuYWxDb250ZXh0VGFnJjE/digpOjF9ZnVuY3Rpb24gdShhLGIpe3JldHVybiB6KGEsYiwhMSl9ZnVuY3Rpb24geihhLGIpe2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8XG5hLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YikmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09YVtcInJldHVyblwiXSlpZigzPT09YS50YWcpe3ZhciBjPWEuc3RhdGVOb2RlOyFqYSYmYz09PXJhJiZiPEgmJihGPXJhPW51bGwsSD0wKTt2YXIgZD1jLGU9YjtSYj5JZyYmRShcIjE4NVwiKTtpZihudWxsPT09ZC5uZXh0U2NoZWR1bGVkUm9vdClkLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWUsbnVsbD09PU8/KHNhPU89ZCxkLm5leHRTY2hlZHVsZWRSb290PWQpOihPPU8ubmV4dFNjaGVkdWxlZFJvb3Q9ZCxPLm5leHRTY2hlZHVsZWRSb290PXNhKTtlbHNle3ZhciBmPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWZ8fGU8ZilkLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWV9RmF8fChsYT9cblNiJiYobWE9ZCxuYT0xLG0obWEsbmEpKToxPT09ZT93KDEsbnVsbCk6TChlKSk7IWphJiZjPT09cmEmJmI8SCYmKEY9cmE9bnVsbCxIPTApfWVsc2UgYnJlYWs7YT1hW1wicmV0dXJuXCJdfX1mdW5jdGlvbiBHKGEpe3ooYSwxLCEwKX1mdW5jdGlvbiBJKCl7cmV0dXJuIFVjPSgoV2MoKS1QZSkvMTB8MCkrMn1mdW5jdGlvbiBMKGEpe2lmKDAhPT1UYil7aWYoYT5UYilyZXR1cm47SmcoWGMpfXZhciBiPVdjKCktUGU7VGI9YTtYYz1LZyhKLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1mdW5jdGlvbiBOKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PU8pZm9yKHZhciBjPU8sZD1zYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Tz9FKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7c2E9Tz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09c2Epc2E9ZT1kLm5leHRTY2hlZHVsZWRSb290LFxuTy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1PKXtPPWM7Ty5uZXh0U2NoZWR1bGVkUm9vdD1zYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09TylicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPW1hO251bGwhPT1jJiZjPT09Yj9SYisrOlJiPTA7bWE9YjtuYT1hfWZ1bmN0aW9uIEooYSl7dygwLGEpfWZ1bmN0aW9uIHcoYSxiKXtmYj1iO2ZvcihOKCk7bnVsbCE9PW1hJiYwIT09bmEmJigwPT09YXx8bmE8PWEpJiYhWWM7KW0obWEsbmEpLE4oKTtudWxsIT09ZmImJihUYj0wLFhjPS0xKTswIT09bmEmJkwobmEpO2ZiPW51bGw7WWM9ITE7UmI9MDtpZihVYil0aHJvdyBhPVpjLFpjPVxubnVsbCxVYj0hMSxhO31mdW5jdGlvbiBtKGEsYyl7RmE/RShcIjI0NVwiKTp2b2lkIDA7RmE9ITA7aWYoYzw9SSgpKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD8oYS5maW5pc2hlZFdvcms9bnVsbCxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9ZyhhLGMpLG51bGwhPT1kJiYoYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kPyhhLmZpbmlzaGVkV29yaz1udWxsLGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSk6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1nKGEsYyksbnVsbCE9PWQmJihBKCk/YS5maW5pc2hlZFdvcms9ZDphLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpKTtGYT0hMX1mdW5jdGlvbiBBKCl7cmV0dXJuIG51bGw9PT1mYnx8ZmIudGltZVJlbWFpbmluZygpPkxnPyExOlljPSEwfWZ1bmN0aW9uIE9iKGEpe251bGw9PT1tYT9FKFwiMjQ2XCIpOlxudm9pZCAwO21hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7VWJ8fChVYj0hMCxaYz1hKX12YXIgcj1oZihhKSxuPWpmKGEpLHA9ci5wb3BIb3N0Q29udGFpbmVyLHFnPXIucG9wSG9zdENvbnRleHQseD1yLnJlc2V0SG9zdENvbnRhaW5lcixNZT1kZihhLHIsbix1LHkpLHJnPU1lLmJlZ2luV29yayxHZz1NZS5iZWdpbkZhaWxlZFdvcmssRmc9ZWYoYSxyLG4pLmNvbXBsZXRlV29yaztyPWZmKGEsaCk7dmFyIHpnPXIuY29tbWl0UmVzZXRUZXh0Q29udGVudCxOZT1yLmNvbW1pdFBsYWNlbWVudCxCZz1yLmNvbW1pdERlbGV0aW9uLE9lPXIuY29tbWl0V29yayxEZz1yLmNvbW1pdExpZmVDeWNsZXMsRWc9ci5jb21taXRBdHRhY2hSZWYsQWc9ci5jb21taXREZXRhY2hSZWYsV2M9YS5ub3csS2c9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssSmc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLEhnPWEudXNlU3luY1NjaGVkdWxpbmcseWc9YS5wcmVwYXJlRm9yQ29tbWl0LENnPWEucmVzZXRBZnRlckNvbW1pdCxcblBlPVdjKCksVWM9MixrYT0wLGphPSExLEY9bnVsbCxyYT1udWxsLEg9MCx0PW51bGwsUj1udWxsLHFhPW51bGwsaGE9bnVsbCxjYT1udWxsLGViPSExLFFiPSExLFNjPSExLHNhPW51bGwsTz1udWxsLFRiPTAsWGM9LTEsRmE9ITEsbWE9bnVsbCxuYT0wLFljPSExLFViPSExLFpjPW51bGwsZmI9bnVsbCxsYT0hMSxTYj0hMSxJZz0xRTMsUmI9MCxMZz0xO3JldHVybntjb21wdXRlQXN5bmNFeHBpcmF0aW9uOnYsY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcjp5LHNjaGVkdWxlV29yazp1LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9bGE7bGE9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KGxhPWMpfHxGYXx8dygxLG51bGwpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhKXtpZihsYSYmIVNiKXtTYj0hMDt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1NiPSExfX1yZXR1cm4gYSgpfSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSl7dmFyIGI9bGE7bGE9ITA7dHJ5e2E6e3ZhciBjPVxua2E7a2E9MTt0cnl7dmFyIGQ9YSgpO2JyZWFrIGF9ZmluYWxseXtrYT1jfWQ9dm9pZCAwfXJldHVybiBkfWZpbmFsbHl7bGE9YixGYT9FKFwiMTg3XCIpOnZvaWQgMCx3KDEsbnVsbCl9fSxkZWZlcnJlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGI9a2E7a2E9digpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7a2E9Yn19fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoYSl7YT1vZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX12YXIgYz1hLmdldFB1YmxpY0luc3RhbmNlO2E9a2YoYSk7dmFyIGQ9YS5jb21wdXRlQXN5bmNFeHBpcmF0aW9uLGU9YS5jb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyLGY9YS5zY2hlZHVsZVdvcms7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpe3ZhciBjPW5ldyBZKDMsbnVsbCwwKTthPXtjdXJyZW50OmMsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsaXNSZWFkeUZvckNvbW1pdDohMSxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmIsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGMuc3RhdGVOb2RlPWF9LHVwZGF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxxKXt2YXIgZz1iLmN1cnJlbnQ7aWYoYyl7Yz1cbmMuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgaDtiOnsyPT09a2QoYykmJjI9PT1jLnRhZz92b2lkIDA6RShcIjE3MFwiKTtmb3IoaD1jOzMhPT1oLnRhZzspe2lmKGxlKGgpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9KGg9aFtcInJldHVyblwiXSk/dm9pZCAwOkUoXCIxNzFcIil9aD1oLnN0YXRlTm9kZS5jb250ZXh0fWM9bGUoYyk/cGUoYyxoKTpofWVsc2UgYz1EO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9cTtiPXZvaWQgMD09PWI/bnVsbDpiO3E9bnVsbCE9YSYmbnVsbCE9YS50eXBlJiZudWxsIT1hLnR5cGUucHJvdG90eXBlJiYhMD09PWEudHlwZS5wcm90b3R5cGUudW5zdGFibGVfaXNBc3luY1JlYWN0Q29tcG9uZW50P2QoKTplKGcpO0hlKGcse2V4cGlyYXRpb25UaW1lOnEscGFydGlhbFN0YXRlOntlbGVtZW50OmF9LGNhbGxiYWNrOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLFxubmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7ZihnLHEpfSxiYXRjaGVkVXBkYXRlczphLmJhdGNoZWRVcGRhdGVzLHVuYmF0Y2hlZFVwZGF0ZXM6YS51bmJhdGNoZWRVcGRhdGVzLGRlZmVycmVkVXBkYXRlczphLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6YS5mbHVzaFN5bmMsZ2V0UHVibGljUm9vdEluc3RhbmNlOmZ1bmN0aW9uKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBjKGEuY2hpbGQuc3RhdGVOb2RlKTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19LGZpbmRIb3N0SW5zdGFuY2U6YixmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFsczpmdW5jdGlvbihhKXthPXBkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxpbmplY3RJbnRvRGV2VG9vbHM6ZnVuY3Rpb24oYSl7dmFyIGM9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gQ2UoQih7fSxcbmEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe3JldHVybiBiKGEpfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYz9jKGEpOm51bGx9fSkpfX19dmFyIG1mPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6bGZ9KSxuZj1tZiYmbGZ8fG1mLG9mPW5mW1wiZGVmYXVsdFwiXT9uZltcImRlZmF1bHRcIl06bmY7ZnVuY3Rpb24gcGYoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpVZSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX12YXIgcWY9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyxyZj12b2lkIDA7cmY9cWY/ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O1xudmFyIHNmPXZvaWQgMCx0Zj12b2lkIDA7XG5pZihsLmNhblVzZURPTSlpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFja3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGNhbmNlbElkbGVDYWxsYmFjayl7dmFyIHVmPW51bGwsdmY9ITEsd2Y9LTEseGY9ITEseWY9MCx6Zj0zMyxBZj0zMyxCZjtCZj1xZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBDZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PUNmKXt2Zj0hMTthPXJmKCk7aWYoMD49eWYtYSlpZigtMSE9PXdmJiZ3Zjw9XG5hKUJmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybn1lbHNlIEJmLmRpZFRpbWVvdXQ9ITE7d2Y9LTE7YT11Zjt1Zj1udWxsO251bGwhPT1hJiZhKEJmKX19LCExKTt2YXIgRGY9ZnVuY3Rpb24oYSl7eGY9ITE7dmFyIGI9YS15ZitBZjtiPEFmJiZ6ZjxBZj8oOD5iJiYoYj04KSxBZj1iPHpmP3pmOmIpOnpmPWI7eWY9YStBZjt2Znx8KHZmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShDZixcIipcIikpfTtzZj1mdW5jdGlvbihhLGIpe3VmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih3Zj1yZigpK2IudGltZW91dCk7eGZ8fCh4Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRGYpKTtyZXR1cm4gMH07dGY9ZnVuY3Rpb24oKXt1Zj1udWxsO3ZmPSExO3dmPS0xfX1lbHNlIHNmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHRmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSBzZj1mdW5jdGlvbihhKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9fSl9KX0sXG50Zj1mdW5jdGlvbihhKXtjbGVhclRpbWVvdXQoYSl9O3ZhciBFZj0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sRmY9e30sR2Y9e307XG5mdW5jdGlvbiBIZihhKXtpZihHZi5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZihGZi5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZihFZi50ZXN0KGEpKXJldHVybiBHZlthXT0hMDtGZlthXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD13YShiKTtpZihkJiZ2YShiLGMpKXt2YXIgZT1kLm11dGF0aW9uTWV0aG9kO2U/ZShhLGMpOm51bGw9PWN8fGQuaGFzQm9vbGVhblZhbHVlJiYhY3x8ZC5oYXNOdW1lcmljVmFsdWUmJmlzTmFOKGMpfHxkLmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlJiYxPmN8fGQuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSYmITE9PT1jP0pmKGEsYik6ZC5tdXN0VXNlUHJvcGVydHk/YVtkLnByb3BlcnR5TmFtZV09YzooYj1kLmF0dHJpYnV0ZU5hbWUsKGU9ZC5hdHRyaWJ1dGVOYW1lc3BhY2UpP2Euc2V0QXR0cmlidXRlTlMoZSxiLFwiXCIrYyk6ZC5oYXNCb29sZWFuVmFsdWV8fGQuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSYmITA9PT1jP2Euc2V0QXR0cmlidXRlKGIsXCJcIik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKX1lbHNlIEtmKGEsYix2YShiLGMpP2M6bnVsbCl9XG5mdW5jdGlvbiBLZihhLGIsYyl7SGYoYikmJihudWxsPT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSl9ZnVuY3Rpb24gSmYoYSxiKXt2YXIgYz13YShiKTtjPyhiPWMubXV0YXRpb25NZXRob2QpP2IoYSx2b2lkIDApOmMubXVzdFVzZVByb3BlcnR5P2FbYy5wcm9wZXJ0eU5hbWVdPWMuaGFzQm9vbGVhblZhbHVlPyExOlwiXCI6YS5yZW1vdmVBdHRyaWJ1dGUoYy5hdHRyaWJ1dGVOYW1lKTphLnJlbW92ZUF0dHJpYnV0ZShiKX1cbmZ1bmN0aW9uIExmKGEsYil7dmFyIGM9Yi52YWx1ZSxkPWIuY2hlY2tlZDtyZXR1cm4gQih7dHlwZTp2b2lkIDAsc3RlcDp2b2lkIDAsbWluOnZvaWQgMCxtYXg6dm9pZCAwfSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxjaGVja2VkOm51bGwhPWQ/ZDphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBNZihhLGIpe3ZhciBjPWIuZGVmYXVsdFZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkLGluaXRpYWxWYWx1ZTpudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1cbmZ1bmN0aW9uIE5mKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmSWYoYSxcImNoZWNrZWRcIixiKX1mdW5jdGlvbiBPZihhLGIpe05mKGEsYik7dmFyIGM9Yi52YWx1ZTtpZihudWxsIT1jKWlmKDA9PT1jJiZcIlwiPT09YS52YWx1ZSlhLnZhbHVlPVwiMFwiO2Vsc2UgaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoYj1wYXJzZUZsb2F0KGEudmFsdWUpfHwwLGMhPWJ8fGM9PWImJmEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgbnVsbD09Yi52YWx1ZSYmbnVsbCE9Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09XCJcIitiLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYi5kZWZhdWx0VmFsdWUpLG51bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIFBmKGEsYil7c3dpdGNoKGIudHlwZSl7Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2Nhc2UgXCJjb2xvclwiOmNhc2UgXCJkYXRlXCI6Y2FzZSBcImRhdGV0aW1lXCI6Y2FzZSBcImRhdGV0aW1lLWxvY2FsXCI6Y2FzZSBcIm1vbnRoXCI6Y2FzZSBcInRpbWVcIjpjYXNlIFwid2Vla1wiOmEudmFsdWU9XCJcIjthLnZhbHVlPWEuZGVmYXVsdFZhbHVlO2JyZWFrO2RlZmF1bHQ6YS52YWx1ZT1hLnZhbHVlfWI9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiBRZihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGEmJlwibnVtYmVyXCIhPT10eXBlb2YgYXx8KGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBSZihhLGIpe2E9Qih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPVFmKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBTZihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrYztiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gVGYoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIFVmKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9FKFwiOTFcIik6dm9pZCAwO3JldHVybiBCKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIFZmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/RShcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkUoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cbmZ1bmN0aW9uIFdmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIFhmKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBZZj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBaZihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uICRmKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9aZihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBhZz12b2lkIDAsYmc9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09WWYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7YWc9YWd8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YWcuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPWFnLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIGNnKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgZGc9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sZWc9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGRnKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2VnLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7ZGdbYl09ZGdbYV19KX0pO1xuZnVuY3Rpb24gZmcoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8ZGcuaGFzT3duUHJvcGVydHkoZSkmJmRnW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIGdnPUIoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBoZyhhLGIsYyl7YiYmKGdnW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9FKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/RShcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpFKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9FKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBpZyhhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIGpnPVlmLmh0bWwsa2c9Qy50aGF0UmV0dXJucyhcIlwiKTtcbmZ1bmN0aW9uIGxnKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPUhkKGEpO2I9U2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07Yy5oYXNPd25Qcm9wZXJ0eShlKSYmY1tlXXx8KFwidG9wU2Nyb2xsXCI9PT1lP3dkKFwidG9wU2Nyb2xsXCIsXCJzY3JvbGxcIixhKTpcInRvcEZvY3VzXCI9PT1lfHxcInRvcEJsdXJcIj09PWU/KHdkKFwidG9wRm9jdXNcIixcImZvY3VzXCIsYSksd2QoXCJ0b3BCbHVyXCIsXCJibHVyXCIsYSksYy50b3BCbHVyPSEwLGMudG9wRm9jdXM9ITApOlwidG9wQ2FuY2VsXCI9PT1lPyh5YyhcImNhbmNlbFwiLCEwKSYmd2QoXCJ0b3BDYW5jZWxcIixcImNhbmNlbFwiLGEpLGMudG9wQ2FuY2VsPSEwKTpcInRvcENsb3NlXCI9PT1lPyh5YyhcImNsb3NlXCIsITApJiZ3ZChcInRvcENsb3NlXCIsXCJjbG9zZVwiLGEpLGMudG9wQ2xvc2U9ITApOkRkLmhhc093blByb3BlcnR5KGUpJiZVKGUsRGRbZV0sYSksY1tlXT0hMCl9fVxudmFyIG1nPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsdG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsXG50b3BXYWl0aW5nOlwid2FpdGluZ1wifTtmdW5jdGlvbiBuZyhhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1qZyYmKGQ9WmYoYSkpO2Q9PT1qZz9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCJcXHgzY3NjcmlwdFxceDNlXFx4M2Mvc2NyaXB0XFx4M2VcIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIG9nKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIHBnKGEsYixjLGQpe3ZhciBlPWlnKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VShcInRvcExvYWRcIixcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmIGluIG1nKW1nLmhhc093blByb3BlcnR5KGYpJiZVKGYsbWdbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpVKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpVKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VShcInRvcExvYWRcIixcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpVKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VShcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VShcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOk1mKGEsYyk7Zj1MZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7XG5sZyhkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9UmYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6VGYoYSxjKTtmPUIoe30sYyx7dmFsdWU6dm9pZCAwfSk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtsZyhkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmYoYSxjKTtmPVVmKGEsYyk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtsZyhkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9aGcoYixmLGtnKTt2YXIgZz1mLGg7Zm9yKGggaW4gZylpZihnLmhhc093blByb3BlcnR5KGgpKXt2YXIgaz1nW2hdO1wic3R5bGVcIj09PWg/ZmcoYSxrLGtnKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmJnKGEsaykpOlwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJmNnKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZjZyhhLFxuXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoUmEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9ayYmbGcoZCxoKTplP0tmKGEsaCxrKTpudWxsIT1rJiZJZihhLGgsaykpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpCYyhhKTtQZihhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkJjKGEpO1hmKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/U2YoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJlNmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9XG5DKX19XG5mdW5jdGlvbiBzZyhhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9TGYoYSxjKTtkPUxmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz1SZihhLGMpO2Q9UmYoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPUIoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1CKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz1VZihhLGMpO2Q9VWYoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1DKX1oZyhiLGQsa2cpO3ZhciBnLGg7YT1udWxsO2ZvcihnIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoZykmJmMuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWNbZ10paWYoXCJzdHlsZVwiPT09Zylmb3IoaCBpbiBiPWNbZ10sYiliLmhhc093blByb3BlcnR5KGgpJiYoYXx8KGE9e30pLGFbaF09XG5cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09ZyYmXCJjaGlsZHJlblwiIT09ZyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKFJhLmhhc093blByb3BlcnR5KGcpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChnLG51bGwpKTtmb3IoZyBpbiBkKXt2YXIgaz1kW2ddO2I9bnVsbCE9Yz9jW2ddOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGcpJiZrIT09YiYmKG51bGwhPWt8fG51bGwhPWIpKWlmKFwic3R5bGVcIj09PWcpaWYoYil7Zm9yKGggaW4gYikhYi5oYXNPd25Qcm9wZXJ0eShoKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShoKXx8KGF8fChhPXt9KSxhW2hdPVwiXCIpO2ZvcihoIGluIGspay5oYXNPd25Qcm9wZXJ0eShoKSYmYltoXSE9PWtbaF0mJihhfHwoYT17fSksYVtoXT1rW2hdKX1lbHNlIGF8fChmfHwoZj1bXSksZi5wdXNoKGcsYSkpLGE9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09XG5nPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGI9Yj9iLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmYiE9PWsmJihmPWZ8fFtdKS5wdXNoKGcsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Zz9iPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGcsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJihSYS5oYXNPd25Qcm9wZXJ0eShnKT8obnVsbCE9ayYmbGcoZSxnKSxmfHxiPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChnLGspKX1hJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYSk7cmV0dXJuIGZ9XG5mdW5jdGlvbiB0ZyhhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZOZihhLGUpO2lnKGMsZCk7ZD1pZyhjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP2ZnKGEsaCxrZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9iZyhhLGgpOlwiY2hpbGRyZW5cIj09PWc/Y2coYSxoKTpkP251bGwhPWg/S2YoYSxnLGgpOmEucmVtb3ZlQXR0cmlidXRlKGcpOm51bGwhPWg/SWYoYSxnLGgpOkpmKGEsZyl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOk9mKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6V2YoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9TZihhLFxuISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9TZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6U2YoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gdWcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBtZyltZy5oYXNPd25Qcm9wZXJ0eShmKSYmVShmLG1nW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpVKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VShcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1UoXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VShcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6TWYoYSxjKTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6VGYoYSxjKTtcblUoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7bGcoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZmKGEsYyksVShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKSxsZyhlLFwib25DaGFuZ2VcIil9aGcoYixjLGtnKTtkPW51bGw7Zm9yKHZhciBnIGluIGMpYy5oYXNPd25Qcm9wZXJ0eShnKSYmKGY9Y1tnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZj9hLnRleHRDb250ZW50IT09ZiYmKGQ9W1wiY2hpbGRyZW5cIixmXSk6XCJudW1iZXJcIj09PXR5cGVvZiBmJiZhLnRleHRDb250ZW50IT09XCJcIitmJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZl0pOlJhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1mJiZsZyhlLGcpKTtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6QmMoYSk7UGYoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpCYyhhKTtYZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiZcbihhLm9uY2xpY2s9Qyl9cmV0dXJuIGR9ZnVuY3Rpb24gdmcoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyIHdnPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6bmcsY3JlYXRlVGV4dE5vZGU6b2csc2V0SW5pdGlhbFByb3BlcnRpZXM6cGcsZGlmZlByb3BlcnRpZXM6c2csdXBkYXRlUHJvcGVydGllczp0ZyxkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOnVnLGRpZmZIeWRyYXRlZFRleHQ6dmcsd2FybkZvclVubWF0Y2hlZFRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0OmZ1bmN0aW9uKCl7fSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6T2YoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPVxuYy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZVxceDNkXCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlXFx4M2RcInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1yYihkKTtlP3ZvaWQgMDpFKFwiOTBcIik7Q2MoZCk7T2YoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOldmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZTZihhLCEhYy5tdWx0aXBsZSxiLCExKX19fSk7bmMuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCh3Zyk7dmFyIHhnPW51bGwsTWc9bnVsbDtmdW5jdGlvbiBOZyhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBPZyhhKXthPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGw7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGV8fCFhLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKX1cbnZhciBaPW9mKHtnZXRSb290SG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlVHlwZTtzd2l0Y2goYil7Y2FzZSA5OmNhc2UgMTE6YT0oYT1hLmRvY3VtZW50RWxlbWVudCk/YS5uYW1lc3BhY2VVUkk6JGYobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmI9OD09PWI/YS5wYXJlbnROb2RlOmEsYT1iLm5hbWVzcGFjZVVSSXx8bnVsbCxiPWIudGFnTmFtZSxhPSRmKGEsYil9cmV0dXJuIGF9LGdldENoaWxkSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gJGYoYSxiKX0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHByZXBhcmVGb3JDb21taXQ6ZnVuY3Rpb24oKXt4Zz10ZDt2YXIgYT1kYSgpO2lmKEtkKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgYz13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5pZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKHope2I9bnVsbDticmVhayBhfXZhciBmPTAsZz0tMSxoPS0xLGs9MCxxPTAsdj1hLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3YhPT1ifHwwIT09ZCYmMyE9PXYubm9kZVR5cGV8fChnPWYrZCk7diE9PWV8fDAhPT1jJiYzIT09di5ub2RlVHlwZXx8KGg9ZitjKTszPT09di5ub2RlVHlwZSYmKGYrPXYubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXYuZmlyc3RDaGlsZCkpYnJlYWs7eT12O3Y9dX1mb3IoOzspe2lmKHY9PT1hKWJyZWFrIGI7eT09PWImJisraz09PWQmJihnPWYpO3k9PT1lJiYrK3E9PT1jJiYoaD1mKTtpZihudWxsIT09KHU9di5uZXh0U2libGluZykpYnJlYWs7dj15O3k9di5wYXJlbnROb2RlfXY9dX1iPS0xPT09Z3x8LTE9PT1oP251bGw6XG57c3RhcnQ6ZyxlbmQ6aH19ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7TWc9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn07dWQoITEpfSxyZXNldEFmdGVyQ29tbWl0OmZ1bmN0aW9uKCl7dmFyIGE9TWcsYj1kYSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmZhKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYoS2QoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXtiPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jW0ViKCldLmxlbmd0aDthPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9hOk1hdGgubWluKGQuZW5kLGUpOyFiLmV4dGVuZCYmYT5cbmQmJihlPWQsZD1hLGE9ZSk7ZT1KZChjLGEpO3ZhciBmPUpkKGMsZCk7aWYoZSYmZiYmKDEhPT1iLnJhbmdlQ291bnR8fGIuYW5jaG9yTm9kZSE9PWUubm9kZXx8Yi5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8Yi5mb2N1c05vZGUhPT1mLm5vZGV8fGIuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkpe3ZhciBnPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7Zy5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpO2IucmVtb3ZlQWxsUmFuZ2VzKCk7YT5kPyhiLmFkZFJhbmdlKGcpLGIuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihnLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLGIuYWRkUmFuZ2UoZykpfX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtpYShjKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1cbmEudG9wfU1nPW51bGw7dWQoeGcpO3hnPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1uZyhhLGIsYyxkKTthW1FdPWU7YVtvYl09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7cGcoYSxiLGMsZCk7YTp7c3dpdGNoKGIpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6YT0hIWMuYXV0b0ZvY3VzO2JyZWFrIGF9YT0hMX1yZXR1cm4gYX0scHJlcGFyZVVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBzZyhhLGIsYyxkLGUpfSxzaG91bGRTZXRUZXh0Q29udGVudDpmdW5jdGlvbihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09XG50eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1vZyhhLGIpO2FbUV09ZDtyZXR1cm4gYX0sbm93OnJmLG11dGF0aW9uOntjb21taXRNb3VudDpmdW5jdGlvbihhKXthLmZvY3VzKCl9LGNvbW1pdFVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2Fbb2JdPWU7dGcoYSxiLGMsZCxlKX0scmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXthLnRleHRDb250ZW50PVwiXCJ9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLFxuYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGEpOmEuYXBwZW5kQ2hpbGQoYil9LGluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxcbmIpe3JldHVyblwiXCI9PT1ifHwzIT09YS5ub2RlVHlwZT9udWxsOmF9LGdldE5leHRIeWRyYXRhYmxlU2libGluZzpmdW5jdGlvbihhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtRXT1mO2Fbb2JdPWM7cmV0dXJuIHVnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbUV09YztyZXR1cm4gdmcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sXG5kaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnNmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dGYsdXNlU3luY1NjaGVkdWxpbmc6ITB9KTtyYz1aLmJhdGNoZWRVcGRhdGVzO1xuZnVuY3Rpb24gUGcoYSxiLGMsZCxlKXtOZyhjKT92b2lkIDA6RShcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZilaLnVwZGF0ZUNvbnRhaW5lcihiLGYsYSxlKTtlbHNle2Q9ZHx8T2coYyk7aWYoIWQpZm9yKGY9dm9pZCAwO2Y9Yy5sYXN0Q2hpbGQ7KWMucmVtb3ZlQ2hpbGQoZik7dmFyIGc9Wi5jcmVhdGVDb250YWluZXIoYyxkKTtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1nO1oudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe1oudXBkYXRlQ29udGFpbmVyKGIsZyxhLGUpfSl9cmV0dXJuIFouZ2V0UHVibGljUm9vdEluc3RhbmNlKGYpfWZ1bmN0aW9uIFFnKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7TmcoYik/dm9pZCAwOkUoXCIyMDBcIik7cmV0dXJuIHBmKGEsYixudWxsLGMpfVxuZnVuY3Rpb24gUmcoYSxiKXt0aGlzLl9yZWFjdFJvb3RDb250YWluZXI9Wi5jcmVhdGVDb250YWluZXIoYSxiKX1SZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7Wi51cGRhdGVDb250YWluZXIoYSx0aGlzLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCxiKX07UmcucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7Wi51cGRhdGVDb250YWluZXIobnVsbCx0aGlzLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCxhKX07XG52YXIgU2c9e2NyZWF0ZVBvcnRhbDpRZyxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZihiKXJldHVybiBaLmZpbmRIb3N0SW5zdGFuY2UoYik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0UoXCIxODhcIik6RShcIjIxM1wiLE9iamVjdC5rZXlzKGEpKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFBnKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBQZyhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0UoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIFBnKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe05nKGEpP3ZvaWQgMDpcbkUoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhaLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtQZyhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpRZyx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczp0Yyx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6Wi5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOlouZmx1c2hTeW5jLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjptYixFdmVudFBsdWdpblJlZ2lzdHJ5OlZhLEV2ZW50UHJvcGFnYXRvcnM6Q2IsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OnFjLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpzYixSZWFjdERPTUV2ZW50TGlzdGVuZXI6eGR9fTtcblouaW5qZWN0SW50b0RldlRvb2xzKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpwYixidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjIuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBUZz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OlNnfSksVWc9VGcmJlNnfHxUZzttb2R1bGUuZXhwb3J0cz1VZ1tcImRlZmF1bHRcIl0/VWdbXCJkZWZhdWx0XCJdOlVnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4yLjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0scj1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdD1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQsdT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSx2PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHc9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGM9MDtjPGI7YysrKWUrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Yj1FcnJvcihlK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7Yi5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiO2IuZnJhbWVzVG9Qb3A9MTt0aHJvdyBiO31cbnZhciB6PXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBBKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9QS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtBLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/eShcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0EucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gQihhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHx6fWZ1bmN0aW9uIEMoKXt9Qy5wcm90b3R5cGU9QS5wcm90b3R5cGU7dmFyIEQ9Qi5wcm90b3R5cGU9bmV3IEM7RC5jb25zdHJ1Y3Rvcj1CO20oRCxBLnByb3RvdHlwZSk7RC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEM7Ri5jb25zdHJ1Y3Rvcj1FO20oRixBLnByb3RvdHlwZSk7Ri51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQ9ITA7Ri5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbn07dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGUpe3ZhciBjLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsYykmJiFJLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbD0wO2w8ZjtsKyspaFtsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpyLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fWZ1bmN0aW9uIEsoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXJ9XG5mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBMPS9cXC8rL2csTT1bXTtmdW5jdGlvbiBOKGEsYixlLGMpe2lmKE0ubGVuZ3RoKXt2YXIgZD1NLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gTyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPk0ubGVuZ3RoJiZNLnB1c2goYSl9XG5mdW5jdGlvbiBQKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSByOmNhc2UgdDpjYXNlIHU6Y2FzZSB2Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1EoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrUShkLGspO2crPVAoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9XG5mLmNhbGwoYSksaz0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitRKGQsaysrKSxnKz1QKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLHkoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFIoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gUyhhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9UKGEsYyxlLHAudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKEsoYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBUKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKTtiPU4oYixnLGMsZCk7bnVsbD09YXx8UChhLFwiXCIsUyxiKTtPKGIpfVxudmFyIFU9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VChhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9TihudWxsLG51bGwsYixlKTtudWxsPT1hfHxQKGEsXCJcIixSLGIpO08oYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UChhLFwiXCIscC50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VChhLGIsbnVsbCxwLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe0soYSk/dm9pZCAwOnkoXCIxNDNcIik7cmV0dXJuIGF9fSxDb21wb25lbnQ6QSxQdXJlQ29tcG9uZW50OkIsdW5zdGFibGVfQXN5bmNDb21wb25lbnQ6RSxGcmFnbWVudDp3LGNyZWF0ZUVsZW1lbnQ6SixjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe3ZhciBjPW0oe30sYS5wcm9wcyksXG5kPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUguY2FsbChiLGgpJiYhSS5oYXNPd25Qcm9wZXJ0eShoKSYmKGNbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBsPTA7bDxoO2wrKylmW2xdPWFyZ3VtZW50c1tsKzJdO2MuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cix0eXBlOmEudHlwZSxrZXk6ZCxyZWY6Zyxwcm9wczpjLF9vd25lcjprfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0sXG5pc1ZhbGlkRWxlbWVudDpLLHZlcnNpb246XCIxNi4yLjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6Ryxhc3NpZ246bX19LFY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpVfSksVz1WJiZVfHxWO21vZHVsZS5leHBvcnRzPVdbXCJkZWZhdWx0XCJdP1dbXCJkZWZhdWx0XCJdOlc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgUmVkdXhQcm9taXNlIGZyb20gJ3JlZHV4LXByb21pc2UnO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vY29udGFpbmVycy9BcHAnO1xuaW1wb3J0IHJlZHVjZXJzIGZyb20gJy4vcmVkdWNlcnMnXG5cbmNvbnN0IGNyZWF0ZVN0b3JlV2l0aE1pZGRsZXdhcmUgPSBhcHBseU1pZGRsZXdhcmUoUmVkdXhQcm9taXNlKShjcmVhdGVTdG9yZSk7XG5cblJlYWN0RE9NLnJlbmRlcig8UHJvdmlkZXIgc3RvcmUgPSB7Y3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZShyZWR1Y2Vycyl9PjxBcHAgLz48L1Byb3ZpZGVyPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpKTsiLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==